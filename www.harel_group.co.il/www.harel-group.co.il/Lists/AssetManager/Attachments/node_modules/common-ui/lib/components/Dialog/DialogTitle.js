"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _DialogTitle = _interopRequireDefault(require("./DialogTitle.style"));
var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));
var _DialogTitle2 = _interopRequireDefault(require("@material-ui/core/DialogTitle"));
var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));
var _commonIcons = require("common-icons");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var DialogTitle = function DialogTitle(props) {
  var children = props.children,
    onClose = props.onClose,
    showClose = props.showClose,
    autoFocusOnCloseButton = props.autoFocusOnCloseButton;
  var classes = (0, _DialogTitle.default)();
  var closeButtonRef = (0, _react.useRef)();
  var isShowCloseButton = showClose && onClose;
  (0, _react.useEffect)(function () {
    var _closeButtonRef$curre;
    autoFocusOnCloseButton && isShowCloseButton && ((_closeButtonRef$curre = closeButtonRef.current) === null || _closeButtonRef$curre === void 0 ? void 0 : _closeButtonRef$curre.focus());
  }, []);
  var content = /*#__PURE__*/_react.default.createElement(_DialogTitle2.default, {
    disableTypography: true,
    "data-hrl-bo": props['data-hrl-bo']
  }, children ? /*#__PURE__*/_react.default.createElement(_Typography.default, {
    variant: "h6",
    "data-hrl-bo": "".concat(props['data-hrl-bo'], "_text"),
    "aria-level": "2"
  }, children) : null);
  var closeButton = isShowCloseButton ? /*#__PURE__*/_react.default.createElement("div", {
    className: classes.closeButtonWrapper
  }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    "aria-label": "\u05E1\u05D2\u05D5\u05E8",
    ref: closeButtonRef,
    "data-hrl-bo": "".concat(props['data-hrl-bo'], "_close_button"),
    className: classes.closeButton,
    onClick: onClose
  }, /*#__PURE__*/_react.default.createElement(_commonIcons.IconX, null))) : null;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, closeButton, content);
};
DialogTitle.propTypes = {
  showClose: _propTypes.default.bool,
  /** On close event handler */
  onClose: _propTypes.default.func,
  /** The content of the component*/
  children: _propTypes.default.node,
  /** Data hrl bo attribute for automation testing. */
  'data-hrl-bo': _propTypes.default.string
};
DialogTitle.defaultProps = {
  showClose: true,
  autoFocusOnCloseButton: true
};
var _default = DialogTitle;
exports.default = _default;