"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _ExpansionPanel = _interopRequireDefault(require("@material-ui/core/ExpansionPanel"));
var _ExpansionPanelDetails = _interopRequireDefault(require("@material-ui/core/ExpansionPanelDetails"));
var _ExpansionPanelSummary = _interopRequireDefault(require("@material-ui/core/ExpansionPanelSummary"));
var _utils = require("../../utils");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ExpansionPanel(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var pickedProps = (0, _utils.pick)(['classes', 'defaultExpanded', 'disabled', 'expanded', 'TransitionComponent', 'TransitionProps'], props);
  var expanded = props.expanded,
    expandIcon = props.expandIcon,
    panels = props.panels;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, panels.map(function (panel, index) {
    var id = panel.id,
      header = panel.header,
      body = panel.body;
    return /*#__PURE__*/_react.default.createElement(_ExpansionPanel.default, (0, _extends2.default)({}, pickedProps, panel, {
      expanded: expanded !== undefined ? expanded === id : expanded,
      onChange: function onChange() {
        if (props.onChange) props.onChange(panel, expanded === id);
      },
      key: id
    }), /*#__PURE__*/_react.default.createElement(_ExpansionPanelSummary.default, {
      expandIcon: expandIcon || undefined,
      "aria-controls": "".concat(id, "-content"),
      id: "".concat(id, "-header")
    }, header), /*#__PURE__*/_react.default.createElement(_ExpansionPanelDetails.default, null, body));
  }));
}
ExpansionPanel.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * The content of the expansion panel. will be used if no children exists
   */
  panels: _propTypes.default.arrayOf(_propTypes.default.shape({
    /**
     * The header content of the expansion panel.
     */
    header: _propTypes.default.node,
    /**
     * The name of the expansion panel
     */

    id: _propTypes.default.string.isRequired,
    /**
     * The body content of the expansion panel.
     */
    body: _propTypes.default.node.isRequired,
    /**
     * If true, the panel will be displayed in a disabled state.
     */
    disabled: _propTypes.default.bool
  })).isRequired,
  /**
   * Callback fired when the expand/collapse state is changed.
   * Signature:
   *    function(event: object, expanded: boolean) => void
   *    event: The event source of the callback
   *    expanded: The expanded state of the panel
   */
  onChange: _propTypes.default.func,
  /**
   * The icon to display as the expand indicator.
   */
  expandIcon: _propTypes.default.node,
  /**
   * The component used for the collapse effect.
   */
  TransitionComponent: _propTypes.default.elementType,
  /**
   * Props applied to the Transition element.
   */
  TransitionProps: _propTypes.default.object,
  expanded: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string])
};
var _default = ExpansionPanel;
exports.default = _default;