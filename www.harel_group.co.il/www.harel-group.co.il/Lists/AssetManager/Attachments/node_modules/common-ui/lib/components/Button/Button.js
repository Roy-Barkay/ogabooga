"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _Button = _interopRequireDefault(require("@material-ui/core/Button"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("../../utils");
var _Button2 = _interopRequireDefault(require("./Button.style"));
var _clsx3 = _interopRequireDefault(require("clsx"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
var _styles = require("@material-ui/core/styles");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var InverseButton = (0, _styles.withStyles)({
  root: {
    color: '#003c7f',
    backgroundColor: '#f7b207',
    borderColor: '#f7b207',
    '&:hover': {
      backgroundColor: '#f9ba20',
      borderColor: '#f9ba20'
    },
    '&:active': {
      backgroundColor: '#fbd983',
      borderColor: '#f7b207'
    },
    '&:focus': {
      backgroundColor: '#f9c239',
      borderColor: '#f9c239'
    },
    '&:focus::before': {
      border: '1px solid #f9c239'
    }
  }
})(_Button.default);
function Button(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var pickedProps = Object.assign({
    disableRipple: true
  }, props);
  var children = pickedProps.children,
    content = pickedProps.content,
    icon = pickedProps.icon,
    id = pickedProps.id,
    iconPlacement = pickedProps.iconPlacement,
    round = pickedProps.round;
  delete pickedProps.iconPlacement;
  delete pickedProps.round;
  var classes = (0, _Button2.default)();
  var labelContent = (0, _utils.isChildrenNil)(children) ? content : children;
  var buttonContent = labelContent;
  if (icon) {
    buttonContent = iconPlacement === 'end' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, labelContent, /*#__PURE__*/_react.default.createElement("span", {
      className: classes.end
    }, icon)) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: classes.start
    }, icon), labelContent);
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, pickedProps && pickedProps.color === 'inverse' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(InverseButton, (0, _extends2.default)({}, pickedProps, {
    className: (0, _clsx3.default)(props.className, (0, _defineProperty2.default)({}, classes.round, round), 'MuiButton-containedInverse'),
    "aria-disabled": pickedProps.disabled
  }), buttonContent)) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Button.default, (0, _extends2.default)({}, pickedProps, {
    className: (0, _clsx3.default)(props.className, (0, _defineProperty2.default)({}, classes.round, round)),
    "aria-disabled": pickedProps.disabled
  }), buttonContent)));
}
Button.propTypes = {
  /**
   * The color of the component. It supports those theme colors that make sense for this component
   */
  color: _propTypes.default.oneOf(['primary', 'secondary', 'tertiary', 'inverse']),
  /**
   * The variant to use.
   */
  variant: _propTypes.default.oneOf(['contained', 'outlined', 'text']),
  /**
   * The content of the button. will be used if no children exists
   */
  content: _propTypes.default.string,
  /**
   * If true, the button will be disabled
   */
  disabled: _propTypes.default.bool,
  /**
   * If true, the button will be round
   */
  round: _propTypes.default.bool,
  /**
   * Display button with full width inside its container
   */
  fullWidth: _propTypes.default.bool,
  /**
   * On click handler
   */
  onClick: _propTypes.default.func,
  /**
   * The size of the button
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  /**
   * Button icon
   */
  icon: _propTypes.default.element,
  /**
   * Button icon placement
   */
  iconPlacement: _propTypes.default.oneOf(['start', 'end']),
  /**
   * Additional className
   */
  className: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string])
};
Button.defaultProps = {
  variant: 'contained',
  color: 'primary',
  size: 'medium',
  iconPlacement: 'start'
};
var _default = Button;
exports.default = _default;