"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _pickers = require("@material-ui/pickers");
var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));
var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _moment = _interopRequireDefault(require("moment"));
var _core = require("@material-ui/core");
var _styles = require("@material-ui/core/styles");
var _clsx3 = _interopRequireDefault(require("clsx"));
var _lodash = require("lodash");
var _ClickAwayListener = _interopRequireDefault(require("@material-ui/core/ClickAwayListener"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var styles = function styles(theme) {
  return {
    root: {
      display: 'flex',
      alignItems: 'center',
      flexDirection: 'row',
      position: 'relative'
    },
    dialogBody: {
      display: 'flex',
      flexDirection: 'column'
    },
    dialogPickers: {
      display: 'flex',
      flexDirection: 'row'
    },
    approveWrapper: {
      display: 'flex',
      alignItems: 'center',
      padding: '8px',
      justifyContent: 'flex-end'
    },
    inputWrapper: {
      display: 'flex',
      width: '100%'
    },
    pickersWrapper: {
      display: 'flex'
    },
    pickersWrapperInline: {
      display: 'flex',
      position: 'absolute',
      top: '50px',
      zIndex: 100,
      flexDirection: 'column',
      backgroundColor: '#fff',
      boxShadow: '0px 11px 15px -7px rgba(0,0,0,0.2), 0px 24px 38px 3px rgba(0,0,0,0.14), 0px 9px 46px 8px rgba(0,0,0,0.12)'
    },
    input: {
      cursor: 'default !important'
    },
    day: {
      color: theme.overrides.MuiRangeDatepicker.dayTextColor,
      width: '36px',
      height: '36px',
      margin: '0 2px',
      padding: '0',
      fontSize: '0.8rem',
      fontWeight: '500',
      '&:hover': {
        color: theme.overrides.MuiRangeDatepicker.highlightDayTextColor,
        backgroundColor: theme.overrides.MuiRangeDatepicker.fromToColor
      },
      '&:focus': {
        color: theme.overrides.MuiRangeDatepicker.highlightDayTextColor,
        backgroundColor: theme.overrides.MuiRangeDatepicker.fromToColor
      }
    },
    highlight: {
      backgroundColor: theme.overrides.MuiRangeDatepicker.trailColor
    },
    textHighlight: {
      color: theme.overrides.MuiRangeDatepicker.highlightDayTextColor
    },
    hovered: {
      backgroundColor: theme.overrides.MuiRangeDatepicker.trailHoverColor
    },
    hoveredTextColor: {
      color: theme.overrides.MuiRangeDatepicker.hoveredDayTextColor
    },
    firstDayHovered: {
      borderTopRightRadius: '36px',
      borderBottomRightRadius: '36px',
      borderTopLeftRadius: '0',
      borderBottomLeftRadius: '0'
    },
    firstDayHoveredButton: {
      color: theme.overrides.MuiRangeDatepicker.hoveredDayTextColor,
      backgroundColor: theme.overrides.MuiRangeDatepicker.fromToColor
    },
    endDayHoveredButton: {
      color: theme.overrides.MuiRangeDatepicker.hoveredDayTextColor,
      backgroundColor: theme.overrides.MuiRangeDatepicker.fromToColor
    },
    firstDayHighlightedButton: {
      color: theme.overrides.MuiRangeDatepicker.highlightDayTextColor,
      backgroundColor: theme.overrides.MuiRangeDatepicker.fromToColor
    },
    endDayHighlightedButton: {
      color: theme.overrides.MuiRangeDatepicker.highlightDayTextColor,
      backgroundColor: theme.overrides.MuiRangeDatepicker.fromToColor
    },
    endDayHovered: {
      borderTopLeftRadius: '36px',
      borderBottomLeftRadius: '36px'
    },
    firstHighlight: {
      borderTopRightRadius: '36px',
      borderBottomRightRadius: '36px'
    },
    endHighlight: {
      borderTopLeftRadius: '36px',
      borderBottomLeftRadius: '36px'
    },
    nonCurrentMonthDay: {
      cursor: 'default',
      backgroundColor: 'transparent',
      opacity: 0.6
    },
    highlightNonCurrentMonthDay: {
      backgroundColor: 'transparent!important',
      color: "".concat(theme.overrides.MuiRangeDatepicker.dayTextColor, "!important"),
      cursor: 'default',
      '&:hover': {
        backgroundColor: 'transparent !important'
      },
      '&:focus': {
        backgroundColor: 'transparent !important'
      }
    },
    iconButton: {
      '&$iconButtonDisabled': {
        backgroundColor: 'transparent',
        color: theme.overrides.MuiRangeDatepicker.dayTextColor
      }
    },
    iconButtonDisabled: {},
    '@global': {
      'button[data-hide="true"]': {
        display: 'none'
      }
    }
  };
};
var RangeDatePicker = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(RangeDatePicker, _React$Component);
  var _super = _createSuper(RangeDatePicker);
  function RangeDatePicker() {
    var _this;
    (0, _classCallCheck2.default)(this, RangeDatePicker);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      fromDate: null,
      toDate: null,
      selectingFrom: null,
      selectingTo: null,
      isSelectingDates: false,
      dateFocused: new Date(),
      rangeDatesString: ''
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isStaticMode", _this.props.variant === 'static');
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isInlineMode", _this.props.variant === 'inline');
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isAutoOk", _this.props.autoOk);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isStaticModeOrAutoOk", _this.isStaticMode || _this.isAutoOk);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setCurrentValueState", function (isFocusNeedChange) {
      var nextState = {
        selectingFrom: _this.state.selectingFrom,
        fromDate: _this.state.fromDate,
        toDate: _this.state.toDate
      };
      if (_this.props.value) {
        if (isFocusNeedChange) {
          nextState = _objectSpread(_objectSpread({}, nextState), {}, {
            dateFocused: _this.props.value.from ? _this.props.value.from : new Date()
          });
        }
        nextState.fromDate = _this.props.value.from;
        nextState.toDate = _this.props.value.to;
        if (!Boolean(_this.props.value.to) && Boolean(_this.props.value.from)) {
          nextState.rangeDatesString = "".concat((0, _moment.default)(_this.props.value.from).format(_this.props.formatDate), " - ");
          nextState.selectingFrom = _this.props.value.from;
          nextState.fromDate = null;
          nextState.toDate = null;
        }
        if (Boolean(_this.props.value.to) && Boolean(_this.props.value.from)) {
          nextState.rangeDatesString = "".concat((0, _moment.default)(_this.props.value.from).format(_this.props.formatDate), " - ").concat((0, _moment.default)(_this.props.value.to).format(_this.props.formatDate));
          nextState.selectingTo = null;
          nextState.selectingFrom = null;
        }
        if (!Boolean(_this.props.value.to) && !Boolean(_this.props.value.from)) {
          nextState.rangeDatesString = "";
        }
      } else {
        nextState.fromDate = null;
        nextState.toDate = null;
      }
      _this.setState(nextState);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isDateNotOnDisplay", function (newDateFrom) {
      var nextMonth = _this.isInlineMode ? 0 : _this.props.numberOfCalenders - 1;
      var endMonth = (0, _moment.default)(_this.state.dateFocused).add(nextMonth, 'month');
      return _this.state.fromDate && !((0, _moment.default)(newDateFrom).isSameOrAfter(_this.state.fromDate, 'month') && (0, _moment.default)(newDateFrom).isSameOrBefore(endMonth, 'month'));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setDate", function (mo) {
      var selectingFrom = _this.state.selectingFrom;
      if (!Boolean(selectingFrom)) {
        _this.setState({
          selectingFrom: mo.toDate(),
          fromDate: null,
          toDate: null
        });
        _this.isStaticModeOrAutoOk && _this.handlerOnChange(mo.toDate(), null);
        return;
      }
      if (Boolean(selectingFrom)) {
        if ((0, _moment.default)(selectingFrom).isAfter(mo.toDate())) {
          _this.setState({
            selectingFrom: mo.toDate(),
            fromDate: null,
            toDate: null
          });
          _this.isStaticModeOrAutoOk && _this.handlerOnChange(mo.toDate(), null);
        } else {
          if (_this.isStaticModeOrAutoOk) {
            _this.setState({
              toDate: mo.toDate(),
              fromDate: selectingFrom,
              isSelectingDates: false,
              selectingTo: null,
              selectingFrom: null
            });
            _this.props.onChange({
              from: selectingFrom,
              to: mo.toDate()
            });
          } else {
            _this.setState({
              toDate: mo.toDate(),
              fromDate: selectingFrom,
              selectingTo: null,
              selectingFrom: null
            });
            _this.isStaticModeOrAutoOk && _this.props.onChange({
              from: selectingFrom,
              to: mo.toDate()
            });
          }
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handlerOnChange", function (from, to) {
      _this.props.onChange({
        from: from,
        to: to
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hoveredDateChanged", function (mo, d) {
      var selectingFrom = _this.state.selectingFrom;
      if (selectingFrom) {
        _this.setState({
          selectingTo: mo.toDate()
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyPress", function (e) {
      var _e$target, _e$target2;
      switch (e.key) {
        case 'Enter':
          e.preventDefault();
          e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.click();
          break;
        case ' ':
          e.preventDefault();
          e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.click();
          break;
        default:
          break;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handlerMouseLeave", function (e) {
      var _this$state = _this.state,
        selectingFrom = _this$state.selectingFrom,
        isSelectingDates = _this$state.isSelectingDates;
      if (isSelectingDates && selectingFrom) {
        _this.setState({
          selectingTo: null
        });
      }
      _this.isStaticMode && _this.setState({
        selectingTo: null
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderWrappedWeekDay", function (date, selectedDate, dayInCurrentMonth) {
      var _clsx, _clsx2;
      var classes = _this.props.classes;
      var _this$state2 = _this.state,
        selectingFrom = _this$state2.selectingFrom,
        selectingTo = _this$state2.selectingTo,
        toDate = _this$state2.toDate,
        fromDate = _this$state2.fromDate;
      var dateClone = (0, _moment.default)(date).clone().toDate();
      var start = fromDate;
      var end = toDate;
      var dayIsBetween = (0, _moment.default)(dateClone).isSameOrAfter(start, 'day') && (0, _moment.default)(dateClone).isSameOrBefore(end, 'day');
      var dayIsHovered = (0, _moment.default)(dateClone).isSameOrAfter(selectingFrom, 'day') && (0, _moment.default)(dateClone).isSameOrBefore(selectingTo, 'day');
      var firstSelectedDay = (0, _moment.default)(selectingTo).isBefore(selectingFrom, 'day') ? selectingTo : selectingFrom;
      var lastSelectedDay = (0, _moment.default)(selectingTo).isAfter(selectingFrom, 'day') ? selectingTo : selectingFrom;
      var isFirstHovered = (0, _moment.default)(dateClone).isSame(firstSelectedDay, 'day');
      var isLastDayHover = (0, _moment.default)(dateClone).isSame(lastSelectedDay, 'day');
      var isFirstDay = (0, _moment.default)(dateClone).isSame(start, 'day');
      var isLastDay = (0, _moment.default)(dateClone).isSame(end, 'day');
      var isDayInSelectionRange = true;
      var isDayPressed = (0, _moment.default)(dateClone).isSame(fromDate, 'day') || (0, _moment.default)(dateClone).isSame(toDate, 'day') || (0, _moment.default)(dateClone).isSame(selectingFrom, 'day');
      if (_this.props.limitedRange) {
        if (_this.props.limitedRange.from) {
          isDayInSelectionRange = (0, _moment.default)(dateClone).isSameOrAfter(_this.props.limitedRange.from);
        }
        if (_this.props.limitedRange.to) {
          isDayInSelectionRange = isDayInSelectionRange && (0, _moment.default)(dateClone).isSameOrBefore(_this.props.limitedRange.to);
        }
      }
      var isDayDisabled = !dayInCurrentMonth || !isDayInSelectionRange;
      var dataHrlBo = (0, _moment.default)(dateClone).format('YYYY-MM-DD') + "".concat(!dayInCurrentMonth ? '-outsideMonth' : '');
      var wrapperClassName = (0, _clsx3.default)((_clsx = {}, (0, _defineProperty2.default)(_clsx, classes.highlight, dayIsBetween), (0, _defineProperty2.default)(_clsx, classes.firstHighlight, isFirstDay), (0, _defineProperty2.default)(_clsx, classes.endHighlight, isLastDay), (0, _defineProperty2.default)(_clsx, classes.hovered, dayIsHovered), (0, _defineProperty2.default)(_clsx, classes.firstDayHovered, isFirstHovered), (0, _defineProperty2.default)(_clsx, classes.endDayHovered, isLastDayHover), (0, _defineProperty2.default)(_clsx, classes.nonCurrentMonthDay, isDayDisabled), _clsx));
      var dayClassName = (0, _clsx3.default)(classes.day, (_clsx2 = {}, (0, _defineProperty2.default)(_clsx2, classes.nonCurrentMonthDay, isDayDisabled), (0, _defineProperty2.default)(_clsx2, classes.textHighlight, dayIsBetween), (0, _defineProperty2.default)(_clsx2, classes.firstDayHoveredButton, isFirstHovered), (0, _defineProperty2.default)(_clsx2, classes.endDayHoveredButton, isLastDayHover), (0, _defineProperty2.default)(_clsx2, classes.hoveredTextColor, dayIsHovered), (0, _defineProperty2.default)(_clsx2, classes.firstDayHighlightedButton, isFirstDay), (0, _defineProperty2.default)(_clsx2, classes.endDayHighlightedButton, isLastDay), (0, _defineProperty2.default)(_clsx2, classes.highlightNonCurrentMonthDay, !dayInCurrentMonth && dayIsBetween), _clsx2));
      return /*#__PURE__*/_react.default.createElement("div", {
        onMouseOver: function onMouseOver() {
          return _this.hoveredDateChanged(date);
        },
        className: wrapperClassName,
        onClick: function onClick(event) {
          if (isDayDisabled) {
            event.stopPropagation();
          }
        },
        onKeyPress: function onKeyPress(e) {
          return _this.handleKeyPress(e);
        }
      }, /*#__PURE__*/_react.default.createElement(_core.IconButton, {
        disabled: isDayDisabled,
        className: dayClassName,
        classes: {
          root: classes.iconButton,
          disabled: classes.iconButtonDisabled
        },
        "data-hrl-bo": dataHrlBo,
        title: "".concat(dataHrlBo, " - \u05D9\u05D5\u05DD ").concat((0, _moment.default)(dataHrlBo).format('dddd')),
        "aria-pressed": isDayPressed,
        autoFocus: (0, _moment.default)(dataHrlBo).format('YYMMDD') === (0, _moment.default)(_this.state.fromDate).format('YYMMDD')
      }, /*#__PURE__*/_react.default.createElement("span", null, " ", (0, _moment.default)(dateClone).format('D'), " ")));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMonthChanged", function (d, mo) {
      _this.setState({
        dateFocused: (0, _moment.default)(d).isAfter(_this.state.dateFocused) ? (0, _moment.default)(_this.state.dateFocused).add(1, 'month').toDate() : (0, _moment.default)(_this.state.dateFocused).subtract(1, 'month').toDate()
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "closeDialog", function (e) {
      e.preventDefault();
      e.stopPropagation();
      _this.setState({
        isSelectingDates: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "openDialog", function (e) {
      e.preventDefault();
      e.stopPropagation();
      _this.setState({
        isSelectingDates: true,
        dateFocused: _this.props.value && _this.props.value.from ? _this.props.value.from : new Date()
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCancel", function (e) {
      _this.closeDialog(e);
      _this.setCurrentValueState();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRangeManuallySelected", function () {
      _this.setState({
        isSelectingDates: false
      });
      _this.props.onChange({
        from: _this.state.fromDate,
        to: _this.state.toDate
      });
    });
    return _this;
  }
  (0, _createClass2.default)(RangeDatePicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setCurrentValueState(true);
      (0, _printVersion.default)();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (!(0, _lodash.isEqual)(prevProps.value, this.props.value)) {
        var calenderFocus = false;
        if (this.props.value && this.props.value.from) {
          if (this.props.disableAutoMonthSwitching) {
            calenderFocus = this.isDateNotOnDisplay(this.props.value.from);
          } else {
            calenderFocus = !(0, _lodash.isEqual)(this.props.value.from, this.state.fromDate);
          }
        }
        this.setCurrentValueState(calenderFocus);
      }
    }
  }, {
    key: "getDateInputComponent",
    value: function getDateInputComponent(classes) {
      var DateInputComponent = this.props.DateInputComponent;
      var defaultDateInputComponent = /*#__PURE__*/_react.default.createElement(_TextField.default, {
        disabled: this.isStaticMode,
        label: this.props.label,
        InputProps: {
          style: {
            cursor: 'default'
          },
          className: classes.input
        },
        value: this.state.rangeDatesString
      });
      return this.props.DateInputComponent ? DateInputComponent : defaultDateInputComponent;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        classes = _this$props.classes,
        cancelLabel = _this$props.cancelLabel,
        okLabel = _this$props.okLabel;
      var _this$state3 = this.state,
        dateFocused = _this$state3.dateFocused,
        isSelectingDates = _this$state3.isSelectingDates;
      var countCalendar = this.isInlineMode ? 1 : this.props.numberOfCalenders;
      var Calenders = [];
      for (var i = 0; i < countCalendar; i++) {
        Calenders.push( /*#__PURE__*/_react.default.createElement(_pickers.DatePicker, {
          key: i,
          hideCalenderDate: true,
          isAutoOk: true,
          hideTabs: true,
          disableToolbar: true,
          leftArrow: true,
          onMonthChange: this.onMonthChanged,
          renderDay: this.renderWrappedWeekDay,
          rightArrowIcon: i === 0 ? undefined : null,
          rightArrowButtonProps: {
            'data-hrl-bo': 'arrow-forward',
            'aria-label': 'לעבור לחודש הבא',
            'data-hide': this.props.numberOfCalenders === 2 && i === 0
          },
          leftArrowIcon: i === this.props.numberOfCalenders - 1 ? undefined : null,
          leftArrowButtonProps: {
            'data-hrl-bo': 'arrow-back',
            'aria-label': 'לעבור לחודש הקודם',
            'data-hide': this.props.numberOfCalenders === 2 && i === 1
          },
          value: (0, _moment.default)(dateFocused).add(i, 'month').toDate(),
          onChange: this.setDate,
          format: this.props.formatDate,
          variant: "static",
          type: "date"
        }));
      }
      var Pickers = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, Calenders);
      var InputDate = this.getDateInputComponent(classes);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: classes.root
      }, this.isInlineMode ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        onClick: this.openDialog
      }, InputDate), isSelectingDates && /*#__PURE__*/_react.default.createElement(_ClickAwayListener.default, {
        onClickAway: !this.isAutoOk ? this.onCancel : this.onRangeManuallySelected,
        mouseEvent: "onClick"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: classes.pickersWrapperInline,
        onMouseLeave: this.handlerMouseLeave,
        role: 'dialog',
        "aria-label": 'רכיב תאריכון',
        tabIndex: -1
      }, Pickers, !this.isAutoOk && /*#__PURE__*/_react.default.createElement("div", {
        className: classes.approveWrapper
      }, /*#__PURE__*/_react.default.createElement(_core.Button, {
        onClick: this.onRangeManuallySelected
      }, okLabel), /*#__PURE__*/_react.default.createElement(_core.Button, {
        onClick: this.onCancel
      }, cancelLabel))))) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !this.isStaticMode && /*#__PURE__*/_react.default.createElement(_Dialog.default, {
        maxWidth: false,
        open: isSelectingDates,
        onClose: this.closeDialog,
        onBackdropClick: !this.isAutoOk ? this.onCancel : this.onRangeManuallySelected
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: classes.dialogBody,
        role: 'dialog',
        "aria-label": this.props.label,
        tabIndex: -1
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: classes.dialogPickers,
        tabIndex: -1,
        onMouseLeave: this.handlerMouseLeave
      }, Pickers), !this.isAutoOk && /*#__PURE__*/_react.default.createElement("div", {
        className: classes.approveWrapper
      }, /*#__PURE__*/_react.default.createElement(_core.Button, {
        onClick: this.onRangeManuallySelected
      }, okLabel), /*#__PURE__*/_react.default.createElement(_core.Button, {
        onClick: this.onCancel
      }, cancelLabel)))), /*#__PURE__*/_react.default.createElement("div", {
        className: classes.inputWrapper
      }, this.isStaticMode ? /*#__PURE__*/_react.default.createElement("div", null, this.props.headerVisible && InputDate, /*#__PURE__*/_react.default.createElement("div", {
        className: classes.pickersWrapper,
        onMouseLeave: this.handlerMouseLeave,
        role: this.props.roleForStaticMode,
        "aria-label": this.props.ariaLabelForStaticMode
      }, Pickers)) : /*#__PURE__*/_react.default.createElement("div", {
        onClick: this.openDialog
      }, InputDate)), ' '));
    }
  }]);
  return RangeDatePicker;
}(_react.default.Component);
RangeDatePicker.propTypes = {
  /** Value in range of dates */
  value: _propTypes.default.any,
  /** On close event handler */
  onClose: _propTypes.default.func,
  /** Is auto selecting the range of dates */
  autoOk: _propTypes.default.bool,
  /** Picker container option */
  variant: _propTypes.default.oneOf(['dialog', 'static', 'inline']),
  /** Change event  */
  onChange: _propTypes.default.func,
  /** Enforce limited date ranged */
  limitedRange: _propTypes.default.object,
  /** Number of calenders (for variant 'inline' count 1) */
  numberOfCalenders: _propTypes.default.number,
  /** Is header visible*/
  headerVisible: _propTypes.default.bool,
  /** Input's label */
  label: _propTypes.default.string,
  /** Cancel Button Text */
  cancelLabel: _propTypes.default.string,
  /** Ok Button Text */
  okLabel: _propTypes.default.string,
  /** custom date input **/
  DateInputComponent: _propTypes.default.node,
  /** Is disabled */
  disabled: _propTypes.default.bool,
  /** Format date. Default 'DD/MM/YY' */
  formatDate: _propTypes.default.string,
  /** disable Automatic Switching of calender */
  disableAutoMonthSwitching: _propTypes.default.bool,
  classes: _propTypes.default.any,
  roleForStaticMode: _propTypes.default.string,
  ariaLabelForStaticMode: _propTypes.default.string
};
RangeDatePicker.defaultProps = {
  disabled: false,
  autoOk: true,
  variant: 'dialog',
  formatDate: 'DD/MM/YY',
  numberOfCalenders: 2,
  limitedRange: {
    from: null,
    to: null
  },
  cancelLabel: 'בטל',
  headerVisible: true,
  okLabel: 'בחר',
  disableAutoMonthSwitching: false,
  roleForStaticMode: null,
  ariaLabelForStaticMode: null
};
var _default = (0, _styles.withStyles)(styles)(RangeDatePicker);
exports.default = _default;