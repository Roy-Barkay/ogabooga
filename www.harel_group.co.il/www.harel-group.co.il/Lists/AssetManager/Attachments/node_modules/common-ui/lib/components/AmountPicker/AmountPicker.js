"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _TextField = _interopRequireDefault(require("../TextField"));
var _utils = require("../../utils");
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton/IconButton"));
var _AmountPicker = _interopRequireDefault(require("./AmountPicker.style"));
var _calculateInitialValue = require("./calculateInitialValue");
var _PlusIcon = _interopRequireDefault(require("./icons/PlusIcon"));
var _MinusIcon = _interopRequireDefault(require("./icons/MinusIcon"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var UP_ARROW = 38;
var DOWN_ARROW = 40;
var DEFAULT_ACCESSIBILITY_LABEL = " \u05E0\u05D9\u05EA\u05DF \u05DC\u05E9\u05E0\u05D5\u05EA \u05D0\u05EA \u05D4\u05E1\u05DB\u05D5\u05DD \u05D1\u05D0\u05DE\u05E6\u05E2\u05D5\u05EA \u05DE\u05E7\u05E9\u05D9\u05DD \u05D7\u05E5 \u05DC\u05DE\u05E2\u05DC\u05D4 \u05D5\u05D7\u05E5 \u05DC\u05DE\u05D8\u05D4 \u05D0\u05D5 \u05D1\u05E2\u05D6\u05E8\u05EA \u05D4\u05DB\u05E4\u05EA\u05D5\u05E8\u05D9\u05DD \u05D4\u05E1\u05DE\u05D5\u05DB\u05D9\u05DD \u05DC\u05E9\u05D3\u05D4";
var AmountPicker = function AmountPicker(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var classes = (0, _AmountPicker.default)(props);
  var decimalScale = props.decimalScale,
    prefix = props.prefix,
    suffix = props.suffix,
    decimalSeparator = props.decimalSeparator,
    thousandSeparator = props.thousandSeparator,
    secondary = props.secondary,
    customAriaLabel = props.customAriaLabel;
  var pickedProps = (0, _utils.pick)(['error', 'label', 'fullwidth', 'helperText', 'classes', 'name', 'required', 'variant'], props);
  var getNumber = function getNumber(val) {
    return typeof val === 'string' ? parseFloat(val) : val;
  };
  var _useState = (0, _react.useState)({
      formattedValue: ''
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    valueObj = _useState2[0],
    setValueObj = _useState2[1];
  var _useState3 = (0, _react.useState)(getNumber(props.min)),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    min = _useState4[0],
    setMin = _useState4[1];
  var _useState5 = (0, _react.useState)(getNumber(props.max)),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    max = _useState6[0],
    setMax = _useState6[1];
  (0, _react.useEffect)(function () {
    var newValue = (0, _calculateInitialValue.calculateInitialValue)({
      val: props.value,
      min: min,
      max: max
    });
    var _formatAsNumber = formatAsNumber(newValue),
      value = _formatAsNumber.value,
      formattedValue = _formatAsNumber.formattedValue;
    setValueObj({
      value: value,
      formattedValue: formattedValue
    });
    props.onValueReceived && props.onValueReceived(value, formattedValue);
  }, [props.value]);
  (0, _react.useEffect)(function () {
    setMin(getNumber(props.min));
  }, [props.min]);
  (0, _react.useEffect)(function () {
    setMax(getNumber(props.max));
  }, [props.max]);
  var dataHrlBo = props['data-hrl-bo'];
  var fixLeadingZero = function fixLeadingZero(numStr) {
    if (!numStr) {
      return numStr;
    }
    var isNegative = numStr[0] === '-';
    if (isNegative) {
      numStr = numStr.substring(1, numStr.length);
    }
    var parts = numStr.split('.');
    var beforeDecimal = parts[0].replace(/^0+/, '') || '0';
    var afterDecimal = parts[1] || '';
    return "".concat(isNegative ? '-' : '').concat(beforeDecimal).concat(afterDecimal ? ".".concat(afterDecimal) : '');
  };
  var applyThousandSeparator = function applyThousandSeparator(str, thousandSeparator) {
    var thousandsGroupRegex = /(\d)(?=(\d{3})+(?!\d))/g;
    var index = str.search(/[1-9]/);
    index = index === -1 ? str.length : index;
    return str.substring(0, index) + str.substring(index, str.length).replace(thousandsGroupRegex, '$1' + thousandSeparator);
  };
  var splitDecimal = function splitDecimal(numStr) {
    var allowNegative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var hasNagation = numStr[0] === '-';
    var addNegation = hasNagation && allowNegative;
    numStr = numStr.replace('-', '');
    var parts = numStr.split('.');
    var beforeDecimal = parts[0];
    var afterDecimal = parts[1] || '';
    return {
      beforeDecimal: beforeDecimal,
      afterDecimal: afterDecimal,
      hasNagation: hasNagation,
      addNegation: addNegation
    };
  };
  var limitToScale = function limitToScale(numStr, scale, fixedDecimalScale) {
    var str = '';
    var filler = fixedDecimalScale ? '0' : '';
    for (var i = 0; i <= scale - 1; i++) {
      str += numStr[i] || filler;
    }
    return str;
  };
  var formatAsNumber = function formatAsNumber(numStr) {
    var result = {};
    numStr = numStr != null ? fixLeadingZero(numStr.toString()) : '';
    var hasDecimalSeparator = numStr.indexOf(decimalSeparator) !== -1 && decimalScale;
    var _splitDecimal = splitDecimal(numStr, true),
      beforeDecimal = _splitDecimal.beforeDecimal,
      afterDecimal = _splitDecimal.afterDecimal,
      addNegation = _splitDecimal.addNegation;
    //apply decimal precision if its defined
    if (decimalScale !== undefined) {
      afterDecimal = limitToScale(afterDecimal, decimalScale, false);
    }
    var floatStr = beforeDecimal + (hasDecimalSeparator && decimalSeparator || '') + afterDecimal;
    result.value = parseFloat(addNegation ? '-' + floatStr : floatStr);
    if (thousandSeparator) {
      beforeDecimal = applyThousandSeparator(beforeDecimal, thousandSeparator);
    }
    //restore negation sign
    if (addNegation) beforeDecimal = '-' + beforeDecimal;
    //add prefix and suffix
    if (prefix) beforeDecimal = prefix + beforeDecimal;
    if (suffix) afterDecimal = afterDecimal + suffix;
    result.formattedValue = beforeDecimal + (hasDecimalSeparator && decimalSeparator || '') + afterDecimal;
    return result;
  };
  var increaseValue = function increaseValue() {
    var val = (0, _calculateInitialValue.calculateInitialValue)({
      val: valueObj.value + Math.abs(props.step),
      min: min,
      max: max
    });
    var _formatAsNumber2 = formatAsNumber(val),
      value = _formatAsNumber2.value,
      formattedValue = _formatAsNumber2.formattedValue;
    setValueObj({
      value: value,
      formattedValue: formattedValue
    });
    props.onChange && props.onChange(value, formattedValue);
  };
  var decreaseValue = function decreaseValue() {
    var val = (0, _calculateInitialValue.calculateInitialValue)({
      val: valueObj.value - Math.abs(props.step),
      min: min,
      max: max
    });
    var _formatAsNumber3 = formatAsNumber(val),
      value = _formatAsNumber3.value,
      formattedValue = _formatAsNumber3.formattedValue;
    setValueObj({
      value: value,
      formattedValue: formattedValue
    });
    props.onChange && props.onChange(value, formattedValue);
  };
  var onKeyDown = function onKeyDown(e) {
    if (e.keyCode === UP_ARROW) {
      increaseValue();
    } else if (e.keyCode === DOWN_ARROW) {
      decreaseValue();
    }
  };
  var AccessibilityTextFieldLabel = function AccessibilityTextFieldLabel() {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, props.label, /*#__PURE__*/_react.default.createElement("span", {
      className: classes.accessibilityLabel
    }, !(customAriaLabel !== null && customAriaLabel !== void 0 && customAriaLabel.accessibilityLabel) ? DEFAULT_ACCESSIBILITY_LABEL : " ".concat(customAriaLabel.accessibilityLabel)));
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    id: props.id,
    className: classes.root,
    "data-hrl-bo": dataHrlBo,
    role: "group",
    "aria-label": !(customAriaLabel !== null && customAriaLabel !== void 0 && customAriaLabel.group) ? "\u05E9\u05D9\u05E0\u05D5\u05D9 \u05E1\u05DB\u05D5\u05DD" : customAriaLabel.group
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.stepButtonWrapper
  }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    className: classes.stepButton,
    onClick: increaseValue,
    disabled: valueObj.value === max,
    "aria-label": !(customAriaLabel !== null && customAriaLabel !== void 0 && customAriaLabel.plusButton) ? "\u05D4\u05D2\u05D3\u05DC \u05D0\u05EA \u05D4\u05E1\u05DB\u05D5\u05DD \u05D1 ".concat(props.step) : customAriaLabel.plusButton,
    "data-hrl-bo": 'amount-picker-plus-button'
  }, /*#__PURE__*/_react.default.createElement(_PlusIcon.default, {
    disabled: valueObj.value === max,
    focusable: false,
    secondary: secondary
  }))), /*#__PURE__*/_react.default.createElement(_TextField.default, (0, _extends2.default)({}, pickedProps, {
    label: /*#__PURE__*/_react.default.createElement(AccessibilityTextFieldLabel, null),
    id: "".concat(props.id, "-text-field"),
    value: valueObj.formattedValue,
    inputProps: {
      className: classes.inputText,
      onKeyDown: onKeyDown,
      disabled: false
    },
    InputLabelProps: {
      className: classes.inputLabel
    }
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.stepButtonWrapper
  }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    className: classes.stepButton,
    onClick: decreaseValue,
    disabled: valueObj.value === min,
    "aria-label": !(customAriaLabel !== null && customAriaLabel !== void 0 && customAriaLabel.minusButton) ? "\u05D4\u05E4\u05D7\u05EA \u05D0\u05EA \u05D4\u05E1\u05DB\u05D5\u05DD \u05D1 ".concat(props.step) : customAriaLabel.minusButton,
    "data-hrl-bo": 'amount-picker-minus-button'
  }, /*#__PURE__*/_react.default.createElement(_MinusIcon.default, {
    disabled: valueObj.value === min,
    focusable: false,
    secondary: secondary
  }))));
};
AmountPicker.propTypes = {
  /** The value of the input element, required for a controlled component. */
  value: _propTypes.default.number,
  /** Minimum acceptable value */
  min: _propTypes.default.number,
  /** Maximum acceptable value */
  max: _propTypes.default.number,
  /** Step size */
  step: _propTypes.default.number,
  /** Prefix Sign */
  prefix: _propTypes.default.string,
  /** Suffix Sign */
  suffix: _propTypes.default.string,
  /** How many numbers after decimal */
  decimalScale: _propTypes.default.number,
  /** Decimal separator char */
  decimalSeparator: _propTypes.default.string,
  /** Thousand separator char */
  thousandSeparator: _propTypes.default.string,
  /** Callback fired when the value is changed. */
  onChange: _propTypes.default.func,
  /** Callback fired when receiving new value prop. */
  onValueReceived: _propTypes.default.func,
  /** Override or extend the styles applied to TextField. */
  classes: _propTypes.default.object,
  /** If true, the label will be displayed in an error state. */
  error: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
  /** If true, the input will take up the full width of its container. */
  fullWidth: _propTypes.default.bool,
  /** The helper text content. */
  helperText: _propTypes.default.node,
  /** The id of the input element. Use this prop to make label and helperText accessible for screen readers. */
  id: _propTypes.default.string.isRequired,
  /**The label content. */
  label: _propTypes.default.node,
  /** textField name. */
  name: _propTypes.default.string,
  /** If true, input element will be required. */
  required: _propTypes.default.bool,
  /** The variant to use in TextField. */
  variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled']),
  /** If true, use secondary design */
  secondary: _propTypes.default.bool,
  /** custom aria-label for buttons and group */
  customAriaLabel: _propTypes.default.shape({
    minusButton: _propTypes.default.string,
    plusButton: _propTypes.default.string,
    group: _propTypes.default.string,
    accessibilityLabel: _propTypes.default.string
  }),
  /** The helper props for QA */
  'data-hrl-bo': _propTypes.default.string
};
AmountPicker.defaultProps = {
  id: "amount-picker".concat(Math.floor(Math.random() * 10000)),
  label: '',
  required: false,
  step: 1,
  prefix: "\u20AA",
  suffix: '',
  decimalScale: 2,
  decimalSeparator: '.',
  thousandSeparator: ',',
  secondary: false,
  customAriaLabel: {},
  'data-hrl-bo': 'common-ui-amount-picker'
};
var _default = AmountPicker;
exports.default = _default;