"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propTypes = exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _formik = require("formik");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _misc = require("../../utils/misc");
var _lodash = require("lodash");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var reducer = function reducer(state, action) {
  switch (action.type) {
    case 'SET_ERRORS':
      if ((0, _lodash.isEqual)(action.payload, state.errors)) {
        return state;
      }
      return _objectSpread(_objectSpread({}, state), {}, {
        errors: _objectSpread({}, action.payload)
      });
    case 'SET_HELPERTEXT':
      if ((0, _lodash.isEqual)(action.payload, state.helperText)) {
        return state;
      }
      return _objectSpread(_objectSpread({}, state), {}, {
        helperText: _objectSpread({}, action.payload)
      });
    case 'SET_FIELD_VALUE':
      if ((0, _lodash.isEqual)(action.payload, state.values)) {
        return state;
      }
      return _objectSpread(_objectSpread({}, state), {}, {
        values: _objectSpread(_objectSpread({}, state.values), action.payload)
      });
    case 'SET_FIELD_TOUCHED':
      if ((0, _lodash.isEqual)(action.payload, state.touched)) {
        return state;
      }
      return _objectSpread(_objectSpread({}, state), {}, {
        touched: _objectSpread(_objectSpread({}, state.touched), action.payload)
      });
    case 'RESET':
      return {
        values: action.payload,
        errors: {},
        touched: {},
        helperText: {}
      };
    default:
      return state;
  }
};
var propTypes = {
  /** Callback fired when the value is changed. */
  onChange: _propTypes.default.func,
  /**
   * Function to be called when input was blur
   */
  onBlur: _propTypes.default.func,
  /** The value of the input element, required for a controlled component. */
  value: _propTypes.default.any,
  /** The grid items sizing */
  name: _propTypes.default.string,
  /**    The helper text content. */
  helperText: _propTypes.default.any,
  /** If true, the label is displayed as required and the input element` will be required. */
  required: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.object]),
  /** If true, the label will be displayed in an error state. */
  error: _propTypes.default.any
};
exports.propTypes = propTypes;
var useReduxField = function useReduxField(Comp) {
  var CompInner = function CompInner(props) {
    var onChange = props.onChange,
      onBlur = props.onBlur,
      value = props.value,
      name = props.name,
      helperText = props.helperText,
      error = props.error;
    var useRedux = function useRedux(initialValue) {
      var _React$useReducer = _react.default.useReducer(reducer, {
          values: initialValue,
          errors: {},
          touched: {},
          helperText: {}
        }),
        _React$useReducer2 = (0, _slicedToArray2.default)(_React$useReducer, 2),
        state = _React$useReducer2[0],
        dispatch = _React$useReducer2[1];
      _react.default.useEffect(function () {
        if (props.form) {
          var touched = _objectSpread({}, (0, _formik.getIn)(props.form.touched, props.field.name));
          dispatch({
            type: 'SET_FIELD_TOUCHED',
            payload: touched
          });
        }
      }, [props.form && props.form.touched]);
      _react.default.useEffect(function () {
        var err = error;
        if (props.form) {
          err = _objectSpread({}, (0, _formik.getIn)(props.form.errors, props.field.name));
          dispatch({
            type: 'SET_HELPERTEXT',
            payload: err
          });
        }
        dispatch({
          type: 'SET_ERRORS',
          payload: err
        });
      }, [error, props.form && props.form.errors]);
      _react.default.useEffect(function () {
        var hlpText = helperText;
        if (props.form) {
          var err = _objectSpread({}, (0, _formik.getIn)(props.form.errors, props.field.name));
          hlpText = err ? err : helperText;
        }
        dispatch({
          type: 'SET_HELPERTEXT',
          payload: hlpText
        });
      }, [helperText, props.form && props.form.errors]);
      var handleChange = function handleChange(field) {
        return function (event) {
          var _event$target;
          if (!((_event$target = event.target) !== null && _event$target !== void 0 && _event$target.value) && !state.values[field]) {
            return;
          }
          var _event$target$value = event.target.value,
            value = _event$target$value === void 0 ? null : _event$target$value;
          if (!(0, _lodash.isEqual)(value, state.values[field])) {
            var values = Object.assign(state.values, (0, _defineProperty2.default)({}, field, value));
            state && onChange && onChange((0, _misc.getEventData)(name, values), {
              field: field,
              value: value
            });
            dispatch({
              type: 'SET_FIELD_VALUE',
              payload: (0, _defineProperty2.default)({}, field, value)
            });
            if (props.form) {
              props.field.onChange((0, _misc.getEventData)(props.field.name, values));
            }
          }
        };
      };
      var handleBlur = function handleBlur(field) {
        return function (event) {
          var touched = Object.assign(state.touched, (0, _defineProperty2.default)({}, field, true));
          var _event$target$value2 = event.target.value,
            value = _event$target$value2 === void 0 ? null : _event$target$value2;
          state && onBlur && onBlur((0, _misc.getEventData)(name, state.values), {
            field: field,
            value: value
          });
          dispatch({
            type: 'SET_FIELD_TOUCHED',
            payload: (0, _defineProperty2.default)({}, field, true)
          });
          if (props.form) {
            props.form.setTouched(_objectSpread(_objectSpread({}, props.form.touched), {}, (0, _defineProperty2.default)({}, props.field.name, _objectSpread({}, touched))));
          }
        };
      };
      var reset = function reset(values) {
        dispatch({
          type: 'RESET',
          payload: values
        });
        console.log('Dispatch Reset');
      };
      var getFieldProps = function getFieldProps(field) {
        var _props$required;
        return {
          value: state.values[field],
          onChange: handleChange(field),
          onBlur: handleBlur(field),
          error: state.touched[field] && state.errors[field],
          helperText: state.touched[field] && state.errors[field] ? state.helperText[field] : '',
          required: (_props$required = props.required) === null || _props$required === void 0 ? void 0 : _props$required[field]
        };
      };
      return _objectSpread({
        handleChange: handleChange,
        handleBlur: handleBlur,
        getFieldProps: getFieldProps,
        reset: reset
      }, state);
    };
    useReduxField.displayName = "useReduxField(".concat(getDisplayName(Comp), ")");
    return /*#__PURE__*/_react.default.createElement(Comp, (0, _extends2.default)({}, props, {
      useRedux: useRedux
    }));
  };
  CompInner.propTypes = _objectSpread({}, propTypes);
  return CompInner;
};
function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}
var _default = useReduxField;
exports.default = _default;