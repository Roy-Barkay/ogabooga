"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Switch = _interopRequireDefault(require("@material-ui/core/Switch"));
var _utils = require("../../utils");
var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));
var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));
var _formik = require("formik");
var _FormHelperText = _interopRequireDefault(require("@material-ui/core/FormHelperText"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Switch(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var pickedProps = (0, _utils.pick)(['checked', 'disabled', 'id', 'inputProps', 'inputRef', 'onChange', 'required', 'size', 'type', 'value', 'label', 'error', 'helperText'], props);
  var IDRef = (0, _react.useRef)("switchID_".concat(Math.floor(Math.random() * 100) + 10));
  var defaultID = props.id ? props.id : IDRef.current;
  var dataHrlBo = props['data-hrl-bo'];
  var value = props.value,
    labelPlacement = props.labelPlacement;
  var label = props.required ? props.label + ' *' : props.label;
  var fieldError = pickedProps.error;
  var fieldHelperText = pickedProps.helperText;
  if (props.form) {
    var fieldName = props.field.name;
    var touched = (0, _formik.getIn)(props.form.touched, fieldName);
    var formErrors = (0, _formik.getIn)(props.form.errors, fieldName);
    fieldError = !!(touched && formErrors);
    fieldHelperText = fieldError ? formErrors : pickedProps.helperText;
  }
  var handleChange = function handleChange(e) {
    if (props.onChange) props.onChange(e);
    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onChange(clonedEvent);
      props.field.onBlur(clonedEvent);
    }
  };
  var control = /*#__PURE__*/_react.default.createElement(_Switch.default, (0, _extends2.default)({
    disableRipple: true,
    "data-hrl-bo": "".concat(dataHrlBo, "-control")
  }, pickedProps, {
    id: defaultID,
    onChange: handleChange,
    inputProps: {
      'data-hrl-bo': "".concat(dataHrlBo, "-input"),
      'aria-describedby': fieldError || fieldHelperText ? "message_".concat(defaultID) : null
    }
  }));
  return label ? /*#__PURE__*/_react.default.createElement(_FormControl.default, {
    component: "fieldset"
  }, /*#__PURE__*/_react.default.createElement(_FormControlLabel.default, {
    value: value,
    control: control,
    "data-hrl-bo": "".concat(dataHrlBo, "-label"),
    label: label,
    labelPlacement: labelPlacement
  }), fieldHelperText && !fieldError ? /*#__PURE__*/_react.default.createElement(_FormHelperText.default, {
    id: "message_".concat(defaultID)
  }, fieldHelperText) : null, fieldError ? /*#__PURE__*/_react.default.createElement(_FormHelperText.default, {
    error: true,
    id: "message_".concat(defaultID)
  }, fieldHelperText) : null) : control;
}
Switch.displayName = 'Switch';
Switch.propTypes = {
  /**
   * Testing property
   */
  'data-hrl-bo': _propTypes.default.string,
  /**
   * If true, the component is checked
   */
  checked: _propTypes.default.bool,
  /**
   * If true, the switch will be disabled
   */
  disabled: _propTypes.default.bool,
  /**
   * The id of the input element
   */
  id: _propTypes.default.string,
  /**
   * Attributes applied to the input element
   */
  inputProps: _propTypes.default.object,
  /**
   * This prop can be used to pass a ref to the input element
   */
  inputRef: _propTypes.default.func,
  /**
   * Callback fired when the state is changed
   */
  onChange: _propTypes.default.func,
  /**
   * If true, the input element will be required
   */
  required: _propTypes.default.bool,
  /**
   * The size of the switch. small is equivalent to the dense switch styling
   */
  size: _propTypes.default.oneOf(['small', 'medium']),
  /**
   * The input component prop type
   */
  type: _propTypes.default.string,
  /**
   * The value of the component. The DOM API casts this to a string
   */
  value: _propTypes.default.any,
  /**
   * Set switch label
   */
  label: _propTypes.default.string,
  /**
   * Switch label placement
   */
  labelPlacement: _propTypes.default.oneOf(['start', 'end'])
};
Switch.defaultProps = {
  size: 'medium',
  'data-hrl-bo': 'Switch',
  labelPlacement: 'end'
};
var _default = Switch;
exports.default = _default;