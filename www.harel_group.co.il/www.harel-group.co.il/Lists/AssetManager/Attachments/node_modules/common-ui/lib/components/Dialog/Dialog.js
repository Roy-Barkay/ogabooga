"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));
var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));
var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));
var _core = require("@material-ui/core");
var _DialogTitle = _interopRequireDefault(require("./DialogTitle"));
var _Dialog2 = _interopRequireDefault(require("./Dialog.style"));
var _utils = require("../../utils");
var _clsx2 = _interopRequireDefault(require("clsx"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Dialog(props) {
  var _clsx;
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var onEnter = ['onEnter', 'onEntered', 'onEntering'];
  var onExit = ['onExit', 'onExited', 'onExiting'];
  var pickedProps = (0, _utils.pick)(['open', 'onClose', 'fullWidth', 'fullScreen', 'maxWidth'].concat(onEnter, onExit), props);
  var forceUserToChoose = props.forceUserToChoose,
    title = props.title,
    roleWrapperButton = props.roleWrapperButton,
    ariaLabelWrapperButton = props.ariaLabelWrapperButton,
    primaryAction = props.primaryAction,
    secondaryAction = props.secondaryAction,
    showCloseButton = props.showCloseButton,
    isCustom = props.isCustom,
    onClose = props.onClose,
    children = props.children;
  var classes = (0, _Dialog2.default)();
  var hrlBo = props['data-hrl-bo'] ? props['data-hrl-bo'] : 'dialog';
  if (forceUserToChoose) {
    pickedProps.disableBackdropClick = true;
    pickedProps.disableEscapeKeyDown = true;
  }
  return /*#__PURE__*/_react.default.createElement(_Dialog.default, (0, _extends2.default)({}, pickedProps, {
    "data-hrl-bo": hrlBo,
    className: (0, _clsx2.default)(classes.root, props.className)
  }), /*#__PURE__*/_react.default.createElement(_DialogTitle.default, {
    showClose: showCloseButton,
    onClose: onClose,
    "data-hrl-bo": "".concat(hrlBo, "_title"),
    autoFocusOnCloseButton: props.autoFocusOnCloseButton
  }, title), /*#__PURE__*/_react.default.createElement(_DialogContent.default, {
    className: (0, _clsx2.default)((_clsx = {}, (0, _defineProperty2.default)(_clsx, classes.clean, isCustom), (0, _defineProperty2.default)(_clsx, classes.content, props.isMinWidth), _clsx)),
    "data-hrl-bo": "".concat(hrlBo, "_content")
  }, children), (secondaryAction || primaryAction) && /*#__PURE__*/_react.default.createElement(_DialogActions.default, {
    "data-hrl-bo": "".concat(hrlBo, "_action"),
    role: roleWrapperButton,
    "aria-label": ariaLabelWrapperButton
  }, secondaryAction, primaryAction));
}
Dialog.Text = _core.DialogContentText;
Dialog.propTypes = {
  /** Is open flag */
  open: _propTypes.default.bool.isRequired,
  /** The role attribute for DialogActions the div that wrapped the button - (secondaryAction/primaryAction).*/
  roleWrapperButton: _propTypes.default.string,
  /** The aria-label attribute for DialogActions the div that wrapped the button - (secondaryAction/primaryAction).*/
  ariaLabelWrapperButton: _propTypes.default.string,
  /** On close event handler */
  onClose: _propTypes.default.func,
  /** Force the user to take an action, disabled background click and ESC */
  forceUserToChoose: _propTypes.default.bool,
  /** Dialog title */
  title: _propTypes.default.string,
  /** Primary action element */
  primaryAction: _propTypes.default.element,
  /** Secondary action element */
  secondaryAction: _propTypes.default.element,
  /**
   * Show close button
   */
  showCloseButton: _propTypes.default.bool,
  /**
   * If true content get 310px size;*/
  isMinWidth: _propTypes.default.bool,
  /**
   * Is dialog custom flag. disable any spacing and gives full width and height control
   */
  isCustom: _propTypes.default.bool,
  /**
   * If true, the dialog will be full-screen
   */
  fullScreen: _propTypes.default.bool,
  /**
   * If true, the dialog stretches to maxWidth.
   * Notice that the dialog width grow is limited by the default margin.
   */
  fullWidth: _propTypes.default.bool,
  /**
   * If true, the dialog stretches to maxWidth.
   * Notice that the dialog width grow is limited by the default margin.
   */
  maxWidth: _propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]),
  /**
   * Override or extend the styles applied to the component.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  /** The content of the component*/
  children: _propTypes.default.node,
  /** Data hrl bo attribute for automation testing. */
  'data-hrl-bo': _propTypes.default.string,
  /** set autofocus status on close button. */
  autoFocusOnCloseButton: _propTypes.default.bool
};
Dialog.defaultProps = {
  showCloseButton: true,
  isCustom: false,
  maxWidth: 'xl',
  fullScreen: false,
  fullWidth: false,
  isMinWidth: true,
  autoFocusOnCloseButton: true
};
var _default = Dialog;
exports.default = _default;