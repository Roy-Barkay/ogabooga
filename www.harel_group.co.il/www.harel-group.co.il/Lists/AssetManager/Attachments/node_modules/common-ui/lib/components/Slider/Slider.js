"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _Slider = _interopRequireDefault(require("@material-ui/core/Slider"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("../../utils");
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Slider(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var pickedProps = (0, _utils.pick)(['aria-label', 'aria-labelledby', 'aria-valuetext', 'classes', 'component', 'defaultValue', 'disabled', 'getAriaValueText', 'marks', 'max', 'min', 'name', 'onChange', 'onChangeCommitted', 'orientation', 'step', 'ThumbComponent', 'value', 'ValueLabelComponent', 'valueLabelDisplay', 'valueLabelFormat'], props);
  var handleChange = function handleChange(e, v) {
    if (props.onChange) props.onChange(e, v);
    /* eslint-disable react/prop-types */
    if (props.form) {
      props.form.setFieldValue(props.field.name, v);
    }
    /* eslint-enable react/prop-types */
  };

  var defaultValue = props.defaultValue || null;
  /* eslint-disable react/prop-types */
  if (props.form && defaultValue === null) defaultValue = props.field.value;
  /* eslint-enable react/prop-types */

  return /*#__PURE__*/_react.default.createElement(_Slider.default, (0, _extends2.default)({}, pickedProps, {
    onChange: handleChange,
    defaultValue: defaultValue
  }));
}
Slider.propTypes = {
  /** The label of the slider. */
  'aria-label': _propTypes.default.string,
  /** The id of the element containing a label for the slider. */
  'aria-labelledby': _propTypes.default.string,
  /** A string value that provides a user-friendly name for the current value of the slider. */
  'aria-valuetext': _propTypes.default.string,
  /**    Override or extend the styles applied to the component */
  classes: _propTypes.default.object,
  /** The component used for the root node. Either a string to use a DOM element or a component */
  component: _propTypes.default.elementType,
  /** The default element value. Use when the component is not controlled */

  defaultValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.array]),
  /** If true, the slider will be disabled */
  disabled: _propTypes.default.bool,
  /**    Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider */

  getAriaValueText: _propTypes.default.func,
  /** Marks indicate predetermined values to which the user can move the slider. If true the marks will be spaced according the value of the step prop. If an array, it should contain objects with value and an optional labe */

  marks: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.array]),
  /** The maximum allowed value of the slider. Should not be equal to min */
  max: _propTypes.default.number,
  /** The minimum allowed value of the slider. Should not be equal to max */

  min: _propTypes.default.number,
  /** Name attribute of the hidden input element */

  name: _propTypes.default.string,
  /** Callback function that is fired when the slider's value changed  onChange(event, value)*/
  onChange: _propTypes.default.func,
  /**    Callback function that is fired when the mouseup is triggered */
  onChangeCommitted: _propTypes.default.func,
  /** The slider orientation */
  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),
  /** The granularity with which the slider can step through values. (A "discrete" slider.) When step is null, the thumb can only be slid onto marks provided with the marks prop */
  step: _propTypes.default.number,
  /** The component used to display the value label */
  ThumbComponent: _propTypes.default.elementType,
  /** The value of the slider. For ranged sliders, provide an array with two values */
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.array]),
  /** The value label component */
  ValueLabelComponent: _propTypes.default.elementType,
  /** Controls when the value label is displayed: - auto the value label will display when the thumb is hovered or focused. - on will display persistently. - off will never display */
  valueLabelDisplay: _propTypes.default.oneOf(['on', 'auto', 'off']),
  /** The format function the value label's value. When a function is provided, it should have the following signature: - {number} value The value label's value to format - {number} index The value label's index to format */
  valueLabelFormat: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func])
};
Slider.defaultProps = {
  component: 'span',
  disabled: false,
  marks: [],
  max: 100,
  min: 0,
  orientation: 'horizontal',
  step: 1,
  ThumbComponent: 'span',
  valueLabelDisplay: 'off'
};
var _default = Slider;
exports.default = _default;