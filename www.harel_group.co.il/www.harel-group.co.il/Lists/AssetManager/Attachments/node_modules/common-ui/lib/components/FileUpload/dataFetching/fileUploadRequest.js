"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileUploadHttpRequest = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _axios = _interopRequireDefault(require("axios"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// import {addMock, enableMocking} from './mock-axios';
// import json from './response.js';
var fileUploadHttpRequest = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(mocking, url, data, cb, rawFile, dontUseAccessToken, customHeaders) {
    var accessToken, headers, config;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            accessToken = new URLSearchParams(window.location.search).get('access_token');
            url = dontUseAccessToken ? url : "".concat(url, "?access_token=").concat(accessToken);

            // [DIG-15498]
            // TODO: Find way to compile production build without mock data
            // enableMocking(mocking);
            // if (mocking) {
            //     addMock(url, {data: json});
            // }
            _context.prev = 2;
            headers = {
              'Content-Type': 'multipart/form-data'
            };
            config = {
              headers: _objectSpread(_objectSpread({}, headers), customHeaders),
              onUploadProgress: function onUploadProgress(progressEvent) {
                return cb(rawFile, Math.round(progressEvent.loaded * 100 / progressEvent.total));
              }
            };
            _context.next = 7;
            return _axios.default.post(url, data, config);
          case 7:
            return _context.abrupt("return", _context.sent);
          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](2);
            return _context.abrupt("return", _context.t0);
          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 10]]);
  }));
  return function fileUploadHttpRequest(_x, _x2, _x3, _x4, _x5, _x6, _x7) {
    return _ref.apply(this, arguments);
  };
}();
exports.fileUploadHttpRequest = fileUploadHttpRequest;