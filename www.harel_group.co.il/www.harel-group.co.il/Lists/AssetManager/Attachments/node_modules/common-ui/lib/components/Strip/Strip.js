"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _clsx3 = _interopRequireDefault(require("clsx"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Collapse = _interopRequireDefault(require("@material-ui/core/Collapse"));
var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));
var _SvgIcon = _interopRequireDefault(require("@material-ui/core/SvgIcon"));
var _Strip = _interopRequireDefault(require("./Strip.style"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function noop() {}
var Strip = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var header = props.header,
    collapse = props.collapse,
    expand = props.expand,
    onExpand = props.onExpand,
    children = props.children,
    customControl = props.customControl,
    onBeforeClose = props.onBeforeClose,
    onChange = props.onChange,
    isOnlyButtonOpen = props.isOnlyButtonOpen,
    stripStyle = props.stripStyle,
    headerStyle = props.headerStyle,
    contentStyle = props.contentStyle,
    ariaLabel = props.ariaLabel,
    collapseIconDescription = props.collapseIconDescription,
    showDefaultAccessabilty = props.showDefaultAccessabilty,
    showMoreAriaLabel = props.showMoreAriaLabel,
    showLessAriaLabel = props.showLessAriaLabel;
  var hrlBo = props['data-hrl-bo'] || 'strip';
  var _useState = (0, _react.useState)(expand),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    expanded = _useState2[0],
    setExpanded = _useState2[1];
  var classes = (0, _Strip.default)(props, expanded);
  function handleExpandClick(e) {
    // e.preventDefault();
    // console.log(e.currentTarget, e.target );
    // if(e.currentTarget === e.target) {
    if (expanded === false) {
      onExpand();
    } else {
      !!onBeforeClose && onBeforeClose();
    }
    onChange && onChange(!expanded);
    setExpanded(!expanded);
    // }
  }

  (0, _react.useEffect)(function () {
    setExpanded(expand);
  }, [expand]);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      changeExpanded: function changeExpanded(expand) {
        setExpanded(expand);
      }
    };
  });
  var IconCollapse = collapse ? /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    className: (0, _clsx3.default)(classes.iconCollapse, (0, _defineProperty2.default)({}, classes.iconCollapseOpen, !expanded)),
    disableRipple: true,
    onClick: handleExpandClick,
    "aria-expanded": expanded,
    "aria-label": ariaLabel !== '' ? ariaLabel : expanded ? showLessAriaLabel || 'הצג פחות' : showMoreAriaLabel || 'הצג יותר',
    "data-hrl-bo": (hrlBo ? hrlBo : 'strip') + '_collapseButton',
    collapseIconDescription: collapseIconDescription
  }, /*#__PURE__*/_react.default.createElement(_SvgIcon.default, {
    color: "action"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }))) : null;
  var Content = collapse ? /*#__PURE__*/_react.default.createElement(_Collapse.default, {
    in: expanded,
    timeout: "auto"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.content,
    style: contentStyle
  }, children)) : /*#__PURE__*/_react.default.createElement("div", {
    className: classes.content,
    style: contentStyle
  }, children);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.strip,
    "data-hrl-bo": hrlBo,
    style: stripStyle
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _clsx3.default)(classes.header, (0, _defineProperty2.default)({}, classes.withCollapse, collapse)),
    style: headerStyle
  }, /*#__PURE__*/_react.default.createElement("span", {
    role: showDefaultAccessabilty ? 'heading' : undefined,
    "aria-level": showDefaultAccessabilty ? '2' : undefined,
    "data-hrl-bo": hrlBo + '_title',
    onClick: !isOnlyButtonOpen ? handleExpandClick : null
  }, header), !isOnlyButtonOpen && /*#__PURE__*/_react.default.createElement("div", {
    className: classes.clickableHeader,
    onClick: handleExpandClick
  }), IconCollapse, customControl && /*#__PURE__*/_react.default.createElement("span", {
    className: classes.actions
  }, customControl)), Content);
});
Strip.propTypes = {
  /**
   * if true, show collapse icon
   */
  collapse: _propTypes.default.bool,
  /**
   * strip header
   */
  header: _propTypes.default.node,
  /**
   * If false, strip will start as closed strip.
   * Will only work when collapse is enabled
   */
  expand: _propTypes.default.bool,
  /**
   * Function to run before expanding the strip.
   * Will only work when collapse is enabled
   */
  onExpand: _propTypes.default.func,
  /**
   * Custom control to be attached to strip title.
   * if more than one control then send as array
   */
  customControl: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.array]),
  /**
   * Function to run  expanding the strip.
   * Return true/false expand the strip.
   */
  onChange: _propTypes.default.func,
  /**
   * Choose side arrow
   */
  arrowPosition: _propTypes.default.oneOf(['left', 'right']),
  /**
   * All strip is clickable
   */
  isOnlyButtonOpen: _propTypes.default.bool,
  /**
   * Option to add custom Style to strip
   */
  stripStyle: _propTypes.default.object,
  /**
   * Option to add custom Style to strip header
   */
  headerStyle: _propTypes.default.object,
  /**
   * Option to add custom Style to strip content
   */
  contentStyle: _propTypes.default.object,
  /**
   * Call to on before close callback
   */
  onBeforeClose: _propTypes.default.func,
  ariaLabel: _propTypes.default.string,
  collapseIconDescription: _propTypes.default.any,
  /** The content of the component*/
  children: _propTypes.default.node,
  'data-hrl-bo': _propTypes.default.string,
  showDefaultAccessabilty: _propTypes.default.bool,
  showMoreAriaLabel: _propTypes.default.string,
  showLessAriaLabel: _propTypes.default.string
};
Strip.defaultProps = {
  collapse: false,
  expand: true,
  onExpand: noop,
  onChange: noop,
  arrowPosition: 'left',
  isOnlyButtonOpen: true,
  stripStyle: null,
  headerStyle: null,
  contentStyle: null,
  ariaLabel: '',
  showDefaultAccessabilty: true,
  showMoreAriaLabel: '',
  showLessAriaLabel: ''
};
var _default = Strip;
exports.default = _default;