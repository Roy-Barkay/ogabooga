"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _materialTable = _interopRequireWildcard(require("material-table"));
var _TableProps = _interopRequireDefault(require("./Table.props.override"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Table = function Table(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var extendedProps = Object.assign((0, _TableProps.default)(props), props);
  extendedProps.components = {
    Cell: function Cell(props) {
      var extendedProps = Object.assign({
        style: {
          textAlign: 'right'
        }
      }, props);
      return /*#__PURE__*/_react.default.createElement(_materialTable.MTableCell, extendedProps);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_materialTable.default, extendedProps);
};
Table.propTypes = {
  /** Table Title (only render if toolbar option is true) */
  title: _propTypes.default.string,
  /** Flag for loading animation */
  isLoading: _propTypes.default.bool,
  /** Column definitions */
  columns: _propTypes.default.array,
  /** Data must be array of objects which has fields defined in columns */
  data: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.array]),
  /** Flag for search feature */
  allowSearch: _propTypes.default.bool,
  /** Flag for sorting feature */
  allowSorting: _propTypes.default.bool,
  /** Flag for filtering feature */
  allowFiltering: _propTypes.default.bool,
  /** Flag for grouping feature */
  allowGrouping: _propTypes.default.bool,
  /** Flag for paging feature */
  allowPaging: _propTypes.default.bool,
  /** Flag for export feature */
  allowExport: _propTypes.default.bool,
  /** Flag for export all data instead of rendered data */
  exportAllData: _propTypes.default.bool,
  /** Flag for selection feature */
  allowSelection: _propTypes.default.bool,
  /** Flag for toolbar */
  showToolbar: _propTypes.default.bool,
  /** Flag for title */
  showTitle: _propTypes.default.bool,
  /** Flag for showing the columns filter table */
  showColumnFilterButton: _propTypes.default.bool,
  /** Flag for header visibility */
  showHeader: _propTypes.default.bool,
  /** Flag for showing select all checkbox */
  showSelectAllCheckbox: _propTypes.default.bool,
  /** Flag for rendering empty rows to complete page size */
  renderEmptyFillSpace: _propTypes.default.bool,
  /** Page size options that could be selected by user */
  pageSizeOptions: _propTypes.default.array,
  /** data-hrl-bo attribute value */
  hrlbo: _propTypes.default.string
};
Table.defaultProps = {
  isLoading: false,
  columns: [],
  data: [],
  showToolbar: true,
  showTitle: true,
  showHeader: true,
  showSelectAllCheckbox: false,
  allowSelection: false,
  allowPaging: true,
  allowSearch: false,
  allowSorting: true,
  allowFiltering: false,
  allowGrouping: false,
  allowExport: false,
  exportAllData: true,
  showColumnFilterButton: false,
  renderEmptyFillSpace: false,
  pageSizeOptions: [5, 10, 20]
};
var _default = Table;
exports.default = _default;