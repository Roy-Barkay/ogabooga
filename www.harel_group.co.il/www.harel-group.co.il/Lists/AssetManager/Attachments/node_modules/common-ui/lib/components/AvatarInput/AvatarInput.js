"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _index = require("../../index");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _AvatarInput = _interopRequireDefault(require("./AvatarInput.style"));
var _commonIcons = require("common-icons");
var _clsx = _interopRequireDefault(require("clsx"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var AvatarInput = function AvatarInput(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var classes = (0, _AvatarInput.default)(props);
  var inputProps = {
    disabled: !!props.disabled,
    id: props.id || "Avatar_Checkbox_".concat(Date.now()),
    name: props.name || "Avatar_Checkbox_".concat(Date.now()),
    className: classes.checkbox,
    onChange: props.onChange,
    value: props.value
  };
  if (props.checked !== undefined) {
    inputProps.checked = props.checked;
  }
  if (props.onChange !== undefined) {
    inputProps.onChange = props.onChange;
  }
  var IconComponent = props.icon;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _clsx.default)('MuiAvatarInput-root', classes.root),
    role: "checkbox"
  }, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({
    type: "checkbox"
  }, inputProps)), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _clsx.default)('MuiAvatarInput-container', classes.container)
  }, /*#__PURE__*/_react.default.createElement(IconComponent, {
    fontSize: "large",
    color: "secondary",
    style: {
      width: props.iconSize,
      height: props.iconSize
    }
  }), /*#__PURE__*/_react.default.createElement(_index.Typography, {
    variant: "h6",
    color: "textPrimary",
    style: {
      lineHeight: 1.1
    }
  }, props.label)), /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _clsx.default)('MuiAvatarInput-badge', classes.badge)
  }, /*#__PURE__*/_react.default.createElement(_commonIcons.IconCheck, null)));
};
AvatarInput.propTypes = {
  /** Callback fired when the state is changed. */
  onChange: _propTypes.default.func,
  /** If true, the component is checked. */
  checked: _propTypes.default.bool,
  /** If true, the switch will be disabled. */
  disabled: _propTypes.default.bool,
  /** The value of the component. The DOM API casts this to a string. */
  value: _propTypes.default.any,
  /** The id of the input element. */
  id: _propTypes.default.string,
  /** The icon to display */
  icon: _propTypes.default.any.isRequired,
  /** The size of the Icon */
  iconSize: _propTypes.default.number,
  /** If true, the component will be in error state. */
  error: _propTypes.default.bool,
  /** The label for the component */
  label: _propTypes.default.string.isRequired,
  /** The name for the component Event */
  name: _propTypes.default.string.isRequired
};
AvatarInput.defaultProps = {
  label: 'כותרת ריקה',
  disabled: false,
  icon: _commonIcons.IconQuestion,
  iconSize: 50,
  error: false,
  name: 'Avatar'
};
var _default = AvatarInput;
exports.default = _default;