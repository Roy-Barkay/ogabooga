"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _Checkbox = _interopRequireDefault(require("@material-ui/core/Checkbox"));
var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _core = require("@material-ui/core");
var _FormHelperText = _interopRequireDefault(require("@material-ui/core/FormHelperText"));
var _formik = require("formik");
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
var _Checkbox2 = _interopRequireDefault(require("./Checkbox.style"));
var _excluded = ["FormControlLabelProps", "standaloneLabel"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function Checkbox(props) {
  var _objectSpread2;
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var _useState = (0, _react.useState)(props.value),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    checked = _useState2[0],
    setChecked = _useState2[1];
  var _useState3 = (0, _react.useState)(props.checked),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isChecked = _useState4[0],
    setIsChecked = _useState4[1];
  var FormControlLabelProps = props.FormControlLabelProps,
    standaloneLabel = props.standaloneLabel,
    checkBoxProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var classes = (0, _Checkbox2.default)();
  _react.default.useEffect(function () {
    if (props.value !== checked) {
      setChecked(props.value);
    }
    if (props.checked !== isChecked) {
      setIsChecked(props.checked);
    }
  }, [props.value, props.checked]);
  var dataHrlBo = props.id ? props.id : props['data-hrl-bo'];
  var inputProps = _objectSpread((_objectSpread2 = {}, (0, _defineProperty2.default)(_objectSpread2, 'data-hrl-bo', 'checkbox-' + dataHrlBo), (0, _defineProperty2.default)(_objectSpread2, 'aria-labelledby', "".concat(dataHrlBo, "-checkbox")), (0, _defineProperty2.default)(_objectSpread2, 'aria-label', props['aria-label']), (0, _defineProperty2.default)(_objectSpread2, 'aria-describedby', props['aria-describedby'] || "".concat(dataHrlBo, "-errorText")), (0, _defineProperty2.default)(_objectSpread2, 'aria-required', props.required), _objectSpread2), props.inputProps);
  var labelProps = _objectSpread((0, _defineProperty2.default)({
    id: "".concat(dataHrlBo, "-checkbox")
  }, 'data-hrl-bo', 'checkbox-label-' + dataHrlBo), FormControlLabelProps);
  var label = props.label;
  var fieldErrorText = '';
  if (props.form) {
    var fieldName = props.field.name;
    var touched = (0, _formik.getIn)(props.form.touched, fieldName);
    var fieldError = (0, _formik.getIn)(props.form.errors, fieldName);
    var hasError = touched && fieldError ? true : false;
    fieldErrorText = hasError ? fieldError : '';
  }
  var handleChange = function handleChange(e) {
    setIsChecked(!isChecked);
    if (props.onChange) props.onChange(e);
    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onChange(clonedEvent);
    }
  };
  var handleBlur = function handleBlur(e) {
    if (props.onBlur) props.onBlur(e);
    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onBlur(clonedEvent);
    }
  };
  var cb = /*#__PURE__*/_react.default.createElement(_Checkbox.default, (0, _extends2.default)({
    disableRipple: true
  }, checkBoxProps, {
    inputProps: inputProps,
    onChange: handleChange,
    onBlur: handleBlur,
    checked: isChecked
  }));
  if (standaloneLabel && (label !== null && label !== void 0 && label.length || typeof label === 'function')) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes.standaloneRoot
    }, cb, "arial-invalid=", props.required && !isChecked, /*#__PURE__*/_react.default.createElement(_core.FormLabel, (0, _extends2.default)({
      component: "span",
      required: props.required && !props.hideRequiredAsterisk
    }, labelProps), typeof label === 'function' ? label() : label), /*#__PURE__*/_react.default.createElement(_FormHelperText.default, null, /*#__PURE__*/_react.default.createElement("span", {
      id: "".concat(dataHrlBo, "-errorText")
    }, fieldErrorText)));
  }
  if (label !== null && label !== void 0 && label.length || typeof label === 'function') {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_FormControlLabel.default, (0, _extends2.default)({
      checked: checked,
      control: cb,
      "aria-invalid": !!(props.required && !isChecked),
      label: /*#__PURE__*/_react.default.createElement(_core.FormLabel, {
        component: "span",
        required: props.required && !props.hideRequiredAsterisk
      }, typeof label === 'function' ? label() : label),
      labelPlacement: "end",
      className: classes.root
    }, labelProps)), /*#__PURE__*/_react.default.createElement(_FormHelperText.default, {
      error: fieldErrorText && 'error'
    }, /*#__PURE__*/_react.default.createElement("span", {
      id: "".concat(dataHrlBo, "-errorText")
    }, fieldErrorText)));
  } else {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, cb, /*#__PURE__*/_react.default.createElement(_FormHelperText.default, null, /*#__PURE__*/_react.default.createElement("span", {
      id: "".concat(dataHrlBo, "-errorText")
    }, fieldErrorText)));
  }
}
Checkbox.displayName = 'Checkbox';
Checkbox.propTypes = {
  /** Is checkbox checked */
  checked: _propTypes.default.bool,
  /** Display color */
  color: _propTypes.default.oneOf(['primary', 'secondary']),
  /** Is interaction disabled */
  disabled: _propTypes.default.bool,
  /** Unique element id */
  id: _propTypes.default.string.isRequired,
  /** On change event callback */
  onChange: _propTypes.default.func,
  /** Default selected value */
  value: _propTypes.default.any,
  /** classes to override **/
  classes: _propTypes.default.object,
  /** Props applied to FormControlLabel component **/
  FormControlLabelProps: _propTypes.default.object,
  /** Props applied to input **/
  inputProps: _propTypes.default.object,
  standaloneLabel: _propTypes.default.bool,
  /** The aria-label of the label. */
  'aria-label': _propTypes.default.string,
  /** */
  'data-hrl-bo': _propTypes.default.string,
  /** If true, the label will not display the asterisk.  */
  hideRequiredAsterisk: _propTypes.default.bool
};
Checkbox.defaultProps = {
  standaloneLabel: false,
  'data-hrl-bo': "checkbox-".concat(Math.floor(Math.random() * 10000)),
  'aria-label': '',
  hideRequiredAsterisk: false
};
var _default = Checkbox;
exports.default = _default;