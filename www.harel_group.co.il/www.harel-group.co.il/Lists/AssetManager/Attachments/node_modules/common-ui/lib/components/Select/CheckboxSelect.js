"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Select = _interopRequireDefault(require("@material-ui/core/Select"));
var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));
var _InputLabel = _interopRequireDefault(require("@material-ui/core/InputLabel"));
var _Option = _interopRequireDefault(require("./Option"));
var _core = require("@material-ui/core");
var _index = require("../../index");
var _commonIcons = require("common-icons");
var _CheckboxSelect = _interopRequireDefault(require("./CheckboxSelect.style"));
var _reactDom = require("react-dom");
var _GroupLine = _interopRequireDefault(require("./GroupLine"));
require("./scrollBar.css");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function CheckboxSelect(props) {
  var classes = (0, _CheckboxSelect.default)(props);
  var values = props.value;
  var options = props.children;
  var componentRef = (0, _react.useRef)(null);
  var getLabel = function getLabel(values) {
    if (props.orderLabel) {
      var g = [];
      options.forEach(function (option) {
        g.push(option.props.value);
      });
      values.sort(function (a, b) {
        return g.indexOf(a) - g.indexOf(b);
      });
    }
    return values.map(function (value) {
      var res = '';
      options.forEach(function (option) {
        if (option.props.value === value) {
          res = option.props.children;
        }
      });
      return res;
    });
  };
  var getShortId = function getShortId() {
    return Math.random().toString(36).substr(2, 6);
  };
  var hrlBo = props['data-hrl-bo'] ? props['data-hrl-bo'] : props.id;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    anchorEl = _useState2[0],
    setAnchorEl = _useState2[1];
  var SelectDisplayProps = Object.assign({}, {
    'aria-labelledby': "label-".concat(props.id, " ").concat(props.id)
  }, props.fieldHelperText && {
    'aria-describedby': "".concat(hrlBo, "-helper-text")
  });
  var onSelectClick = function onSelectClick(e) {
    if (props.onClose) props.onClose();
  };
  var selectButtonElement = function selectButtonElement() {
    var _props$value;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes.selectButtonWrapper
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: classes.separatorWrapper
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: classes.separatorLine
    })), /*#__PURE__*/_react.default.createElement(_index.Button, {
      className: classes.selectButton,
      disabled: props.required && !(props !== null && props !== void 0 && (_props$value = props.value) !== null && _props$value !== void 0 && _props$value.length),
      onClick: function onClick(e) {
        return onSelectClick(e);
      }
    }, props.selectButtonLabel));
  };

  // fix role attribute to 'combobox' for accessibility mode
  _react.default.useEffect(function () {
    if (componentRef.current) {
      var allSelectComponents = componentRef.current.querySelectorAll('div.MuiSelect-select[role="button"]');
      allSelectComponents.forEach(function (v) {
        return v.setAttribute('role', 'combobox');
      });
    }
  }, []);
  var isMultiLineLabelStyle = {
    position: 'static',
    textOverflow: 'unset',
    whiteSpace: 'unset',
    height: 'auto',
    transform: 'translate(10px, 10px)',
    width: '100%',
    padding: '0 16px 0 0',
    fontWeight: '500'
  };
  var isMultiLineLabel = props.multilinelabel ? isMultiLineLabelStyle : null;
  var MultiLineLabelMainDiv = {
    backgroundColor: '#e2ecf9',
    borderRadius: '4px 4px 0 0'
  };
  var multiLineLabelMainStyleChange = props.multilinelabel ? MultiLineLabelMainDiv : null;
  return /*#__PURE__*/_react.default.createElement(_FormControl.default, {
    disabled: props.disabled,
    name: props.name,
    className: "MuiFormControl-CheckboxSelect",
    "data-hrl-bo": "multi-select-bo-".concat(hrlBo),
    style: multiLineLabelMainStyleChange,
    error: !!props.fieldError
  }, props.label ? /*#__PURE__*/_react.default.createElement(_InputLabel.default, {
    htmlFor: props.id,
    id: "label-".concat(props.id),
    "data-multilabel": props.multilinelabel ? 'multilinelabel' : null,
    style: props.multilinelabel ? isMultiLineLabel : null,
    required: props.required && !props.hideRequiredAsterisk
  }, props.label) : null, /*#__PURE__*/_react.default.createElement(_Select.default, (0, _extends2.default)({}, props, {
    SelectDisplayProps: SelectDisplayProps,
    MenuProps: {
      getContentAnchorEl: null,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'right'
      },
      MenuListProps: {
        'data-hrl-bo': "MenuProps-".concat(hrlBo),
        className: 'customScrollBar',
        style: {
          maxHeight: props.maxheight ? props.maxheight : 'auto',
          overflowY: 'auto'
        }
      },
      ref: function ref(e) {
        if (e) {
          var modal = e.querySelectorAll('div[class*="MuiPaper-root"]');
          if (modal[0]) {
            var isButton = modal[0].querySelectorAll('button[class*="MuiButtonBase-root"]');
            if (isButton[0]) {
              isButton[0].setAttribute('data-hrl-bo', "MenuProps-button-".concat(hrlBo));
            }
            setAnchorEl(modal[0]);
          }
        } else {
          setAnchorEl(null);
        }
      }
    },
    input: /*#__PURE__*/_react.default.createElement(_core.Input, null),
    IconComponent: _commonIcons.IconArrowDown,
    ref: componentRef,
    renderValue: function renderValue(selected) {
      return selected.length ? getLabel(selected).join(', ') : false;
    },
    displayEmpty: false
  }), options && options.map(function (element, index) {
    if (element.type.name === 'GroupLine') {
      return element;
    }
    return /*#__PURE__*/_react.default.createElement(_core.MenuItem, {
      classes: {
        root: classes.menuItem
      },
      key: 'checkbox-select-' + index,
      value: element.props.value,
      "data-hrl-bo": "".concat(hrlBo)
    }, /*#__PURE__*/_react.default.createElement(_index.Checkbox, {
      id: 'checkbox-select-' + index + getShortId(),
      checked: values.indexOf(element.props.value) > -1
    }), /*#__PURE__*/_react.default.createElement(_index.ListItemText, {
      primary: element.props.children
    }));
  })), props.showSelectButton && anchorEl && /*#__PURE__*/(0, _reactDom.createPortal)(selectButtonElement(), anchorEl), props.fieldHelperText ? /*#__PURE__*/_react.default.createElement(_core.FormHelperText, {
    "data-hrl-bo": "".concat(hrlBo, "-helper-text"),
    id: "".concat(hrlBo, "-helper-text"),
    error: props.fieldError
  }, props.fieldHelperText) : null);
}
CheckboxSelect.Option = _Option.default;
CheckboxSelect.displayName = 'CheckboxSelect';
CheckboxSelect.propTypes = {
  /** If true, a value is displayed even if no items are selected. In order to display a meaningful value, a function should be passed to the renderValue prop which returns the value to be displayed when no items are selected. You can only use it when the native prop is false (default). */
  displayEmpty: _propTypes.default.bool,
  /** If true, value must be an array and the menu will support multiple selections. */
  multiple: _propTypes.default.bool,
  /** Render the selected value */
  renderValue: _propTypes.default.func,
  /** Callback function fired when a menu item is selected. */
  onChange: _propTypes.default.func,
  /** Callback fired when the component requests to be closed */
  onClose: _propTypes.default.func,
  /** Callback fired when the component requests to be opened */
  onOpen: _propTypes.default.func,
  /** Control select open state */
  open: _propTypes.default.bool,
  /** The input value */
  value: _propTypes.default.any,
  /** Label to display */
  label: _propTypes.default.string,
  /** Is required */
  required: _propTypes.default.bool,
  /** Is Disabled */
  disabled: _propTypes.default.bool,
  /** The id of the input element. Use this prop to make label and helperText accessible for screen readers. */
  id: _propTypes.default.string.isRequired,
  /** If true, show the select button. */
  showSelectButton: _propTypes.default.bool,
  /** select button label text. */
  selectButtonLabel: _propTypes.default.string,
  /** Name attribute of the element. */
  name: _propTypes.default.string,
  fieldError: _propTypes.default.bool,
  /**    The helper text content. */
  fieldHelperText: _propTypes.default.node,
  /**
   *    The content of the component.
   */
  children: _propTypes.default.node,
  /**
   *
   */
  'data-hrl-bo': _propTypes.default.string,
  /** If true, the label will not display the asterisk.  */
  hideRequiredAsterisk: _propTypes.default.bool,
  /** show ordered selected values on multi status */
  orderLabel: _propTypes.default.bool,
  /** show label in multi line */
  multilinelabel: _propTypes.default.bool,
  /** Set max height for dropdown */
  maxheight: _propTypes.default.string
};
CheckboxSelect.defaultProps = {
  id: "select".concat(Math.floor(Math.random() * 10000)),
  multiple: false,
  disabled: false,
  required: false,
  'data-hrl-bo': 'select',
  open: false,
  showSelectButton: false,
  selectButtonLabel: 'בחר',
  hideRequiredAsterisk: false,
  orderLabel: false,
  multilinelabel: false,
  maxheight: 'auto'
};
var _default = CheckboxSelect;
exports.default = _default;