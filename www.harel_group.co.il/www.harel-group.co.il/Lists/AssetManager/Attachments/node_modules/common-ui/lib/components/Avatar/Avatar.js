"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _core = require("@material-ui/core");
var _utils = require("../../utils");
var _Avatar = _interopRequireDefault(require("@material-ui/core/Avatar"));
var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));
var _Badge = _interopRequireDefault(require("@material-ui/core/Badge"));
var _Male = _interopRequireDefault(require("./Images/Male.svg"));
var _Female = _interopRequireDefault(require("./Images/Female.svg"));
var _Generic = _interopRequireDefault(require("./Images/Generic.svg"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
var _commonIcons = require("common-icons");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var useStyles = (0, _core.makeStyles)(function (theme) {
  return {
    root: {
      cursor: function cursor(props) {
        return props.isClickable ? 'pointer' : 'auto';
      },
      display: 'flex',
      alignItems: 'center',
      flexDirection: 'column'
    },
    avatar: {
      background: '#fff',
      border: "1px solid ".concat(theme.palette.primary.main),
      color: theme.palette.primary.main
    }
  };
});
function Avatar(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var classes = useStyles(props);
  var avatarProps = (0, _utils.pick)(['alt', 'label', 'checked', 'size', 'gender', 'isClickable', 'component', 'onClick', 'role', 'ariaChecked', 'tabIndex', 'ariaLabel', 'ariaLabelledby', 'ariaRequired'], props);
  var hrlBo = props['data-hrl-bo'] ? props['data-hrl-bo'] : 'avatar';
  var StyledBadge = (0, _core.withStyles)(function (theme) {
    return {
      badge: {
        fontSize: props.badgeSize ? props.badgeSize : '10px',
        top: 5,
        right: 5,
        backgroundColor: '#319b38'
      }
    };
  })(_Badge.default);
  var genderImage;
  switch (avatarProps.gender) {
    default:
    case 'generic':
      genderImage = _Generic.default;
      break;
    case 'male':
      genderImage = _Male.default;
      break;
    case 'female':
      genderImage = _Female.default;
      break;
  }
  var renderAvatar;
  var avatarSize = {
    width: avatarProps.size,
    height: avatarProps.size
  };
  var setAriaLabelledby = avatarProps.label ? "".concat(hrlBo, "-id ").concat(avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.ariaLabelledby) : avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.ariaLabelledby;
  if (!avatarProps.component) {
    renderAvatar = function renderAvatar() {
      var _avatarProps$tabIndex;
      return /*#__PURE__*/_react.default.createElement(_Avatar.default, {
        onClick: avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.onClick,
        "aria-invalid": avatarProps.ariaInvalid,
        tabIndex: avatarProps.isClickable ? '0' : avatarProps === null || avatarProps === void 0 ? void 0 : (_avatarProps$tabIndex = avatarProps.tabIndex) === null || _avatarProps$tabIndex === void 0 ? void 0 : _avatarProps$tabIndex.toString(),
        role: avatarProps.role,
        alt: avatarProps.alt,
        style: avatarSize,
        src: genderImage,
        "data-hrl-bo": "".concat(hrlBo, "-icon"),
        "aria-checked": avatarProps.ariaChecked || avatarProps.checked,
        "aria-label": avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.ariaLabel,
        "aria-labelledby": setAriaLabelledby,
        "aria-required": !!(avatarProps.isClickable && avatarProps.ariaRequired)
      });
    };
  } else {
    renderAvatar = function renderAvatar() {
      var _avatarProps$tabIndex2;
      return /*#__PURE__*/_react.default.createElement(_Avatar.default, {
        onClick: avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.onClick,
        "aria-invalid": avatarProps.ariaInvalid,
        tabIndex: avatarProps.isClickable ? '0' : avatarProps === null || avatarProps === void 0 ? void 0 : (_avatarProps$tabIndex2 = avatarProps.tabIndex) === null || _avatarProps$tabIndex2 === void 0 ? void 0 : _avatarProps$tabIndex2.toString(),
        role: avatarProps.role,
        className: classes.avatar,
        alt: avatarProps.alt,
        "data-hrl-bo": "".concat(hrlBo, "-icon"),
        style: avatarSize,
        "aria-checked": (avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.ariaChecked) || avatarProps.checked,
        "aria-label": avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.ariaLabel,
        "aria-labelledby": setAriaLabelledby,
        "aria-required": !!(avatarProps.isClickable && avatarProps.ariaRequired)
      }, avatarProps.component);
    };
  }
  var renderCheckedAvatar = function renderCheckedAvatar() {
    return /*#__PURE__*/_react.default.createElement(StyledBadge, {
      badgeContent: /*#__PURE__*/_react.default.createElement(_commonIcons.IconCheck, null),
      color: "secondary"
    }, ' ', renderAvatar(), ' ');
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-hrl-bo": hrlBo,
    className: classes.root
  }, avatarProps.checked ? renderCheckedAvatar() : renderAvatar(), avatarProps.label ? /*#__PURE__*/_react.default.createElement(_Typography.default, {
    variant: "caption",
    id: "".concat(hrlBo, "-id"),
    "data-hrl-bo": "".concat(hrlBo, "-label")
  }, avatarProps.label) : '');
}
Avatar.propTypes = {
  /** Is avatar clickable */
  isClickable: _propTypes.default.bool,
  /** Add checked badge */
  checked: _propTypes.default.bool,
  /** Text to appear below the avatar circle */
  label: _propTypes.default.string,
  /** Alt text for accessibility */
  alt: _propTypes.default.string,
  /** role text for accessibility */
  role: _propTypes.default.string,
  /** Size in px of the avatar */
  size: _propTypes.default.number,
  /** Display internal gender icon */
  gender: _propTypes.default.oneOf(['male', 'female', 'generic', 'custom']),
  /** Accessibility indicator for error */
  ariaInvalid: _propTypes.default.bool,
  /** Accessibility indicator for checked */
  ariaChecked: _propTypes.default.oneOf([_propTypes.default.bool, null]),
  /** On click function */
  onClick: _propTypes.default.func,
  /** Custom component instead of the gender icons */
  component: _propTypes.default.any,
  /** Badge font size */
  badgeSize: _propTypes.default.string,
  /** set tabIndex (example tabIndex=0) */
  tabIndex: _propTypes.default.oneOf([_propTypes.default.number, _propTypes.default.string, null]),
  /** set data-hrl-bo for QA */
  'data-hrl-bo': _propTypes.default.string,
  /** set aria-label */
  ariaLabel: _propTypes.default.string,
  /** set aria-labelledby (pass id of external element) */
  ariaLabelledby: _propTypes.default.string,
  /** set aria-required  */
  ariaRequired: _propTypes.default.bool
};
Avatar.defaultProps = {
  isClickable: true,
  checked: false,
  label: 'Test',
  alt: '',
  size: 50,
  gender: 'generic',
  role: null,
  ariaChecked: null,
  tabIndex: null,
  ariaLabel: null,
  ariaLabelledby: null,
  ariaRequired: null
};
var _default = Avatar;
exports.default = _default;