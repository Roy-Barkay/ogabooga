"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _constants = require("../constants/constants");
var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));
var _DragAndDrop = _interopRequireDefault(require("./DragAndDrop.style"));
var _clsx = _interopRequireDefault(require("clsx"));
var _commonIcons = require("common-icons");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DragAndDrop = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(DragAndDrop, _Component);
  var _super = _createSuper(DragAndDrop);
  function DragAndDrop(props) {
    var _this;
    (0, _classCallCheck2.default)(this, DragAndDrop);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDrag", function (e) {
      e.preventDefault();
      e.stopPropagation();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDragIn", function (e) {
      e.preventDefault();
      e.stopPropagation();
      _this.dragCounter++;
      if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
        _this.setState({
          dragging: true
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDragOut", function (e) {
      e.preventDefault();
      e.stopPropagation();
      _this.dragCounter--;
      if (_this.dragCounter > 0) return;
      _this.setState({
        dragging: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDrop", function (e) {
      e.preventDefault();
      e.stopPropagation();
      _this.setState({
        dragging: false
      });
      if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
        _this.props.handleUpload(e.dataTransfer.files);
        e.dataTransfer.clearData();
        _this.dragCounter = 0;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFileSelect", function (evt) {
      var fileReaders = [];
      var loadCount = 0;
      evt.preventDefault();
      evt.stopPropagation();
      var files = evt.target.files;
      var dis = (0, _assertThisInitialized2.default)(_this);
      for (var i = 0; i < files.length; i++) {
        var file = files[i];
        function fileLoaded() {
          loadCount++;
          //Check if we've loaded all the files
          if (loadCount === files.length) {
            dis.uploadEnded(fileReaders, files);
          }
        }
        var fileReader = new FileReader();
        fileReader.onload = fileLoaded;
        fileReader.readAsText(file);
        fileReaders.push(fileReader);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "openFileInput", function () {
      var _assertThisInitialize, _assertThisInitialize2;
      (_assertThisInitialize = (0, _assertThisInitialized2.default)(_this)) === null || _assertThisInitialize === void 0 ? void 0 : (_assertThisInitialize2 = _assertThisInitialize.fileInputRef) === null || _assertThisInitialize2 === void 0 ? void 0 : _assertThisInitialize2.current.click();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnClick", function (e) {
      e.target.value = null;
      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }
      /* eslint-disable react/prop-types */
      if (_this.props.form) {
        _this.props.form.setFieldTouched(_this.props.field.name);
      }
      /* eslint-enable react/prop-types */
    });
    _this.dropRef = /*#__PURE__*/_react.default.createRef();
    _this.fileInputRef = /*#__PURE__*/_react.default.createRef();
    _this.state = {
      dragging: false
    };
    return _this;
  }
  (0, _createClass2.default)(DragAndDrop, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.dragCounter = 0;
      var dropZone = this.dropRef.current;
      dropZone.addEventListener('dragenter', this.handleDragIn);
      dropZone.addEventListener('dragleave', this.handleDragOut);
      dropZone.addEventListener('dragover', this.handleDrag);
      dropZone.addEventListener('drop', this.handleDrop);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var dropZone = this.dropRef.current;
      dropZone.removeEventListener('dragenter', this.handleDragIn);
      dropZone.removeEventListener('dragleave', this.handleDragOut);
      dropZone.removeEventListener('dragover', this.handleDrag);
      dropZone.removeEventListener('drop', this.handleDrop);
    }
  }, {
    key: "uploadEnded",
    value: function uploadEnded(fileReaders, files) {
      if (fileReaders && fileReaders.length > 0) {
        fileReaders.forEach(function (fileReaders, index) {
          files[index].isEncrypted = fileReaders.result.indexOf('/Encrypt') !== -1;
        });
        this.props.handleUpload(files);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var uploadZoneClass = "".concat(this.props.classes.uploadZone, " ").concat(this.state.dragging ? this.props.classes.uploadZoneDragging : '');
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(this.props.classes.dropZone, " ").concat(this.props.disabled ? 'disabled' : ''),
        id: "fileSelect",
        ref: this.dropRef,
        onClick: this.openFileInput
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _clsx.default)(uploadZoneClass),
        "data-hrl-bo": "file-upload-zone"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: this.props.classes.column
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: this.props.classes.zoneAvatar
      }, /*#__PURE__*/_react.default.createElement(_commonIcons.IconPlus, {
        fontSize: "large",
        className: this.props.classes.zoneAvatarSvg
      })), /*#__PURE__*/_react.default.createElement("span", {
        className: this.props.classes.zoneText
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: this.props.dragFilesHereStyle ? this.props.dragFilesHereStyle : {}
      }, this.props.dragFilesHereText ? this.props.dragFilesHereText : _constants.DRAG_FILES_HERE_TEXT), /*#__PURE__*/_react.default.createElement("a", {
        className: this.props.classes.uploadLink,
        role: "button",
        href: "javascript:void(0);",
        "data-hrl-bo": "file-upload-link"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: this.props.chooseFilesToUploadStyle ? this.props.chooseFilesToUploadStyle : {}
      }, this.props.chooseFilesToUploadText ? this.props.chooseFilesToUploadText : _constants.CHOSE_FILES_TO_UPLOAD_TEXT)))), /*#__PURE__*/_react.default.createElement("input", {
        disabled: !!this.props.disabled,
        type: "file",
        id: "fileInput",
        "aria-describedby": this.props.error && 'fileInput-error',
        className: this.props.classes.fileInput,
        name: "fileInput"
        // ref={Ref => {
        //     if (!Ref) {
        //         console.log('ref 1: ',Ref);
        //         this.fileInputRef = Ref;
        //     }
        // }}
        ,
        ref: this.fileInputRef,
        onClick: this.handleOnClick,
        onChange: this.handleFileSelect,
        multiple: this.props.multiple,
        "data-hrl-bo": "file-upload-input"
      })));
    }
  }]);
  return DragAndDrop;
}(_react.Component);
var _default = (0, _withStyles.default)(_DragAndDrop.default)(DragAndDrop);
exports.default = _default;
DragAndDrop.propTypes = {
  handleUpload: _propTypes.default.func.isRequired,
  error: _propTypes.default.string,
  dragFilesHereText: _propTypes.default.string,
  dragFilesHereStyle: _propTypes.default.object,
  chooseFilesToUploadText: _propTypes.default.string,
  chooseFilesToUploadStyle: _propTypes.default.object,
  multiple: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  classes: _propTypes.default.any,
  onBlur: _propTypes.default.func
};