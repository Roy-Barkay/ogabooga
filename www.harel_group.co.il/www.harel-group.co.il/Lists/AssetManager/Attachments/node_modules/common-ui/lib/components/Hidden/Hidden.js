"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Hidden = _interopRequireDefault(require("@material-ui/core/Hidden"));
var _utils = require("../../utils");
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Hidden(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var pickedProps = (0, _utils.pick)(['children', 'lgDown', 'lgUp', 'mdDown', 'mdUp', 'only', 'smDown', 'smUp', 'xlDown', 'xlUp', 'xsDown', 'xsUp'], props);
  var children = pickedProps.children;
  return /*#__PURE__*/_react.default.createElement(_Hidden.default, pickedProps, children);
}
Hidden.propTypes = {
  /**
   *    The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * If true, screens this size and down will be hidden.
   */
  lgDown: _propTypes.default.bool,
  /**
   * If true, screens this size and up will be hidden.
   */
  lgUp: _propTypes.default.bool,
  /**
   * If true, screens this size and down will be hidden.
   */
  mdDown: _propTypes.default.bool,
  /**
   * If true, screens this size and up will be hidden.
   */
  mdUp: _propTypes.default.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: _propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl', _propTypes.default.arrayOf(['xs', 'sm', 'md', 'lg', 'xl'])]),
  /**
   * If true, screens this size and down will be hidden.
   */
  smDown: _propTypes.default.bool,
  /**
   *If true, screens this size and up will be hidden.
   */
  smUp: _propTypes.default.bool,
  /**
   * If true, screens this size and down will be hidden.
   */
  xlDown: _propTypes.default.bool,
  /**
   * If true, screens this size and up will be hidden.
   */
  xlUp: _propTypes.default.bool,
  /**
   * If true, screens this size and down will be hidden.
   */
  xsDown: _propTypes.default.bool,
  /**
   * If true, screens this size and up will be hidden.
   */
  xsUp: _propTypes.default.bool
};
var _default = Hidden;
exports.default = _default;