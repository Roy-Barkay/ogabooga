"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _axios = _interopRequireDefault(require("axios"));
var _index = require("../../index");
var _promisePrototype = _interopRequireDefault(require("promise.prototype.finally"));
var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));
var _excluded = ["renderComponent", "source", "formatter", "dataProp", "errorMessage", "onDataReceived", "renderComponentProps", "waitFor", "dependent", "showErrorState"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
_promisePrototype.default.shim();
var Texts = {
  errorData: 'שגיאה בהבאת הנתונים, אנא נסה לרענן את העמוד'
};
var ErrorState = function ErrorState(props) {
  return /*#__PURE__*/_react.default.createElement(_index.InfoBlock, {
    type: "error",
    label: "\u05E9\u05D2\u05D9\u05D0\u05D4",
    content: props.errorMessage
  });
};
ErrorState.propTypes = {
  /** Error message to display in info block */
  errorMessage: _propTypes.default.string
};
function DataProvider(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var RenderComponent = props.renderComponent,
    source = props.source,
    formatter = props.formatter,
    dataProp = props.dataProp,
    errorMessage = props.errorMessage,
    onDataReceived = props.onDataReceived,
    renderComponentProps = props.renderComponentProps,
    waitFor = props.waitFor,
    dependent = props.dependent,
    showErrorState = props.showErrorState,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    error = _useState2[0],
    setError = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    data = _useState4[0],
    setData = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    loading = _useState6[0],
    setLoading = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    disabled = _useState8[0],
    setDisabled = _useState8[1];
  var CancelToken = _axios.default.CancelToken;
  var sourceAxios = CancelToken.source();
  var fetchData = function fetchData() {
    _axios.default.get(source, _objectSpread(_objectSpread({}, props.options), {}, {
      cancelToken: source.token
    })).then(function (r) {
      if (!r.data) {
        r.data = [];
      }
      setData(formatter(r.data));
    }).catch(function (e) {
      return setError(e);
    }).finally(function () {
      return setLoading(false);
    });
  };
  var cancelCurrentRequest = function cancelCurrentRequest() {
    sourceAxios.cancel();
  };
  (0, _react.useEffect)(function () {
    if (source) {
      setError(null);
      if (!dependent) {
        setLoading(true);
        fetchData();
      } else if (dependent && waitFor !== null && waitFor !== undefined) {
        setDisabled(false);
        setLoading(true);
        cancelCurrentRequest();
        fetchData();
      } else {
        setLoading(false);
        setDisabled(true);
      }
    }
  }, [source, dependent, waitFor]);
  (0, _react.useEffect)(function () {
    onDataReceived(data);
  }, [data]);
  var dataProps = (0, _defineProperty2.default)({}, dataProp, data);
  return error && showErrorState ? /*#__PURE__*/_react.default.createElement(ErrorState, {
    errorMessage: props.errorMessage
  }) : /*#__PURE__*/_react.default.createElement(RenderComponent, (0, _extends2.default)({
    disabled: disabled
  }, restProps, dataProps));
}
DataProvider.displayName = 'DataProvider';
DataProvider.propTypes = {
  /** React component to render, for ex: Autocomplete */
  renderComponent: _propTypes.default.any.isRequired,
  /** Component's value */
  value: _propTypes.default.any,
  /** Options to pass to the request (for more info, go to: https://github.com/axios/axios) */
  options: _propTypes.default.shape({
    method: _propTypes.default.oneOf(['get', 'post']),
    headers: _propTypes.default.object,
    params: _propTypes.default.object,
    data: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
    timeout: _propTypes.default.number
  }),
  /** Source API/Endpoint url to fetch the data from */
  source: _propTypes.default.string,
  /** Format the incoming data from the url (Array<{label: string, value: any}>) */
  formatter: _propTypes.default.func,
  /** The component's property that accepts the data */
  dataProp: _propTypes.default.string,
  /** Error message to display on data fetch failure */
  errorMessage: _propTypes.default.string,
  /** Show error block if there is any errors */
  showErrorState: _propTypes.default.bool,
  /** On data received callback */
  onDataReceived: _propTypes.default.func,
  /** Wait for a value to be filled (only if dependent is true) */
  waitFor: _propTypes.default.any,
  /** Is the component loading dependent on another components data */
  dependent: _propTypes.default.bool,
  /** Props to pass to TextField */
  renderComponentProps: _propTypes.default.any
};
DataProvider.defaultProps = {
  formatter: function formatter(data) {
    return data;
  },
  onDataReceived: function onDataReceived(data) {},
  showErrorState: true,
  errorMessage: Texts.errorData,
  dataProp: 'data',
  options: {
    method: 'get',
    timeout: 0
  },
  dependent: false,
  waitFor: null
};
var _default = DataProvider;
exports.default = _default;