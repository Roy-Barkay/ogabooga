"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debounce = debounce;
exports.getEventData = void 0;
exports.isObject = isObject;
exports.pick = pick;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

/**
 * Pick specific parameters, if exists, from object
 * @param {Array} keys wanted parameters
 * @param {Object} obj data
 * @return {object} trimmed object
 */
function pick(keys, obj) {
  var output = {};
  keys.forEach(function (prop) {
    if (typeof obj[prop] !== 'undefined') {
      output[prop] = obj[prop];
    }
  });
  return output;
}
/**
 * Check if variable is object
 * @param {mixed} obj
 * @return {boolean}
 */


function isObject(obj) {
  return (0, _typeof2.default)(obj) === 'object' && obj !== null;
}
/***
 * debounce
 * @param {Function} fn - function
 * @param {Number} wait - time in milliseconds to wait until next function invocation
 * @param {object} options - {if leading=true, invoke the function immediately and schedule another call)
 * @returns {Function}
 */


function debounce(fn, wait) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$leading = _ref.leading,
      leading = _ref$leading === void 0 ? false : _ref$leading;

  var timeoutId,
      wasCalledAtLeastOnce = false;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (leading && !wasCalledAtLeastOnce) {
      wasCalledAtLeastOnce = true;
      fn.apply(void 0, args);
    }

    if (timeoutId) {
      clearTimeout(timeoutId);
    }

    timeoutId = setTimeout(function () {
      fn.apply(void 0, args);
    }, wait);
  };
}
/***
 * Return fake target for event
 * @param {string} name - name for event.target.name
 * @param {any} value - value for event.target.value
 * @returns {object}
 */


var getEventData = function getEventData(name, value) {
  return {
    target: {
      type: 'text',
      name: name,
      value: value
    }
  };
};

exports.getEventData = getEventData;