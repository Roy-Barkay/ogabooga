"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Badge = _interopRequireDefault(require("@material-ui/core/Badge"));

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Badge(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var children = props.children,
      position = props.position,
      badgeContent = props.badgeContent,
      color = props.color;
  return /*#__PURE__*/_react.default.createElement(_Badge.default, (0, _extends2.default)({}, props, {
    anchorOrigin: position,
    badgeContent: badgeContent,
    color: color,
    invisible: !badgeContent
  }), children);
}

Badge.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,

  /**
   * The position of the toast on screen
   */
  position: _propTypes.default.object,

  /**
   * Content renderd inside badge
   */
  badgeContent: _propTypes.default.node,

  /**
   * Max number to show.
   * after this number a plus (+) sign will be added
   */
  max: _propTypes.default.number,

  /**
   * Badge variant.
   * content or dot
   */
  variant: _propTypes.default.oneOf(['standard', 'dot']),
  color: _propTypes.default.oneOf(['default', 'error', 'primary', 'secondary']),

  /**
   *    The content of the component.
   */
  children: _propTypes.default.node
};
Badge.defaultProps = {
  position: {
    vertical: 'top',
    horizontal: 'right'
  },
  max: 99,
  variant: 'standard',
  color: 'default'
};
var _default = Badge;
exports.default = _default;