"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _Option = _interopRequireDefault(require("./Option"));

var _Toggle = _interopRequireDefault(require("./Toggle.style"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@material-ui/core");

var _Label = _interopRequireDefault(require("./Label"));

var _formik = require("formik");

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function noop() {}

function Toggle(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var classes = (0, _Toggle.default)(props);
  var children = props.children,
      value = props.value,
      onChange = props.onChange,
      label = props.label,
      required = props.required,
      helperText = props.helperText,
      error = props.error,
      id = props.id,
      name = props.name,
      asSwitch = props.asSwitch,
      disabled = props.disabled,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      _props$setRoleForHelp = props.setRoleForHelperText,
      setRoleForHelperText = _props$setRoleForHelp === void 0 ? 'alert' : _props$setRoleForHelp,
      _props$setRoleForErro = props.setRoleForErrorText,
      setRoleForErrorText = _props$setRoleForErro === void 0 ? 'alert' : _props$setRoleForErro,
      ariaDescriptionById = props.ariaDescriptionById,
      hideRequiredAsterisk = props.hideRequiredAsterisk;

  var _useState = (0, _react.useState)(value || null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      checkedOption = _useState2[0],
      setCheckedOption = _useState2[1]; // const dataHrlBo = props['data-hrl-bo'];
  //const dataHrlBo = props.id ? props.id : props['data-hrl-bo'];


  var dataHrlBo = props['data-hrl-bo'] ? props['data-hrl-bo'] : props.id;
  var fieldError = error;
  var fieldHelperText = helperText;
  /* eslint-disable react/prop-types */

  if (props.form) {
    var fieldName = props.field.name;
    var touched = (0, _formik.getIn)(props.form.touched, fieldName);
    var formErrors = (0, _formik.getIn)(props.form.errors, fieldName);
    /* eslint-enable react/prop-types */

    fieldError = touched && formErrors ? true : false;
    fieldHelperText = fieldError ? formErrors : helperText;
  }

  (0, _react.useEffect)(function () {
    setCheckedOption(value);
  }, [value]);
  (0, _react.useEffect)(function () {
    if (value) setCheckedOption(value);
  }, []);

  var handleChange = function handleChange(e) {
    if (onChange) onChange(e, e.target.value);
    setCheckedOption(e.target.value);
    /* eslint-disable react/prop-types */

    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onChange(clonedEvent);
      props.form.setFieldTouched(props.field.name);
    }
    /* eslint-enable react/prop-types */

  };

  var handleKeyDown = function handleKeyDown(e, index) {
    switch (e.key) {
      case 'ArrowLeft':
        setCheckedToNextItem(index);
        break;

      case 'ArrowRight':
        setCheckedToPreviousItem(index);
        break;

      default:
        break;
    }
  };

  var setCheckedToNextItem = function setCheckedToNextItem(index) {
    if (index < props.children.length - 1) {
      document.getElementById("".concat(id).concat(index + 1)).focus();
    } else {
      document.getElementById("".concat(id, 0)).focus();
    }
  };

  var setCheckedToPreviousItem = function setCheckedToPreviousItem(index) {
    if (index > 0) {
      document.getElementById("".concat(id).concat(index - 1)).focus();
    } else {
      document.getElementById("".concat(id).concat(props.children.length - 1)).focus();
    }
  };

  var options = _react.Children.map(children, function (child, index) {
    // switch contain only 2 options
    if (index > 1 && asSwitch) return null;

    if (child.type === _Option.default) {
      var _child$props, _child$props2;

      var idOption = child.props.id || id ? child.props.id ? child.props.id : "".concat(id).concat(index) : null;
      var nameOption = child.props.name || name || idOption;
      var disabledOption = child.props.disabled || disabled;
      var hasDataHrlBoChild = child.props.id ? child.props.id : child.props['data-hrl-bo'];
      var dataHrlBoChild = hasDataHrlBoChild ? hasDataHrlBoChild : "".concat(dataHrlBo, "-toogle-").concat(index);
      var classNameChild = className ? "".concat(className, "-options") : '';
      return /*#__PURE__*/_react.default.createElement(_Option.default, {
        checked: checkedOption === child.props.value,
        onChange: handleChange,
        className: classNameChild,
        id: idOption,
        name: nameOption,
        tabIndex: index,
        key: index,
        handleKeyDown: handleKeyDown,
        value: child.props.value,
        disabled: disabledOption,
        "data-hrl-bo": dataHrlBoChild,
        error: !!fieldError,
        ariaDescribedby: (_child$props = child.props) !== null && _child$props !== void 0 && _child$props.ariaDescribedby ? (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.ariaDescribedby : null
      }, child.props.children);
    }

    return child;
  });

  var toggleHasError = fieldError ? 'isError' : '';
  var ariaDescribedby = ariaDescriptionById ? "".concat(dataHrlBo, "-error ").concat(ariaDescriptionById) : "".concat(dataHrlBo, "-error");
  return /*#__PURE__*/_react.default.createElement(_core.FormControl, {
    error: fieldError,
    "data-hrl-bo": "".concat(dataHrlBo, "-toogle-wrapper")
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: id,
    "data-hrl-bo": "".concat(dataHrlBo, "-toogle-hidden"),
    type: "hidden",
    name: name,
    value: value,
    onChange: handleChange,
    "aria-describedby": "".concat(dataHrlBo, "-error")
  }), required && hideRequiredAsterisk ? /*#__PURE__*/_react.default.createElement("label", {
    "data-hrl-bo": "Label-".concat(dataHrlBo),
    "data-shrink": "true",
    id: "group_label_".concat(id),
    className: "MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink",
    "data-hideRequiredAsterisk": true
  }, label) : /*#__PURE__*/_react.default.createElement(_Label.default, {
    id: "group_label_".concat(id),
    "data-hrl-bo": "Label-".concat(dataHrlBo),
    required: required
  }, label), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(classes.root, " ").concat(className, " ").concat(toggleHasError),
    "aria-labelledby": "group_label_".concat(id),
    onChange: handleChange,
    "aria-describedby": ariaDescribedby,
    "aria-required": required ? true : null,
    role: "radiogroup"
  }, options), fieldHelperText && !fieldError && /*#__PURE__*/_react.default.createElement(_core.FormHelperText, {
    role: setRoleForHelperText,
    id: "".concat(dataHrlBo, "-helper-text"),
    "data-hrl-bo": "".concat(dataHrlBo, "-helper-text")
  }, fieldHelperText), fieldError && /*#__PURE__*/_react.default.createElement(_core.FormHelperText, {
    error: true,
    role: setRoleForErrorText,
    id: "".concat(dataHrlBo, "-error"),
    "data-hrl-bo": "".concat(dataHrlBo, "-error")
  }, fieldHelperText));
}

Toggle.Option = _Option.default;
Toggle.propTypes = {
  /**
   * Testing property
   */
  'data-hrl-bo': _propTypes.default.string,

  /**
   * Default value
   */
  value: _propTypes.default.string,

  /**
   * Override or extend the styles applied to the component
   */
  classes: _propTypes.default.object,

  /**
   * On change event handler
   */
  onChange: _propTypes.default.func,

  /**
   * Toggle label
   */
  label: _propTypes.default.string,

  /**
   * If true, show required asterix in label
   */
  required: _propTypes.default.bool,

  /**
   * Toggle input id
   */
  id: _propTypes.default.string,

  /**
   * Toggle input name
   */
  name: _propTypes.default.string,

  /**
   * Toggle error message
   */
  error: _propTypes.default.string,

  /**
   * Toggle helper text
   */
  helperText: _propTypes.default.string,

  /**
   * if true, toggle will be displayed as switch.
   * only 2 options, width 48px each option
   */
  asSwitch: _propTypes.default.bool,

  /**
   * if true, toggle element will be disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * If dense or normal, will adjust vertical spacing of this and contained components.
   */
  margin: _propTypes.default.oneOf(['none', 'normal', 'dense']),

  /**
   * height of label
   */
  labelHeight: _propTypes.default.string,

  /**
   * width of label
   */
  labelWidth: _propTypes.default.string,

  /**
   * Additional className
   */
  className: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),

  /**
   *    The content of the component.
   */
  children: _propTypes.default.node,

  /**
   *   Add custom Role for "Hint". use setRoleForHelperText={null} and remove "Role" attribute from hint
   */
  setRoleForHelperText: _propTypes.default.oneOfType([_propTypes.default.string, null]),

  /**
   *   Add custom Role for "Error massage". as Default the  error message tag has not role attribute. You can set roll by using setRoleForError={<your custom text>}
   */
  setRoleForErrorText: _propTypes.default.oneOfType([_propTypes.default.string, null]),

  /**
   *   Add value to aria-describedby
   */
  ariaDescriptionById: _propTypes.default.string,

  /**
   *   hideRequiredAsterisk=true hide Asterisk (red start) from required mode
   */
  hideRequiredAsterisk: _propTypes.default.bool
};
Toggle.defaultProps = {
  onChange: noop,
  asSwitch: false,
  'data-hrl-bo': 'Toggle',
  disabled: false,
  setRoleForHelperText: 'alert',
  setRoleForErrorText: null,
  ariaDescriptionById: '',
  hideRequiredAsterisk: false
};
var _default = Toggle;
exports.default = _default;