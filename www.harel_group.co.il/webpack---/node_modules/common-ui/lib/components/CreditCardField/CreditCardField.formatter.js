"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasCardNumberReachedMaxLength = exports.getCardTypeByValue = exports.getCardTypeByType = exports.formatCardNumber = void 0;

var _CreditCardField = require("./CreditCardField.constants");

var getCardTypeByValue = function getCardTypeByValue(value) {
  return _CreditCardField.CARD_TYPES.filter(function (cardType) {
    return cardType.startPattern.test(value);
  })[0];
};

exports.getCardTypeByValue = getCardTypeByValue;

var getCardTypeByType = function getCardTypeByType(type) {
  return _CreditCardField.CARD_TYPES.filter(function (cardType) {
    return cardType.type === type;
  })[0];
};

exports.getCardTypeByType = getCardTypeByType;

var hasCardNumberReachedMaxLength = function hasCardNumberReachedMaxLength(currentValue, currentValueLength) {
  var cardType = getCardTypeByValue(currentValue);
  return cardType && currentValueLength >= cardType.maxCardNumberLength;
};

exports.hasCardNumberReachedMaxLength = hasCardNumberReachedMaxLength;

var formatCardNumber = function formatCardNumber(cardNumber) {
  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';
  var cardType = getCardTypeByValue(cardNumber);
  if (!cardType) return (cardNumber && cardNumber.match(/\d+/g) || []).join('').substr(0, 19);
  var format = cardType.format;

  if (format.global) {
    return cardNumber.match(format).join(delimiter).substr(0, 19);
  }

  var execResult = format.exec(cardNumber.split(delimiter).join(''));

  if (execResult) {
    return execResult.splice(1, 3).filter(function (x) {
      return x;
    }).join(delimiter).substr(0, 19);
  }

  return cardNumber.substr(0, 19);
};

exports.formatCardNumber = formatCardNumber;