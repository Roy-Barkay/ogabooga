"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Chip = _interopRequireDefault(require("@material-ui/core/Chip"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../../utils");

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Chip(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var pickedProps = (0, _utils.pick)(['avatar', 'classes', 'clickable', 'color', 'component', 'deleteIcon', 'icon', 'label', 'onDelete', 'onClick', 'size', 'variant'], props);
  return /*#__PURE__*/_react.default.createElement(_Chip.default, pickedProps);
}

Chip.propTypes = {
  /**
   * Avatar element.
   */
  avatar: _propTypes.default.element,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,

  /**
   * If true, the chip will appear clickable, and will raise when pressed, even if the onClick prop is not defined. If false, the chip will not be clickable, even if onClick prop is defined. This can be used, for example, along with the component prop to indicate an anchor Chip is clickable.
   */
  clickable: _propTypes.default.bool,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: _propTypes.default.oneOf(['default', 'primary', 'secondary']),

  /**
   * The component used for the root node. Either a string to use a DOM element or a component.
   */
  component: _propTypes.default.elementType,

  /**
   * Override the default delete icon element. Shown only if onDelete is set.
   */
  deleteIcon: _propTypes.default.element,

  /**
   * Icon element.
   */
  icon: _propTypes.default.element,

  /**
   *    The content of the label.
   */
  label: _propTypes.default.node,

  /**
   *    Callback function fired when the delete icon is clicked. If set, the delete icon will be shown.
   */
  onDelete: _propTypes.default.func,

  /**
   *    Callback function fired when the click chip is clicked.
   */
  onClick: _propTypes.default.func,

  /**
   * The size of the chip.
   */
  size: _propTypes.default.oneOf(['small', 'medium']),

  /**
   * The variant to use.
   */
  variant: _propTypes.default.oneOf(['default', 'outlined'])
};
Chip.defaultProps = {
  color: 'default',
  component: 'div',
  size: 'medium',
  variant: 'default'
};
var _default = Chip;
exports.default = _default;