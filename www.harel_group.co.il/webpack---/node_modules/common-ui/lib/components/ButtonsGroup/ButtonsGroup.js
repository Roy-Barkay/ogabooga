"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../../utils");

var _Button = _interopRequireDefault(require("../Button/Button"));

var _styles = require("@material-ui/core/styles");

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: function root(props) {
      return {
        marginBottom: theme.spacing(2),
        '&.MuiButton-containedPrimary .MuiButton-label': {
          color: '#ffffff'
        },
        '&:not(:last-child)': {
          marginLeft: props.isAlignCenter ? '8px' : '16px'
        }
      };
    },
    groups: function groups(props) {
      return {
        textAlign: props.isAlignCenter ? 'center' : 'inherit',
        '& button': {
          marginRight: props.isAlignCenter ? '8px' : '0px',
          marginLeft: props.isAlignCenter ? '8px' : '16px'
        }
      };
    }
  };
});

function ButtonsGroup(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var classes = useStyles(props);
  var groupProps = (0, _utils.pick)(['items', 'label', 'labelId', 'value', 'onChange', 'aria-label', 'aria-describedby'], props);
  var hrlBo = props.id ? props.id : props['data-hrl-bo'];

  var _useState = (0, _react.useState)(groupProps.value),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      selected = _useState2[0],
      setSelected = _useState2[1];

  var onItemClick = function onItemClick(clickedItem) {
    return function (e) {
      setSelected(clickedItem);
      groupProps.onChange(e, clickedItem);
    };
  };

  var refButtonGroup = _react.default.useRef();

  (0, _react.useEffect)(function () {
    if (props.autoFocus && refButtonGroup) {
      var firstButton = refButtonGroup.current.firstChild;
      firstButton.focus();
    }
  }, [refButtonGroup]);
  var buttonGroupsWrapperProps = Object.assign({}, {
    role: 'radiogroup',
    'aria-label': groupProps['aria-label'],
    'aria-describedby': groupProps['aria-describedby']
  }, groupProps.label && {
    'aria-labelledby': "".concat(hrlBo, "-label")
  });
  (0, _react.useEffect)(function () {
    return setSelected(groupProps.value);
  }, [groupProps.value]);
  return /*#__PURE__*/_react.default.createElement("div", null, groupProps.label && /*#__PURE__*/_react.default.createElement("label", {
    id: "".concat(hrlBo, "-label"),
    "data-hrl-bo": "".concat(hrlBo, "-label")
  }, groupProps.label), /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    ref: refButtonGroup
  }, buttonGroupsWrapperProps, {
    className: classes.groups
  }), groupProps.items.map(function (item, index) {
    var variant = selected ? selected.value === item.value ? 'contained' : 'outlined' : 'outlined';
    var idRandom = Math.floor(Math.random() * 1000) + 1;
    var labelId = 'label-' + idRandom + index;
    var dataHrlBoButton = "".concat(hrlBo, "-button-").concat(labelId);
    return /*#__PURE__*/_react.default.createElement(_Button.default, {
      value: item.value,
      className: classes.root,
      color: "primary",
      role: "radio",
      id: "".concat(hrlBo, "-button-").concat(index),
      "aria-labelledby": item.id ? item.id : labelId,
      "aria-checked": selected.value === item.value,
      "data-hrl-bo": "".concat(hrlBo, "-button-").concat(idRandom + index),
      "aria-invalid": props.ariaInvalid,
      onClick: onItemClick(item),
      variant: variant,
      key: index
    }, item.htmlElement ? /*#__PURE__*/_react.default.createElement("div", {
      id: labelId,
      "data-hrl-bo": dataHrlBoButton,
      dangerouslySetInnerHTML: {
        __html: item.htmlElement
      }
    }) : /*#__PURE__*/_react.default.createElement("span", {
      id: labelId,
      "data-hrl-bo": dataHrlBoButton
    }, item.label));
  })));
}

ButtonsGroup.propTypes = {
  /** The aria-label of the label. */
  'aria-label': _propTypes.default.string,

  /** The aria-describedby of the label. */
  'aria-describedby': _propTypes.default.string,

  /** The aria-invalid state of the button. */
  ariaInvalid: _propTypes.default.string,

  /** Label */
  label: _propTypes.default.string,

  /** Label Unique ID */
  labelId: _propTypes.default.string,

  /** Default selected value */
  value: _propTypes.default.any,

  /** On change event callback */
  onChange: _propTypes.default.func,

  /** Items list */
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    label: _propTypes.default.string,
    value: _propTypes.default.string
  })).isRequired,

  /**
   * center button position
   */
  isAlignCenter: _propTypes.default.bool,

  /** If true, the first button will be focused during the first mount. */
  autoFocus: _propTypes.default.bool,
  id: _propTypes.default.string,

  /** */
  'data-hrl-bo': _propTypes.default.string
};
ButtonsGroup.defaultProps = {
  isAlignCenter: false,
  'aria-label': 'ButtonGroup',
  'data-hrl-bo': "ButtonGroup-".concat(Math.floor(Math.random() * 10000))
};
var _default = ButtonsGroup;
exports.default = _default;