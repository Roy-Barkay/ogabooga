"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Grid = _interopRequireDefault(require("../Grid"));

var _Autocomplete = _interopRequireDefault(require("../Autocomplete"));

var _useReduxField = _interopRequireWildcard(require("../HOC/useReduxField"));

var _TextField = _interopRequireDefault(require("../TextField"));

var _misc = require("../../utils/misc");

var _axios = _interopRequireDefault(require("axios"));

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

var _Progress = _interopRequireDefault(require("../Progress"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getUrl = function getUrl(externalUrl, baseUrl, enslavement, proxy) {
  if (externalUrl) {
    return externalUrl;
  }

  var prefix = baseUrl || 'https://digital.harel-group.co.il';
  var url = prefix + '/static-data' + (enslavement ? '/get-enslavement-banks' : '/get-banks');
  return proxy ? proxy + url : url;
};

var BankDetailsInner = function BankDetailsInner(_ref) {
  var baseUrl = _ref.baseUrl,
      value = _ref.value,
      grid = _ref.grid,
      spacing = _ref.spacing,
      fieldName = _ref.name,
      useRedux = _ref.useRedux,
      proxy = _ref.proxy,
      disableAccountNumber = _ref.disableAccountNumber,
      externalUrl = _ref.externalUrl,
      enslavement = _ref.enslavement,
      _ref$childProps = _ref.childProps,
      childProps = _ref$childProps === void 0 ? {} : _ref$childProps,
      order = _ref.order,
      id = _ref.id,
      role = _ref.role,
      inputProps = _ref.inputProps,
      InputProps = _ref.InputProps,
      blurOnSelect = _ref.blurOnSelect,
      dataHrlBo = _ref['data-hrl-bo'];
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      banks = _useState4[0],
      setBanks = _useState4[1];

  var _useState5 = (0, _react.useState)([]),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      branches = _useState6[0],
      setBranches = _useState6[1];

  var _useState7 = (0, _react.useState)(true),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      loaderVisible = _useState8[0],
      setLoaderVisible = _useState8[1];

  var url = getUrl(externalUrl, baseUrl, enslavement, proxy);
  var form = useRedux({
    bank: null,
    branch: null,
    accountNumber: ''
  });
  var getFieldProps = form.getFieldProps,
      handleChange = form.handleChange,
      values = form.values;
  var _values$bank = values.bank,
      bank = _values$bank === void 0 ? null : _values$bank,
      _values$branch = values.branch,
      branch = _values$branch === void 0 ? null : _values$branch,
      _values$accountNumber = values.accountNumber,
      accountNumber = _values$accountNumber === void 0 ? '' : _values$accountNumber;

  var setFieldValue = function setFieldValue(field) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    handleChange(field)((0, _misc.getEventData)(fieldName, value));
  };

  var orderBy = function orderBy() {
    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'byDefault';

    if (order === 'byDefault') {
      return list;
    }

    var fields = {
      'byLabel': 'label',
      'byValue': 'value'
    };
    return list.sort(function (a, b) {
      var field = fields[order] || 'value';

      if (a[field] < b[field]) {
        return -1;
      }

      if (a[field] > b[field]) {
        return 1;
      }

      return 0;
    });
  };

  var updateBranchList = function updateBranchList(bankNumber) {
    var _data$find;

    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var branches = (data === null || data === void 0 ? void 0 : (_data$find = data.find(function (e) {
      return (e === null || e === void 0 ? void 0 : e.bankNumber) === bankNumber;
    })) === null || _data$find === void 0 ? void 0 : _data$find.branches) || [];
    setBranches(orderBy(branches.map(function (i) {
      return {
        label: "".concat(i.branchId, " - ").concat(i.branchName),
        value: i.branchId
      };
    }), order));
  };

  var updateFieldsFromValue = function updateFieldsFromValue(value, data) {
    var _value$bank;

    setFieldValue('bank', (value === null || value === void 0 ? void 0 : value.bank) || null);
    setFieldValue('branch', (value === null || value === void 0 ? void 0 : value.branch) || null);
    setFieldValue('accountNumber', (value === null || value === void 0 ? void 0 : value.accountNumber) || '');

    if (value !== null && value !== void 0 && (_value$bank = value.bank) !== null && _value$bank !== void 0 && _value$bank.value) {
      var _value$bank2;

      updateBranchList(value === null || value === void 0 ? void 0 : (_value$bank2 = value.bank) === null || _value$bank2 === void 0 ? void 0 : _value$bank2.value, data);
    }
  };

  (0, _react.useEffect)(function () {
    _axios.default.get(url).then(function (_ref2) {
      var _ref2$data = _ref2.data,
          data = _ref2$data === void 0 ? [] : _ref2$data;
      setData(data);
      setBanks(orderBy(data.map(function (_ref3) {
        var bankName = _ref3.bankName,
            bankNumber = _ref3.bankNumber;
        return {
          label: bankName,
          value: bankNumber
        };
      }), order));

      if (value) {
        updateFieldsFromValue(value, data);
      }
    }).finally(function () {
      return setLoaderVisible(false);
    });
  }, []);
  (0, _react.useEffect)(function () {
    if (data) {
      updateFieldsFromValue(value, data);
    }
  }, [value]);

  var onBankChange = function onBankChange(event, value) {
    setFieldValue('bank', value);
    setFieldValue('branch', null);
    setFieldValue('accountNumber', '');
    updateBranchList(value === null || value === void 0 ? void 0 : value.value, data);
  };

  return /*#__PURE__*/_react.default.createElement(_Grid.default, {
    container: true,
    spacing: spacing,
    id: id,
    "data-hrl-bo": "".concat(dataHrlBo, "-mainBox")
  }, /*#__PURE__*/_react.default.createElement(_Grid.default, (0, _extends2.default)({
    item: true,
    xs: 12
  }, grid.bank), /*#__PURE__*/_react.default.createElement(_Autocomplete.default, (0, _extends2.default)({}, getFieldProps('bank'), {
    label: "\u05E9\u05DD \u05D1\u05E0\u05E7",
    options: banks,
    displayEmpty: true,
    value: bank,
    onChange: onBankChange,
    disabled: loaderVisible,
    getOptionLabel: function getOptionLabel(bank) {
      return bank.label;
    },
    getOptionSelected: function getOptionSelected(option, value) {
      return option.value === value.value;
    },
    "data-hrl-bo": "".concat(dataHrlBo, "-bank"),
    role: role,
    inputProps: inputProps,
    InputProps: InputProps,
    blurOnSelect: blurOnSelect
  }, childProps === null || childProps === void 0 ? void 0 : childProps.bank)), loaderVisible && /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: 'absolute',
      left: '40px',
      top: '32px'
    }
  }, /*#__PURE__*/_react.default.createElement(_Progress.default, {
    size: 18
  }))), /*#__PURE__*/_react.default.createElement(_Grid.default, (0, _extends2.default)({
    item: true,
    xs: 12
  }, grid.branch), /*#__PURE__*/_react.default.createElement(_Autocomplete.default, (0, _extends2.default)({}, getFieldProps('branch'), {
    label: "\u05DE\u05E1\u05E4\u05E8 \u05D0\u05D5 \u05E9\u05DD \u05D4\u05E1\u05E0\u05D9\u05E3",
    options: branches,
    getOptionLabel: function getOptionLabel(branch) {
      return branch.label;
    },
    getOptionSelected: function getOptionSelected(option, value) {
      return option.value === value.value;
    },
    value: branch,
    displayEmpty: true,
    onChange: function onChange(event, value) {
      return setFieldValue('branch', value);
    },
    "data-hrl-bo": "".concat(dataHrlBo, "-branch"),
    disabled: !branches.length,
    role: role,
    inputProps: inputProps,
    InputProps: InputProps,
    blurOnSelect: blurOnSelect
  }, childProps === null || childProps === void 0 ? void 0 : childProps.branch))), !disableAccountNumber && /*#__PURE__*/_react.default.createElement(_Grid.default, (0, _extends2.default)({
    item: true,
    xs: 12
  }, grid.accountNumber), /*#__PURE__*/_react.default.createElement(_TextField.default, (0, _extends2.default)({}, getFieldProps('accountNumber'), {
    label: "\u05DE\u05E1\u05E4\u05E8 \u05D7\u05E9\u05D1\u05D5\u05DF",
    value: accountNumber,
    inputProps: {
      'data-hrl-bo': "".concat(dataHrlBo, "-accountNumber_input"),
      type: 'tel'
    },
    onChange: function onChange(event) {
      return setFieldValue('accountNumber', event.target.value);
    },
    mask: '99999999999999',
    disabled: !bank
  }, childProps === null || childProps === void 0 ? void 0 : childProps.accountNumber))));
};

var singleObjectValueStruct = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
  label: _propTypes.default.any.isRequired,
  value: _propTypes.default.any.isRequired
})]);

var sizesStruct = _propTypes.default.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);

var singleObjectSizeStruct = _propTypes.default.shape({
  xs: sizesStruct,
  md: sizesStruct,
  lg: sizesStruct,
  xl: sizesStruct
});

var propTypes = {
  /**
   * Custom child props
   */
  childProps: _propTypes.default.shape({
    bank: _propTypes.default.object,
    branch: _propTypes.default.object,
    accountNumber: _propTypes.default.object
  }),

  /**
   * Base url for service to be located on different envs
   */
  baseUrl: _propTypes.default.string,

  /**
   * Callback fired when the value is changed.
   *
   * value - is updated value -> {bank, branch, accountNumber}
   * field - is last updated field -> {field, value}
   */
  onChange: _propTypes.default.func,

  /**
   * Function to be called when input was blur
   */
  onBlur: _propTypes.default.func,

  /**
   * The value of the input element, required for a controlled component.
   */
  value: _propTypes.default.shape({
    bank: singleObjectValueStruct,
    branch: singleObjectValueStruct,
    accountNumber: _propTypes.default.string
  }),

  /**
   * The grid items sizing
   */
  grid: _propTypes.default.shape({
    bank: singleObjectSizeStruct,
    branch: singleObjectSizeStruct,
    accountNumber: singleObjectSizeStruct
  }),

  /**
   * The grid container spacing
   */
  spacing: _propTypes.default.number,

  /**
   * Name attribute of the input element.
   */
  name: _propTypes.default.string,

  /**
   * @deprecated
   * @hidden
   * The helper text content.
   *
   * NOTE: please, use childProps
   */
  helperText: _propTypes.default.shape({
    bank: _propTypes.default.string,
    branch: _propTypes.default.string,
    accountNumber: _propTypes.default.string
  }),

  /**
   * If true, the label is displayed as required and the input element` will be required.
   */
  required: _propTypes.default.shape({
    bank: _propTypes.default.bool,
    branch: _propTypes.default.bool,
    accountNumber: _propTypes.default.bool
  }),

  /**
   * @deprecated
   * @hidden
   * If true, the label will be displayed in an error state.
   *
   * NOTE: please, use childProps
   */
  error: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
    bank: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    branch: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    accountNumber: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string])
  })]),

  /**
   * @dev
   * @hidden
   * Pass proxy server url to allow on local
   */
  proxy: _propTypes.default.string,

  /**
   * If true, account number not display and not will return in output data
   */
  disableAccountNumber: _propTypes.default.bool,

  /**
   * @deprecated
   * @hidden
   * Show error block if there is any errors
   *
   * NOTE: this property is unused
   */
  showErrorState: _propTypes.default.bool,

  /**
   * Attribute for automation testing.
   */
  'data-hrl-bo': _propTypes.default.string,

  /**
   * Pass external url instead of the built in one to get data
   */
  externalUrl: _propTypes.default.string,

  /**
   * Use enslavementBranches instead of branches
   */
  enslavement: _propTypes.default.bool,
  order: _propTypes.default.oneOf(['byDefault', 'byLabel', 'byValue']),

  /**
   * Add Custom ROLE to main div of Autocomplate, default value is combobox, role=null remove the attribute
   **/
  role: _propTypes.default.string,

  /**
   * Add Custom attributes to input element in Autocomplate, default value is null
   **/
  inputProps: _propTypes.default.object,

  /**
   * Add Custom attributes to wrapper (DIV) of input element in Autocomplate, default value is null
   **/
  InputProps: _propTypes.default.object,

  /**
   * ID of component, default is null
   **/
  id: _propTypes.default.string,

  /** Control if the input should be blurred when an option is selected:
   - false the input is not blurred.
   - true the input is always blurred.
   - touch the input is blurred after a touch event.
   - mouse the input is blurred after a mouse event.
   */
  blurOnSelect: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string])
};
var defaultProps = {
  onChange: function onChange(value, field) {},
  spacing: 2,
  value: {
    bank: {},
    branch: {},
    accountNumber: {}
  },
  grid: {
    bank: {
      xs: 12
    },
    branch: {
      xs: 6
    },
    accountNumber: {
      xs: 6
    }
  },
  'data-hrl-bo': 'bank-details',
  name: 'bank-details',
  externalUrl: null,
  enslavement: false,
  disableAccountNumber: false,
  childProps: {
    bank: {},
    branch: {},
    accountNumber: {}
  },
  order: 'byDefault',
  role: 'combobox',
  inputProps: null,
  InputProps: null,
  id: null,
  blurOnSelect: false
};
BankDetailsInner.propTypes = _objectSpread(_objectSpread({}, propTypes), _useReduxField.propTypes);
BankDetailsInner.defaultProps = _objectSpread({}, defaultProps);

var BankDetails = function BankDetails(props) {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _useReduxField.default)(BankDetailsInner)(props));
};

BankDetails.propTypes = _objectSpread(_objectSpread({}, propTypes), _useReduxField.propTypes);
BankDetails.defaultProps = _objectSpread({}, defaultProps);
BankDetails.displayName = 'BankDetails';
var _default = BankDetails;
exports.default = _default;