"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Select = _interopRequireDefault(require("@material-ui/core/Select"));

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _InputLabel = _interopRequireDefault(require("@material-ui/core/InputLabel"));

var _utils = require("../../utils");

var _Option = _interopRequireDefault(require("./Option"));

var _core = require("@material-ui/core");

var _formik = require("formik");

var _commonIcons = require("common-icons");

var _CheckboxSelect = _interopRequireDefault(require("./CheckboxSelect"));

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

var _GroupLine = _interopRequireDefault(require("./GroupLine"));

require("./scrollBar.css");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Select(props) {
  var _pickedProps$children4, _pickedProps$children5;

  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var pickedProps = (0, _utils.pick)(['value', 'error', 'helperText', 'defaultValue', 'onChange', 'onBlur', 'multiple', 'required', 'label', 'id', 'name', 'disabled', 'children', 'data-hrl-bo', 'classes', 'MenuProps', 'orderLabel', 'renderValue', 'multilinelabel', 'maxheight', 'virtuallist'], props);

  var showChildren = _react.default.useRef([]);

  var _React$useState = _react.default.useState(0),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      forceRender = _React$useState2[0],
      setForceRender = _React$useState2[1];

  var _React$useState3 = _react.default.useState([]),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      childrens = _React$useState4[0],
      setChildrens = _React$useState4[1];

  var childStartIndex = _react.default.useRef(50);

  var scrollCounter = _react.default.useRef(0);

  var initValue = _react.default.useRef(pickedProps.defaultValue);

  var hrlBo = pickedProps['data-hrl-bo'] ? pickedProps['data-hrl-bo'] : pickedProps.id;

  var _useState = (0, _react.useState)(props.open),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(props.value),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      selectValue = _useState4[0],
      setSelectValue = _useState4[1];

  var fieldError = pickedProps.error;
  var fieldHelperText = pickedProps.helperText;
  /* eslint-disable react/prop-types */

  if (props.form) {
    var fieldName = props.field.name;
    var touched = (0, _formik.getIn)(props.form.touched, fieldName);
    var formErrors = (0, _formik.getIn)(props.form.errors, fieldName);
    /* eslint-enable react/prop-types */

    fieldError = touched && formErrors;
    fieldHelperText = fieldError ? formErrors : fieldHelperText;
  }

  (0, _react.useEffect)(function () {
    setSelectValue(props.value);
  }, [props.value]);

  var handleClose = function handleClose(e) {
    if (props.onClose) props.onClose(e.target.value);
    /* eslint-disable react/prop-types */

    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      clonedEvent.target.value = e.target.value;
      props.field.onBlur(clonedEvent);
    }
    /* eslint-enable react/prop-types */


    setOpen(false);
  };

  var handleOpen = function handleOpen(e) {
    if (props.onOpen) props.onOpen(e.target.value);
    setOpen(true);
  };

  var handleChange = function handleChange(e) {
    setSelectValue(e.target.value);
    if (props.onChange) props.onChange(e.target.value);
    /* eslint-disable react/prop-types */

    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      clonedEvent.target.value = e.target.value;
      props.field.onChange(clonedEvent);
    }
    /* eslint-enable react/prop-types */

  };

  pickedProps.open = open;
  pickedProps.value = selectValue;
  pickedProps.autoWidth = false;
  pickedProps.onChange = handleChange;
  pickedProps.onOpen = handleOpen;
  pickedProps.onClose = handleClose;
  pickedProps.inputProps = _objectSpread({
    name: pickedProps.name,
    'data-hrl-bo': "".concat(hrlBo, "-input"),
    'aria-labelledby': "label-".concat(pickedProps.id),
    'aria-required': pickedProps.required
  }, props.inputProps);
  var SelectDisplayProps = Object.assign({}, {
    'aria-expanded': open,
    'aria-invalid': !!fieldError,
    'aria-labelledby': "label-".concat(pickedProps.id, " ").concat(pickedProps.id),
    'aria-required': pickedProps.required
  }, fieldHelperText && {
    'aria-describedby': "".concat(hrlBo, "-helper-text")
  }, pickedProps.value && {
    'aria-activedescendant': "menu-".concat(pickedProps.id, "-").concat(pickedProps.value)
  }, pickedProps.renderValue && {
    'renderValue': pickedProps.renderValue
  });
  var MenuProps = Object.assign({}, {
    getContentAnchorEl: null,
    anchorOrigin: {
      vertical: 'bottom',
      horizontal: 'right'
    },
    onScroll: function onScroll(e) {
      if (pickedProps.virtuallist) {
        if (e.target.scrollTop === 0 && scrollCounter.current > 0) {
          scrollCounter.current -= 50;
          initValue.current = '';
          e.target.scrollTop = 10;
          setForceRender(scrollCounter.current);
        } else if (e.target.offsetHeight + e.target.scrollTop >= e.target.scrollHeight) {
          e.target.scrollTop = e.target.scrollHeight;
          initValue.current = '';
          scrollCounter.current += 50;
          setForceRender(scrollCounter.current);
        }
      }
    },
    id: "menu-".concat(pickedProps.id),
    MenuListProps: {
      'data-hrl-bo': "MenuProps-".concat(hrlBo),
      className: 'customScrollBar',
      style: {
        maxHeight: pickedProps.maxheight ? pickedProps.maxheight : 'auto',
        overflowY: 'auto'
      }
    }
  }, props.MenuClasses && {
    classes: {
      paper: props.MenuClasses
    }
  });

  if (pickedProps.multiple) {
    return /*#__PURE__*/_react.default.createElement(_CheckboxSelect.default, (0, _extends2.default)({}, pickedProps, {
      showSelectButton: props.showSelectButton,
      selectButtonLabel: props.selectButtonLabel,
      fieldError: fieldError,
      fieldHelperText: fieldHelperText,
      "data-hrl-bo": hrlBo,
      hideRequiredAsterisk: props.hideRequiredAsterisk
    }));
  }

  function isArraysEquals(arr1, arr2) {
    return Array.isArray(arr1) && Array.isArray(arr2) && arr1.length === arr2.length && arr1.every(function (v, i) {
      return v === arr2[i];
    });
  }

  var sliceChildren = function sliceChildren() {
    var _pickedProps$children;

    if (pickedProps.virtuallist && pickedProps !== null && pickedProps !== void 0 && (_pickedProps$children = pickedProps.children) !== null && _pickedProps$children !== void 0 && _pickedProps$children.length) {
      var _childrenArray;

      var childrenArray = [];
      var defaultValueIndex = -1;

      if (initValue.current && pickedProps !== null && pickedProps !== void 0 && pickedProps.children) {
        defaultValueIndex = pickedProps === null || pickedProps === void 0 ? void 0 : pickedProps.children.findIndex(function (v, i) {
          return String(v.props.value) === String(initValue.current) && i;
        });
      }

      if (defaultValueIndex > -1) {
        var _pickedProps$children2;

        childrenArray = pickedProps === null || pickedProps === void 0 ? void 0 : (_pickedProps$children2 = pickedProps.children) === null || _pickedProps$children2 === void 0 ? void 0 : _pickedProps$children2.slice(0, defaultValueIndex + 10);
      } else {
        var _pickedProps$children3;

        var sliceIndex = (childrens === null || childrens === void 0 ? void 0 : childrens.length) + childStartIndex.current;
        childrenArray = pickedProps === null || pickedProps === void 0 ? void 0 : (_pickedProps$children3 = pickedProps.children) === null || _pickedProps$children3 === void 0 ? void 0 : _pickedProps$children3.slice(0, sliceIndex);
      }

      if (childrenArray && (_childrenArray = childrenArray) !== null && _childrenArray !== void 0 && _childrenArray.length) {
        showChildren.current = (0, _toConsumableArray2.default)(childrenArray);
        return showChildren.current;
      }

      return showChildren.current;
    } else {
      return pickedProps === null || pickedProps === void 0 ? void 0 : pickedProps.children;
    }
  };

  var CreateChildren = function CreateChildren() {
    return _react.default.Children.map(sliceChildren(), function (child, index) {
      if (child.type.name === 'GroupLine') {
        return child;
      }

      return /*#__PURE__*/_react.default.cloneElement(child, {
        index: index,
        value: child.props.value,
        id: "menu-".concat(pickedProps.id, "-").concat(child.props.value)
      });
    });
  }; //update children when virtuallist is true


  if (pickedProps.virtuallist && pickedProps !== null && pickedProps !== void 0 && (_pickedProps$children4 = pickedProps.children) !== null && _pickedProps$children4 !== void 0 && _pickedProps$children4.length && !(childrens !== null && childrens !== void 0 && childrens.length)) {
    setChildrens(CreateChildren());
  } //update children when virtuallist is false


  (0, _react.useEffect)(function () {
    if (!pickedProps.virtuallist) {
      setChildrens(CreateChildren());
    }
  }, [pickedProps === null || pickedProps === void 0 ? void 0 : (_pickedProps$children5 = pickedProps.children) === null || _pickedProps$children5 === void 0 ? void 0 : _pickedProps$children5.length]); // fix role attribute to 'combobox' for accessibility mode

  _react.default.useEffect(function () {
    var allSelectComponents = document.querySelectorAll('[data-isSelectComponent] > div[role="button"]');
    allSelectComponents.forEach(function (v) {
      return console.log(v.setAttribute('role', 'combobox'));
    });
  }, []);

  _react.default.useEffect(function () {
    if (pickedProps.virtuallist) {
      setChildrens(CreateChildren());
    }
  }, [forceRender]);

  var isMultiLineLabelStyle = {
    position: 'static',
    textOverflow: 'unset',
    whiteSpace: 'unset',
    height: 'auto',
    transform: 'translate(10px, 10px)',
    width: '100%',
    padding: '0 10px 0 0'
  };
  var isMultiLineLabel = pickedProps.multilinelabel ? isMultiLineLabelStyle : null;
  return /*#__PURE__*/_react.default.createElement(_FormControl.default, {
    disabled: pickedProps.disabled,
    name: pickedProps.name,
    className: "MuiFormControl-Select",
    "data-hrl-bo": "select-bo-".concat(hrlBo),
    error: !!fieldError
  }, pickedProps.label ? /*#__PURE__*/_react.default.createElement(_InputLabel.default, {
    htmlFor: pickedProps.id,
    id: "label-".concat(pickedProps.id),
    "data-multilabel": pickedProps.multilinelabel ? 'multilinelabel' : null,
    style: pickedProps.multilinelabel ? isMultiLineLabel : null,
    required: pickedProps.required && !props.hideRequiredAsterisk
  }, pickedProps.label) : null, /*#__PURE__*/_react.default.createElement(_Select.default, (0, _extends2.default)({
    "data-isSelectComponent": 'true'
  }, pickedProps, {
    SelectDisplayProps: SelectDisplayProps,
    MenuProps: MenuProps,
    IconComponent: _commonIcons.IconArrowDown
  }), childrens), fieldHelperText ? /*#__PURE__*/_react.default.createElement(_core.FormHelperText, {
    "data-hrl-bo": "".concat(hrlBo, "-helper-text"),
    id: "".concat(hrlBo, "-helper-text"),
    error: fieldError
  }, fieldHelperText) : null);
}

Select.Option = _Option.default;
Select.GroupLine = _GroupLine.default;
Select.displayName = 'Select';
Select.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   * https://material-ui.com/api/select/#css
   */
  classes: _propTypes.default.object,

  /** If true, a value is displayed even if no items are selected. In order to display a meaningful value, a function should be passed to the renderValue prop which returns the value to be displayed when no items are selected. You can only use it when the native prop is false (default). */
  displayEmpty: _propTypes.default.bool,

  /** If true, value must be an array and the menu will support multiple selections. */
  multiple: _propTypes.default.bool,

  /** Render the selected value */
  renderValue: _propTypes.default.func,

  /** Callback function fired when a menu item is selected. */
  onChange: _propTypes.default.func,

  /** Callback fired when the component requests to be closed */
  onClose: _propTypes.default.func,

  /** Callback fired when the component requests to be opened */
  onOpen: _propTypes.default.func,

  /** Control select open state */
  open: _propTypes.default.bool,

  /** The input value */
  value: _propTypes.default.any,

  /** Label to display */
  label: _propTypes.default.string,

  /** Is required */
  required: _propTypes.default.bool,

  /** Is Disabled */
  disabled: _propTypes.default.bool,

  /** The id of the input element. Use this prop to make label and helperText accessible for screen readers. */
  id: _propTypes.default.string.isRequired,

  /** If true, show the select button - only for multiple selections. */
  showSelectButton: _propTypes.default.bool,

  /** select button label text. */
  selectButtonLabel: _propTypes.default.string,

  /**
   *
   */
  'data-hrl-bo': _propTypes.default.string,

  /**
   *
   */
  MenuClasses: _propTypes.default.string,

  /** If true, the label will not display the asterisk.  */
  hideRequiredAsterisk: _propTypes.default.bool,

  /** show ordered selected values on multi status */
  orderLabel: _propTypes.default.bool,

  /** show label in multi line */
  multilinelabel: _propTypes.default.bool,

  /** Set max height for dropdown */
  maxheight: _propTypes.default.string,

  /** use virtual list for use API and get big data  */
  virtuallist: _propTypes.default.bool,

  /** use defaultValue when you use virtual list and you want to set initial value  */
  defaultValue: _propTypes.default.string
};
Select.defaultProps = {
  id: "select".concat(Math.floor(Math.random() * 10000)),
  multiple: false,
  disabled: false,
  required: false,
  'data-hrl-bo': 'select',
  open: false,
  hideRequiredAsterisk: false,
  orderLabel: false,
  multilinelabel: false,
  maxheight: 'auto',
  virtuallist: false,
  defaultValue: -1
};
var _default = Select;
exports.default = _default;