"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.List = List;
exports.ListItem = ListItem;
exports.ListItemAvatar = ListItemAvatar;
exports.ListItemIcon = ListItemIcon;
exports.ListItemSecondaryAction = ListItemSecondaryAction;
exports.ListItemText = ListItemText;
exports.ListSubheader = ListSubheader;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@material-ui/core");

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function List(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  return /*#__PURE__*/_react.default.createElement(_core.List, props);
}

List.propTypes = {
  /** The component used for the root node. Either a string to use a DOM element or a component. */
  component: _propTypes.default.string,

  /** If true, compact vertical padding designed for keyboard and mouse input will be used for the list and list items. */
  dense: _propTypes.default.bool,

  /** If true, vertical padding will be removed from the list. */
  disablePadding: _propTypes.default.bool,

  /** The content of the subheader, normally ListSubheader. */
  subheader: _propTypes.default.node
};
List.defaultProps = {
  component: 'ul',
  dense: false,
  disablePadding: false
};

function ListItem(props) {
  return /*#__PURE__*/_react.default.createElement(_core.ListItem, props);
}

ListItem.propTypes = {
  /** Defines the align-items style property. */
  alignItems: _propTypes.default.oneOf(['center', 'flex-start']),

  /** If true, the list item will be focused during the first mount. Focus will also be triggered if the value changes from false to true */
  autoFocus: _propTypes.default.bool,

  /** If true, the list item will be a button */
  button: _propTypes.default.bool,

  /** The component used for the root node. Either a string to use a DOM element or a component. By default, it's a li when button is false and a div when button is true. */
  component: _propTypes.default.string,

  /** If true, compact vertical padding designed for keyboard and mouse input will be used. */
  dense: _propTypes.default.bool,

  /** If true, the list item will be disabled. */
  disabled: _propTypes.default.bool,

  /** If true, the left and right padding is removed. */
  disableGutters: _propTypes.default.bool,

  /** If true, a 1px light border is added to the bottom of the list item. */
  divider: _propTypes.default.bool,

  /** Use to apply selected styling. */
  selected: _propTypes.default.bool
};
ListItem.defaultProps = {
  alignItems: 'center',
  autoFocus: false,
  button: false,
  dense: false,
  disabled: false,
  disableGutters: false,
  divider: false,
  selected: false
};

function ListItemAvatar(props) {
  return /*#__PURE__*/_react.default.createElement(_core.ListItemAvatar, props);
}

ListItemAvatar.propTypes = {
  /** The content of the component – normally Avatar. */
  children: _propTypes.default.element,

  /** Override or extend the styles applied to the component. */
  classes: _propTypes.default.object
};

function ListItemIcon(props) {
  return /*#__PURE__*/_react.default.createElement(_core.ListItemIcon, props);
}

ListItemIcon.propTypes = {
  /** The content of the component – normally Avatar. */
  children: _propTypes.default.element,

  /** Override or extend the styles applied to the component. */
  classes: _propTypes.default.object
};

function ListItemSecondaryAction(props) {
  return /*#__PURE__*/_react.default.createElement(_core.ListItemSecondaryAction, props);
}

ListItemSecondaryAction.propTypes = {
  /** The content of the component – normally Avatar. */
  children: _propTypes.default.element,

  /** Override or extend the styles applied to the component. */
  classes: _propTypes.default.object
};

function ListItemText(props) {
  return /*#__PURE__*/_react.default.createElement(_core.ListItemText, props);
}

ListItemText.propTypes = {
  /** If true, the children will be indented. This should be used if there is no left avatar or left icon. */
  inset: _propTypes.default.bool,

  /** The main content element. */
  primary: _propTypes.default.node,

  /** The main content element. */
  secondary: _propTypes.default.node
};
ListItemText.defaultProps = {
  inset: false
};

function ListSubheader(props) {
  return /*#__PURE__*/_react.default.createElement(_core.ListSubheader, props);
}

ListSubheader.propTypes = {
  /** The color of the component. It supports those theme colors that make sense for this component. */
  color: _propTypes.default.oneOf(['default', 'primary', 'inherit']),

  /** The component used for the root node. Either a string to use a DOM element or a component. */
  component: _propTypes.default.string,

  /** If true, the List Subheader will not have gutters. */
  disableGutters: _propTypes.default.bool,

  /** If true, the List Subheader will not stick to the top during scroll. */
  disableSticky: _propTypes.default.bool,

  /** If true, the List Subheader will be indented. */
  inset: _propTypes.default.bool
};
ListSubheader.defaultProps = {
  color: 'default',
  component: 'li',
  disableGutters: false,
  disableSticky: false,
  inset: false
};