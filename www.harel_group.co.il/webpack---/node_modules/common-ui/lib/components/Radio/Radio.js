"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Radio = _interopRequireDefault(require("@material-ui/core/Radio"));

var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));

var _utils = require("../../utils");

var _RadioGroup = _interopRequireDefault(require("../RadioGroup"));

var _commonIcons = require("common-icons");

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Radio(props) {
  var _objectSpread2;

  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var radioProps = (0, _utils.pick)(['checked', 'color', 'disabled', 'id', 'inputProps', 'inputRef', 'name', 'onChange', 'size', 'value'], props);
  var dataHrlBo = props['data-hrl-bo'] ? props['data-hrl-bo'] : props.id;
  var formControlProps = (0, _utils.pick)(['label', 'labelPlacement'], props);

  var FormControlLabelProps = _objectSpread(_objectSpread({}, props.FormControlLabelProps), {}, (_objectSpread2 = {}, (0, _defineProperty2.default)(_objectSpread2, 'data-hrl-bo', 'radio-label-' + dataHrlBo), (0, _defineProperty2.default)(_objectSpread2, "for", props.id), _objectSpread2));

  var attrsProps = (0, _utils.pick)(['data-hrl-bo'], props);

  var handleChange = function handleChange(e) {
    if (props.onChange) props.onChange(e); // setCheckedOption(e.target.value);

    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onChange(clonedEvent);
    }
  };

  var handleBlur = function handleBlur(e) {
    if (props.onBlur) props.onBlur(e);

    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onBlur(clonedEvent);
    }
  };

  var rd = /*#__PURE__*/_react.default.createElement(_Radio.default, (0, _extends2.default)({
    disableRipple: true
  }, radioProps, {
    inputProps: attrsProps,
    onChange: handleChange,
    onBlur: handleBlur,
    id: props.id,
    icon: /*#__PURE__*/_react.default.createElement(_commonIcons.IconRadioButtonUnchecked, null)
  }));

  if (props.children) {
    return /*#__PURE__*/_react.default.createElement(_FormControlLabel.default, (0, _extends2.default)({
      control: rd
    }, formControlProps, FormControlLabelProps, {
      label: props.children
    }));
  }

  if (formControlProps.label && formControlProps.label.length) {
    return /*#__PURE__*/_react.default.createElement(_FormControlLabel.default, (0, _extends2.default)({
      control: rd
    }, formControlProps, FormControlLabelProps));
  }

  return rd;
}

_RadioGroup.default.displayName = 'RadioGroup';
Radio.Group = _RadioGroup.default;
Radio.displayName = 'Radio';
Radio.propTypes = {
  /**
   * Is Radio button checked
   */
  checked: _propTypes.default.bool,
  color: _propTypes.default.oneOf(['primary', 'secondary']),
  disabled: _propTypes.default.bool,
  id: _propTypes.default.string,
  inputProps: _propTypes.default.arrayOf(_propTypes.default.shape(_propTypes.default.object)),
  inputRef: _propTypes.default.oneOf([_propTypes.default.func, _propTypes.default.object]),
  name: _propTypes.default.string,
  onChange: _propTypes.default.func,
  value: _propTypes.default.any,
  label: _propTypes.default.node,

  /** The content of the radio. Component or html */
  children: _propTypes.default.node,
  labelPlacement: _propTypes.default.oneOf(['top', 'start', 'bottom', 'end']),

  /** The size of the radio. small is equivalent to the dense radio styling. */
  size: _propTypes.default.oneOf(['medium', 'small']),

  /** */
  'data-hrl-bo': _propTypes.default.string
};
Radio.defaultProps = {
  checked: false,
  value: '',
  size: 'medium',
  label: '',
  'data-hrl-bo': 'radio'
};
var _default = Radio;
exports.default = _default;