"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _RadioGroup = _interopRequireDefault(require("@material-ui/core/RadioGroup"));

var _utils = require("../../utils");

var _core = require("@material-ui/core");

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function RadioGroup(props) {
  var _ref, _props$value;

  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var groupProps = (0, _utils.pick)(['color', 'name', 'children', 'defaultValue', 'onChange', 'data-hrl-bo', 'value', 'id', 'required', 'aria-labelledby'], props); // eslint-disable-next-line react/prop-types

  var value = (_ref = (_props$value = props.value) !== null && _props$value !== void 0 ? _props$value : props.field.value) !== null && _ref !== void 0 ? _ref : null;

  var _useState = (0, _react.useState)(value || null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      checkedOption = _useState2[0],
      setCheckedOption = _useState2[1];

  var label = props.label;
  var fieldError = props.error;
  var fieldHelperText = props.helperText;
  /* eslint-disable react/prop-types */

  if (props.form) {
    fieldError = props.form.errors[props.field.name];
    fieldHelperText = props.form.errors[props.field.name];
  }
  /* eslint-enable react/prop-types */


  (0, _react.useEffect)(function () {
    setCheckedOption(value);
  }, [value]);
  (0, _react.useEffect)(function () {
    if (value) setCheckedOption(value);
  }, []);

  var handleChange = function handleChange(e) {
    if (props.onChange) props.onChange(e);
    setCheckedOption(e.target.value);
    /* eslint-disable react/prop-types */

    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onChange(clonedEvent);
    }
    /* eslint-enable react/prop-types */

  };

  var dataHrlBo = props['data-hrl-bo'];
  var id = props['id'];

  var handleBlur = function handleBlur(e) {
    if (props.onBlur) props.onBlur(e);
    /* eslint-disable react/prop-types */

    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onBlur(clonedEvent);
    }
    /* eslint-enable react/prop-types */

  };

  var options = props.children.map(function (child, i) {
    return /*#__PURE__*/(0, _react.cloneElement)(child, {
      key: i,
      checked: checkedOption === child.props.value,
      onChange: handleChange,
      'data-hrl-bo': "".concat(dataHrlBo, "-radio-").concat(i),
      id: "".concat(id, "-radio-").concat(i)
    });
  });
  return /*#__PURE__*/_react.default.createElement(_core.FormControl, {
    component: "fieldset",
    className: "MuiRadioGroup-root",
    "data-hrl-bo": "".concat(dataHrlBo, "-label")
  }, label && label.length && /*#__PURE__*/_react.default.createElement(_core.FormLabel, {
    id: id,
    component: "legend",
    required: props.required && !props.hideRequiredAsterisk
  }, label), /*#__PURE__*/_react.default.createElement(_RadioGroup.default, (0, _extends2.default)({}, groupProps, {
    role: "radiogroup",
    "aria-required": props.required,
    "aria-labelledby": props['aria-labelledby'] !== '' ? props['aria-labelledby'] : props.id,
    onChange: handleChange,
    onBlur: handleBlur
  }), options), fieldHelperText && !fieldError ? /*#__PURE__*/_react.default.createElement(_core.FormHelperText, null, fieldHelperText) : null, fieldError ? /*#__PURE__*/_react.default.createElement(_core.FormHelperText, {
    error: true
  }, fieldError) : null);
}

RadioGroup.propTypes = {
  /** Unique element id */
  id: _propTypes.default.string,

  /** The color of the component. It supports those theme colors that make sense for this component */
  color: _propTypes.default.oneOf(['primary', 'secondary']),

  /** The content of the component */
  children: _propTypes.default.arrayOf(_propTypes.default.shape({
    label: _propTypes.default.node,
    value: _propTypes.default.string
  })).isRequired,

  /** The position of the label */
  labelPlacement: _propTypes.default.oneOf(['top', 'start', 'bottom', 'end']),

  /** The name used to reference the value of the control */
  name: _propTypes.default.string,

  /** Callback fired when a radio button is selected */
  onChange: _propTypes.default.func,

  /** Value of the selected radio button. The DOM API casts this to a string */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.any]),

  /** The default input element value. Use when the component is not controlled */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.any]),

  /** If true, the input element will be required. */
  required: _propTypes.default.bool,

  /** Function to be called when element was blur. */
  onBlur: _propTypes.default.func,

  /** Helper text to appear under the input. */
  helperText: _propTypes.default.node,

  /**The label content. */
  label: _propTypes.default.node,

  /** Error message. */
  error: _propTypes.default.string,

  /** */
  'data-hrl-bo': _propTypes.default.string,
  'aria-labelledby': _propTypes.default.string,

  /** If true, the label will not display the asterisk.  */
  hideRequiredAsterisk: _propTypes.default.bool
};
RadioGroup.defaultProps = {
  color: 'primary',
  'data-hrl-bo': 'Radiogroup',
  required: null,
  'aria-labelledby': '',
  hideRequiredAsterisk: false
};
var _default = RadioGroup;
exports.default = _default;