"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _index = require("../../index");

var _clsx2 = _interopRequireDefault(require("clsx"));

var _InfoBlock = _interopRequireDefault(require("./InfoBlock.style"));

var _commonIcons = require("common-icons");

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

var _excluded = ["label", "content", "type", "children", "showClose", "datahrlbo"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InfoBlock = function InfoBlock(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var classes = (0, _InfoBlock.default)(props);

  var _useState = (0, _react.useState)(true),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var label = props.label,
      content = props.content,
      type = props.type,
      children = props.children,
      showClose = props.showClose,
      datahrlbo = props.datahrlbo,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var hrlbo = datahrlbo;
  var infoContent = content ? content : children;
  var infoTitle = label ? /*#__PURE__*/_react.default.createElement(_index.Typography, {
    variant: "h4"
  }, label) : null;
  var close = showClose ? /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    className: classes.close,
    key: "close",
    "aria-label": "\u05E1\u05D2\u05D5\u05E8",
    onClick: function onClick() {
      return setIsOpen(false);
    }
  }, /*#__PURE__*/_react.default.createElement(_commonIcons.IconX, null)) : null;
  return isOpen ? /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    className: (0, _clsx2.default)(classes.root, (0, _defineProperty2.default)({}, classes[type], type))
  }, restProps, {
    "data-hrl-bo": "".concat(hrlbo, "infoBlock")
  }), close, infoTitle, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.mainText,
    "data-hrl-bo": "".concat(hrlbo, "infoBlockContent")
  }, infoContent)) : null;
};

InfoBlock.propTypes = {
  /**
   * Info block Title
   */
  label: _propTypes.default.string,

  /**
   * Content text to display.
   * For more complex message pass as children
   */
  content: _propTypes.default.string,

  /**
   * Type of info block
   */
  type: _propTypes.default.oneOf(['error', 'info', 'success', 'warning']),

  /**
   * add the ability to close block using the close button
   */
  showClose: _propTypes.default.bool,

  /** The content of the component*/
  children: _propTypes.default.node,
  datahrlbo: _propTypes.default.string
};
InfoBlock.defaultProps = {
  showClose: false
};
var _default = InfoBlock;
exports.default = _default;