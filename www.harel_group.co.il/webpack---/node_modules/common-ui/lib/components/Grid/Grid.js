"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _utils = require("../../utils");

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Grid(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var pickedProps = (0, _utils.pick)(['alignContent', 'alignItems', 'children', 'classes', 'container', 'direction', 'item', 'justify', 'lg', 'md', 'sm', 'spacing', 'wrap', 'xl', 'xs', 'style', 'data-hrl-bo', 'role', 'aria-label', 'aria-describedby', 'aria-labelledby', 'id'], props); // set grid as container if not defined as container and item

  if (typeof pickedProps.container == 'undefined' && typeof pickedProps.item == 'undefined') {
    pickedProps.container = true;
  }

  if (pickedProps.container && typeof pickedProps.spacing == 'undefined') {
    pickedProps.spacing = 3;
  }

  var children = pickedProps.children;
  return /*#__PURE__*/_react.default.createElement(_Grid.default, pickedProps, children);
}

Grid.propTypes = {
  /** Defines the align-content style property. It's applied for all screen sizes */
  alignContent: _propTypes.default.oneOf(['stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around']),

  /** Defines the align-items style property. It's applied for all screen sizes */
  alignItems: _propTypes.default.oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),

  /** The content of the component. */
  children: _propTypes.default.node,

  /** Override or extend the styles applied to the component. See CSS API below for more details */
  classes: _propTypes.default.object,

  /** The component used for the root node. Either a string to use a DOM element or a component */
  component: _propTypes.default.elementType,

  /** If true, the component will have the flex container behavior. You should be wrapping items with a container */
  container: _propTypes.default.bool,

  /** Defines the flex-direction style property. It is applied for all screen sizes */
  direction: _propTypes.default.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),

  /** If true, the component will have the flex item behavior. You should be wrapping items with a container */
  item: _propTypes.default.bool,

  /** Defines the justify-content style property. It is applied for all screen sizes */
  justify: _propTypes.default.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']),

  /** Defines the number of grids the component is going to use. It's applied for the lg breakpoint and wider screens if not overridden */
  lg: _propTypes.default.oneOf(['auto', false, true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

  /** Defines the number of grids the component is going to use. It's applied for the md breakpoint and wider screens if not overridden */
  md: _propTypes.default.oneOf(['auto', false, true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

  /** Defines the number of grids the component is going to use. It's applied for the sm breakpoint and wider screens if not overridden */
  sm: _propTypes.default.oneOf(['auto', false, true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

  /** Defines the number of grids the component is going to use. It's applied for the xl breakpoint and wider screens */
  xl: _propTypes.default.oneOf(['auto', false, true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

  /** Defines the number of grids the component is going to use. It's applied for all the screen sizes with the lowest priority */
  xs: _propTypes.default.oneOf(['auto', false, true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

  /**    Defines the space between the type item component. It can only be used on a type container component */
  spacing: _propTypes.default.oneOf(['auto', false, true, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

  /** Defines the flex-wrap style property. It's applied for all screen sizes */
  wrap: _propTypes.default.oneOf(['nowrap', 'wrap', 'wrap-reverse']),

  /**    If true, it sets min-width: 0 on the item. Refer to the limitations section of the documentation to better understand the use case */
  zeroMinWidth: _propTypes.default.bool,
  'data-hrl-bo': _propTypes.default.string,

  /**  Add role */
  role: _propTypes.default.string,

  /**  Add aria-label */
  'aria-label': _propTypes.default.string,

  /**  Add aria-describedby */
  'aria-describedby': _propTypes.default.string,

  /**  Add aria-labelledby */
  ' aria-labelledby': _propTypes.default.string,

  /**  Add id */
  id: _propTypes.default.string
};
Grid.defaultProps = {
  component: 'div',
  container: false,
  item: false,
  zeroMinWidth: false,
  id: null
};
var _default = Grid;
exports.default = _default;