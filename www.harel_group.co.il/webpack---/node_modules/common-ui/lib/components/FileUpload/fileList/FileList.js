"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _FileItem = _interopRequireDefault(require("../fileItem/FileItem"));

var _FileSpecificationPropTypes = require("../fileSpecification/FileSpecificationPropTypes");

var _constants = require("../constants/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var FileList = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(FileList, _Component);

  var _super = _createSuper(FileList);

  function FileList(props) {
    var _this;

    (0, _classCallCheck2.default)(this, FileList);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateTypesWhenHavingUniqueTags", function (fileId, uniqueTags) {
      var fileObject = _this.filesWithUniqueTags.find(function (file) {
        return file.fileId === fileId;
      });

      if (uniqueTags.length !== fileObject.uniqueKeys.length) {
        if (fileObject && fileObject.uniqueKeys && fileObject.uniqueKeys.length > 0) {
          var uniqueTagsNumbersArray = [];

          var _iterator = _createForOfIteratorHelper(uniqueTags),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var tag = _step.value;
              uniqueTagsNumbersArray.push(tag.uniqueKey);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          var removedUniqueTagsTypeCodes = fileObject.uniqueKeys.filter(function (uniqueKey) {
            return uniqueTagsNumbersArray.indexOf(uniqueKey) === -1;
          });
          removedUniqueTagsTypeCodes.forEach(function (uniqueKey) {
            return _this.removeUniqueTaggedFile(fileId, uniqueKey);
          });

          var restoredTypesArr = _this.props.types.filter(function (type) {
            return removedUniqueTagsTypeCodes.indexOf(type.uniqueKey) !== -1;
          });

          var mergedTypesNoDuplications = _this.mergeArraysAndRemoveDuplications(_this.state.types, restoredTypesArr);

          _this.setState({
            types: mergedTypesNoDuplications
          });
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateTypesWhenNoUniqueTags", function (fileId) {
      var fileObject = _this.filesWithUniqueTags.find(function (file) {
        return file.fileId === fileId;
      });

      if (fileObject && fileObject.uniqueKeys && fileObject.uniqueKeys.length > 0) {
        var restoredTypesArr = _this.props.types.filter(function (type) {
          return fileObject.uniqueKeys.indexOf(type.uniqueKey) !== -1;
        });

        fileObject.uniqueKeys.forEach(function (uniqueKey) {
          return _this.removeUniqueTaggedFile(fileId, uniqueKey);
        });

        var mergedTypesNoDuplications = _this.mergeArraysAndRemoveDuplications(_this.state.types, restoredTypesArr);

        _this.setState({
          types: mergedTypesNoDuplications
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateTypes", function (fileId) {
      var fileObject = _this.filesWithUniqueTags.find(function (file) {
        return file.fileId === fileId;
      });

      if (fileObject && fileObject.uniqueKeys && fileObject.uniqueKeys.length > 0) {
        var restoredTypesArr = _this.props.types.filter(function (type) {
          return fileObject.uniqueKeys.indexOf(type.uniqueKey) !== -1;
        });

        fileObject.uniqueKeys.forEach(function (uniqueKey) {
          return _this.removeUniqueTaggedFile(fileId, uniqueKey);
        });

        var mergedTypesNoDuplications = _this.mergeArraysAndRemoveDuplications(_this.state.types, restoredTypesArr);

        _this.setState({
          types: mergedTypesNoDuplications
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mergeArraysAndRemoveDuplications", function (initialArray, additionArray) {
      var mergedTypes = [].concat((0, _toConsumableArray2.default)(initialArray), (0, _toConsumableArray2.default)(additionArray));
      return mergedTypes.filter(function (item, pos) {
        return mergedTypes.indexOf(item) === pos;
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "addUniqueTaggedFile", function (fileId, uniqueKey) {
      var currentFileObject = _this.filesWithUniqueTags.find(function (file) {
        return file.fileId === fileId;
      });

      var currentIndex = _this.filesWithUniqueTags.findIndex(function (file) {
        return file.fileId === fileId;
      });

      if (currentFileObject) {
        if (currentFileObject.uniqueKeys.indexOf(uniqueKey) === -1) {
          currentFileObject.uniqueKeys.push(uniqueKey);
        }

        _this.filesWithUniqueTags[currentIndex] = currentFileObject;
      } else {
        var uniqueKeys = [uniqueKey];
        var fileWithUniqueTag = {
          fileId: fileId,
          uniqueKeys: uniqueKeys
        };

        _this.filesWithUniqueTags.push(fileWithUniqueTag);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "removeUniqueTaggedFile", function (fileId, uniqueKey) {
      var currentFileObject = _this.filesWithUniqueTags.find(function (file) {
        return file.fileId === fileId;
      });

      var currentIndex = _this.filesWithUniqueTags.findIndex(function (file) {
        return file.fileId === fileId;
      });

      if (currentFileObject) {
        var uniqueKeys = currentFileObject.uniqueKeys;
        var filteredUniqueKeys = uniqueKeys.filter(function (code) {
          return code !== uniqueKey;
        });

        if (filteredUniqueKeys.length !== 0) {
          currentFileObject.uniqueKeys = filteredUniqueKeys;
          _this.filesWithUniqueTags[currentIndex] = currentFileObject;
        } else {
          _this.filesWithUniqueTags.splice(currentIndex, 1);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFileDeletion", function (types, index, fileId) {
      _this.props.deleteFile(index, fileId);

      var includesUniqueTags = _this.filesWithUniqueTags.some(function (file) {
        return file.fileId === fileId;
      });

      if (includesUniqueTags) {
        _this.updateTypes(fileId);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFileUiProgressCompleted", function (fileId) {
      _this.props.updateFile(fileId);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isEmpty", function (file) {
      return !(Object.keys(file).length === 0 && file.constructor === Object);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderFiles", function () {
      var types = _this.state.types;
      return _this.props.files.map(function (file, index) {
        return _this.isEmpty(file) ? /*#__PURE__*/_react.default.createElement(_FileItem.default, {
          hiddenFileType: _this.props.hiddenFileType,
          key: index,
          id: index,
          fileId: file.id,
          name: file.name,
          size: file.size,
          hasError: file.hasError,
          extension: file.extension,
          errorMessage: file.errorMessage,
          progress: file.progress,
          types: types,
          noTagsError: file.noTagsError ? file.noTagsError : false,
          isDisabled: _this.props.isDisabled,
          selectedOption: file.tags,
          onFileTypeSelect: function onFileTypeSelect() {
            var _this2;

            return (_this2 = _this).onFileTypeSelect.apply(_this2, arguments);
          },
          onDelete: function onDelete(types, index, fileId) {
            return _this.handleFileDeletion(types, index, fileId);
          },
          setUiProgressCompleted: _this.handleFileUiProgressCompleted
        }) : /*#__PURE__*/_react.default.createElement("div", {
          key: index
        });
      });
    });
    _this.filesWithUniqueTags = [];
    _this.state = {
      types: (0, _toConsumableArray2.default)(props.types)
    };
    return _this;
  }

  (0, _createClass2.default)(FileList, [{
    key: "onFileTypeSelect",
    value: function onFileTypeSelect(types, fileId, action) {
      var _this3 = this;

      this.props.addTagsToFile(types, fileId);
      var includesUniqueTags = false;

      switch (action) {
        case _constants.ADDED_A_TAG:
          var typesFromState = (0, _toConsumableArray2.default)(this.state.types);

          var _loop = function _loop(i) {
            if (types[i].isUniqueTag) {
              var uniqueTypeIndex = typesFromState.findIndex(function (item) {
                return item.uniqueKey === types[i].uniqueKey;
              });

              if (uniqueTypeIndex !== -1) {
                _this3.addUniqueTaggedFile(fileId, types[i].uniqueKey);

                typesFromState.splice(uniqueTypeIndex, 1);

                _this3.setState({
                  types: typesFromState
                });
              }
            }
          };

          for (var i = 0; i < types.length; i++) {
            _loop(i);
          }

          break;

        case _constants.REMOVED_TAG:
          includesUniqueTags = this.filesWithUniqueTags.some(function (file) {
            return file.fileId === fileId;
          });

          if (includesUniqueTags) {
            if (types && types.length !== 0) {
              var uniqueTags = types.filter(function (type) {
                return type.isUniqueTag === true;
              });

              if (uniqueTags.length > 0) {
                this.updateTypesWhenHavingUniqueTags(fileId, uniqueTags);
              } else {
                this.updateTypesWhenNoUniqueTags(fileId);
              }
            } else {
              this.updateTypes(fileId);
            }
          }

          break;

        case _constants.CLEARED_ALL_TAGS:
          includesUniqueTags = this.filesWithUniqueTags.some(function (file) {
            return file.fileId === fileId;
          });

          if (includesUniqueTags) {
            this.updateTypes(fileId);
          }

      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, this.props.files.length > 0 && /*#__PURE__*/_react.default.createElement("h4", null, this.props.title), /*#__PURE__*/_react.default.createElement("div", null, this.renderFiles()));
    }
  }]);
  return FileList;
}(_react.Component);

var _default = FileList;
exports.default = _default;
FileList.propTypes = {
  title: _propTypes.default.string,
  files: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    size: _propTypes.default.number,
    hasError: _propTypes.default.bool
  })),
  'data-hrl-bo': _propTypes.default.string,
  types: _propTypes.default.arrayOf(_FileSpecificationPropTypes.FILE_SPECIFICATION_PROP_TYPE),
  updateFile: _propTypes.default.func,
  deleteFile: _propTypes.default.func,
  addTagsToFile: _propTypes.default.func,
  hiddenFileType: _propTypes.default.bool,
  isDisabled: _propTypes.default.bool
};
FileList.defaultProps = {
  files: [],
  types: []
};