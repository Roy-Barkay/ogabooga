"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var customStyles = {
  option: function option(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      padding: '4px 20px 4px 8px',
      position: 'relative',
      lineHeight: '1.1',
      cursor: 'pointer',
      '&:hover': {
        backgroundColor: 'rgba(0,63,128,0.1)'
      },
      color: state.isSelected ? '#003f80' : ''
    });
  },
  indicatorSeparator: function indicatorSeparator(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      width: '0',
      border: '0'
    });
  },
  // clearIndicator : testStyle,
  container: function container(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      position: 'relative',
      display: 'block',
      maxWidth: '100%',
      width: '100%',
      '-webkit-tap-highlight-color': 'rgba(255,255,255,0)',
      fontWeight: 'normal',
      borderRadius: '0'
    });
  },
  control: function control(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      padding: '2px 6px 2px 0px',
      border: '1px solid rgba(0,63,128,0.3)',
      borderRadius: '0',
      background: state.isDisabled ? '#f7f7f7' : '#fff',
      minHeight: '40px',
      position: 'relative',
      cursor: 'pointer',
      boxShadow: '0',
      borderColor: state.selectProps.noTagsError ? '#c80b0b !important' : '',
      color: state.selectProps.noTagsError ? '#c80b0b !important' : ''
    });
  },
  dropdownIndicator: function dropdownIndicator(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: '#006cb2',
      display: state.isDisabled ? 'none' : ''
    });
  },
  // group : testStyle,
  // groupHeading : testStyle,
  // indicatorsContainer : testStyle,
  // indicatorSeparator : testStyle,
  // input : testStyle,
  // loadingIndicator : testStyle,
  // loadingMessage : testStyle,
  menu: function menu(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      border: '1px solid #aaa',
      borderTop: '0',
      background: '#fff',
      boxShadow: '0 4px 5px rgba(0,0,0,0.15)',
      marginTop: '0'
    });
  },
  menuList: function menuList(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: '#585858',
      backgroundColor: '#F6F6F6'
    });
  },
  // menuPortal : testStyle,
  multiValue: function multiValue(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      fontFamily: '"mfw_protocolharel", Arial',
      lineHeight: '1.5',
      border: '0 none',
      color: '#006cb2',
      padding: '4px 4px 4px 4px',
      // paddingLeft: '20px',
      position: 'relative',
      margin: '2px',
      backgroundColor: 'rgba(0,63,128,0.08)',
      cursor: 'pointer'
    });
  },
  multiValueLabel: function multiValueLabel(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: '#006cb2'
    });
  },
  multiValueRemove: function multiValueRemove(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      '&:hover': {
        color: '#006cb2',
        backgroundColor: 'rgba(0,63,128,0.08)'
      },
      display: state.isDisabled ? 'none' : ''
    });
  } // noOptionsMessage : testStyle,
  // option : testStyle,
  // placeholder : testStyle,
  // singleValue : testStyle,
  // valueContainer : testStyle,

};
var _default = customStyles;
exports.default = _default;