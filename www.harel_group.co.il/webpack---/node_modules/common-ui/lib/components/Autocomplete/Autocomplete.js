"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof3 = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Autocomplete;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _Autocomplete = _interopRequireWildcard(require("@material-ui/lab/Autocomplete"));

var _formik = require("formik");

var _index = require("../../index");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../../utils");

var _core = require("@material-ui/core");

var _Autocomplete2 = _interopRequireDefault(require("./Autocomplete.style"));

var _misc = require("../../utils/misc");

var _commonIcons = require("common-icons");

var _printVersion = _interopRequireDefault(require("../../utils/printVersion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Autocomplete(props) {
  (0, _react.useEffect)(function () {
    return (0, _printVersion.default)();
  }, []);
  var classes = (0, _Autocomplete2.default)();
  var hrlBo = props['data-hrl-bo'];
  var defaultProps = (0, _utils.pick)(['autoFocus', 'hebrewCharsOnly', 'getOptionSelected', 'focused', 'options', 'onChange', 'getOptionLabel', 'getOptionDisabled', 'disableCloseOnSelect', 'label', 'freeSolo', 'groupBy', 'autoHighlight', 'autoSelect', 'clearOnEscape', 'debug', 'limitTags', 'disableClearable', 'disabled', 'disableListWrap', 'disablePortal', 'filterSelectedOptions', 'includeInputInList', 'ListboxComponent', 'loading', 'loadingText', 'noOptionsText', 'classes', 'className', 'defaultValue', 'filterOptions', 'multiple', 'onClose', 'onOpen', 'onInputChange', 'open', 'id', 'autoComplete', 'value', 'required', 'field', 'form', 'name', 'blurOnSelect'], props);
  var textFieldProps = (0, _utils.pick)(['inputProps', 'InputProps', 'maxLength', 'type', 'mask'], props);
  var filterOptions = (0, _Autocomplete.createFilterOptions)({
    stringify: function stringify(option) {
      return "".concat(option.label, " - ").concat(option.value);
    },
    matchFrom: props.isMatchFromStart ? 'start' : 'any'
  });

  var _React$useState = _react.default.useState(props.open),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      open = _React$useState2[0],
      setOpen = _React$useState2[1];

  var _React$useState3 = _react.default.useState(!props.value),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      isHideClearButton = _React$useState4[0],
      setIsHideClearButton = _React$useState4[1];

  var FormHelperTextProps = Object.assign({}, hrlBo ? {
    'data-hrl-bo': hrlBo + '_helper-text'
  } : null);

  var handlerOptionLabel = function handlerOptionLabel(x) {
    if ((0, _typeof2.default)(x) === 'object' && x !== null) {
      return x.label;
    }

    if (typeof x === 'string' && x !== null) {
      var res = props.options.find(function (y) {
        return y.value === x;
      });
      if (res && res.label) return res.label;
      return x;
    }

    return null;
  };

  var hasError = props.error ? true : false;
  var fieldHelperText = props.helperText;
  /* eslint-disable react/prop-types */

  if (props.form) {
    var fieldName = props.field.name;
    var touched = (0, _formik.getIn)(props.form.touched, fieldName);
    var fieldError = (0, _formik.getIn)(props.form.errors, fieldName);
    hasError = touched && fieldError ? true : false;
    fieldHelperText = touched && fieldError ? fieldError : defaultProps.helperText;
  }
  /* eslint-enable react/prop-types */


  textFieldProps.InputProps = Object.assign(textFieldProps.InputProps || {}, // eslint-disable-next-line react/prop-types
  textFieldProps.type ? {
    type: props.type
  } : {});
  textFieldProps.inputProps = Object.assign(textFieldProps.inputProps || {}, hrlBo && {
    'data-hrl-bo': "".concat(hrlBo, "_input")
  }, textFieldProps.maxLength && {
    maxLength: textFieldProps.maxLength
  }, fieldHelperText && {
    'aria-describedby': "".concat(props.id, "-helper-text")
  }, {
    'aria-required': props.invisibleRequired ? props.invisibleRequired : props.required,
    'aria-invalid': hasError,
    'aria-expanded': open,
    'aria-labelledby': "".concat(hrlBo, "-label"),
    'aria-controls': "".concat(hrlBo, "-listbox")
  });
  textFieldProps.InputLabelProps = Object.assign({}, {
    'data-hrl-bo': hrlBo + '-label'
  }, {
    id: hrlBo + '-label'
  }, props.required && props.hideRequiredAsterisk && {
    required: false
  });

  var handleChange = function handleChange(e, inputValue, reason) {
    var eventData = (0, _misc.getEventData)(defaultProps.name, inputValue);
    if (defaultProps.onChange) defaultProps.onChange(eventData, inputValue, reason);
    /* eslint-disable react/prop-types */

    if (props.form) {
      defaultProps.form.setFieldValue(props.field.name, inputValue);
    }
    /* eslint-enable react/prop-types */

  };

  var handleClose = function handleClose(e, reason) {
    if (props.onBlur) props.onBlur(e);
    if (props.onClose) props.onClose(e, reason);
    /* eslint-disable react/prop-types */

    if (props.form) {
      var clonedEvent = Object.assign({}, e);
      clonedEvent.target.name = props.field.name;
      props.field.onBlur(clonedEvent);
    }
    /* eslint-enable react/prop-types */


    setOpen(false);
  };

  var handleOpen = function handleOpen(e) {
    if (props.onOpen) props.onOpen(e);
    setOpen(true);
  };

  var onInputChange = function onInputChange(e, value) {
    var eventData = (0, _misc.getEventData)(defaultProps.name, value);
    props.onInputChange && props.onInputChange(eventData, value);
    setIsHideClearButton(!value);
  };

  _react.default.useEffect(function () {
    setOpen(props.open);
  }, [props.open]);

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root,
    "data-hrl-bo": "".concat(hrlBo, "-MainDiv-autoComplete"),
    id: props.id,
    "data-hrl-is-in-progress": props['data-hrl-is-in-progress']
  }, /*#__PURE__*/_react.default.createElement(_Autocomplete.default, (0, _extends2.default)({}, defaultProps, {
    classes: _objectSpread({
      endAdornment: classes.endAdornment
    }, defaultProps.classes),
    role: null,
    "aria-disabled": props.disabled,
    onInputChange: onInputChange,
    onChange: handleChange,
    onOpen: handleOpen,
    open: open,
    getOptionSelected: defaultProps.getOptionSelected,
    filterOptions: props.filterOptions || filterOptions,
    onClose: handleClose,
    loading: props.loading,
    popupIcon: props.popupIcon ? props.popupIcon : /*#__PURE__*/_react.default.createElement(_commonIcons.IconArrowDown, {
      className: classes.popupIconArrowDown
    }),
    getOptionLabel: handlerOptionLabel,
    autoComplete: props.autoComplete,
    freeSolo: props.freeSolo || props.allowFreeText,
    blurOnSelect: props.blurOnSelect,
    ListboxProps: {
      'aria-labelledby': "".concat(hrlBo, "-label"),
      role: 'listbox',
      id: "".concat(hrlBo, "-listbox")
    },
    noOptionsText: /*#__PURE__*/_react.default.createElement("div", {
      role: 'alert'
    }, props.noOptionsText),
    disableClearable: props.disableClearable || isHideClearButton,
    renderInput: props.renderInput ? props.renderInput : function (params) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: classes.container
      }, /*#__PURE__*/_react.default.createElement(_index.TextField, (0, _extends2.default)({}, params, {
        "data-hrl-bo": hrlBo,
        autoFocus: defaultProps.autoFocus,
        focused: defaultProps.focused,
        FormHelperTextProps: FormHelperTextProps,
        error: hasError,
        helperText: fieldHelperText,
        required: props.required,
        label: props.label,
        fullWidth: true,
        InputLabelProps: textFieldProps.InputLabelProps,
        inputProps: _objectSpread(_objectSpread(_objectSpread({}, params.inputProps), textFieldProps.inputProps), {}, {
          role: props.role,
          style: {
            marginLeft: '10px'
          }
          /*title: props?.value?.label*/

        }),
        InputProps: _objectSpread(_objectSpread(_objectSpread({}, params.InputProps), textFieldProps.InputProps), {}, {
          endAdornment: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, props.loading ? /*#__PURE__*/_react.default.createElement(_core.CircularProgress, {
            color: "inherit",
            size: 20
          }) : null, params.InputProps.endAdornment)
        })
      })));
    }
  })));
}

Autocomplete.propTypes = {
  /**
   *    If true, the portion of the selected suggestion that has not been typed by the user, known as the completion string, appears inline after the input cursor in the textbox. The inline completion string is visually highlighted and has a selected state.
   */
  autoComplete: _propTypes.default.bool,

  /**
   * If true, the first option is automatically highlighted.
   */
  autoHighlight: _propTypes.default.bool,

  /**
   * If true, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input.
   */
  autoSelect: _propTypes.default.bool,

  /**
   * Controls how an option is converted into a string so that it can be matched against the input text fragment.
   */
  filterOptions: _propTypes.default.shape({
    stringify: _propTypes.default.func
  }),

  /**
   * If true, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input.
   autoSelect: PropTypes.bool,
   /**
   * Override or extend the styles applied to the component. See CSS API below for more details.
   */
  classes: _propTypes.default.object,

  /**
   *    If true, clear all values when the user presses escape and the popup is closed.
   */
  clearOnEscape: _propTypes.default.bool,

  /**
   * If true, the popup will ignore the blur event if the input if filled. You can inspect the popup markup with your browser tools. Consider this option when you need to customize the component.
   */
  debug: _propTypes.default.bool,

  /**
   * The default input value. Use when the component is not controlled.
   */
  defaultValue: _propTypes.default.any,

  /**
   * If true, the input can't be cleared.
   */
  disableClearable: _propTypes.default.bool,

  /**
   * If true, the popup won't close when a value is selected.
   */
  disableCloseOnSelect: _propTypes.default.bool,

  /**
   * If true, the input will be disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * If true, the list box in the popup will not wrap focus.
   */
  disableListWrap: _propTypes.default.bool,

  /**
   * Disable the portal behavior. The children stay within it's parent DOM hierarchy.
   */
  disablePortal: _propTypes.default.bool,

  /**
   * If true, hide the selected options from the list box.
   */
  filterSelectedOptions: _propTypes.default.bool,

  /**
   * If true, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
   */
  freeSolo: _propTypes.default.bool,

  /**
   * Used to determine the disabled state for a given option.
   */
  getOptionDisabled: _propTypes.default.func,

  /**
   * Used to determine the string value for a given option. It's used to fill the input (and the list box options if renderOption is not provided).
   */
  getOptionLabel: _propTypes.default.func,

  /**
   * If provided, the options will be grouped under the returned string. The groupBy value is also used as the text for group headings when renderGroup is not provided.
   * Signature:
   * function(options: any) => string
   * options: The option to group.
   */
  groupBy: _propTypes.default.func,

  /**
   * If true, the highlight can move to the input.
   */
  includeInputInList: _propTypes.default.bool,

  /**
   * The component used to render the listbox.
   */
  ListboxComponent: _propTypes.default.elementType,

  /**
   *    If true, the component is in a loading state.
   */
  loading: _propTypes.default.bool,

  /**
   * Text to display when in a loading state.
   */
  loadingText: _propTypes.default.node,

  /**
   * If true, value must be an array and the menu will support multiple selections.
   */
  multiple: _propTypes.default.bool,

  /**
   * Text to display when there are no options.
   */
  noOptionsText: _propTypes.default.node,

  /**
   * Callback fired when focus out from input.
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback fired when the value changes.
   Signature:
   function(event: object, value: any) => void
   event: The event source of the callback
   value: null
   */
  onChange: _propTypes.default.func,

  /**
   * Callback fired everytime the input has been changed
   */
  onInputChange: _propTypes.default.func,

  /**
   * Callback fired when the popup requests to be closed. Use in controlled mode (see open).
   Signature:
   function(event: object) => void
   event: The event source of the callback
   */
  onClose: _propTypes.default.func,

  /**
   * Callback fired when the popup requests to be opened. Use in controlled mode (see open).
   Signature:
   function(event: object) => void
   event: The event source of the callback.
   */
  onOpen: _propTypes.default.func,

  /**
   * Control the popup` open state.
   */
  open: _propTypes.default.bool,

  /**
   * Array of options.
   */
  options: _propTypes.default.array,

  /**
   * The component used to render the body of the popup.
   */
  PaperComponent: _propTypes.default.elementType,

  /**
   * The component used to position the popup.
   */
  PopperComponent: _propTypes.default.elementType,

  /**
   * Render the group.
   Signature:
   function(option: any) => ReactNode
   option: The group to render.
   */
  renderGroup: _propTypes.default.func,

  /**
   * Render the option, use getOptionLabel by default.
   Signature:
   function(option: any, state: object) => ReactNode
   option: The option to render.
   state: The state of the component.
   */
  renderOption: _propTypes.default.func,

  /**
   * Render the selected value.
   Signature:
   function(value: any, getTagProps: function) => ReactNode
   value: The value provided to the component.
   getTagProps: A tag props getter.
   */
  renderTags: _propTypes.default.func,

  /**
   * The value of the autocomplete.
   */
  value: _propTypes.default.any,

  /**
   * This prop is used to help implement the accessibility logic. If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: _propTypes.default.string,
  //  TextField Props

  /**
   * Controls whether input is required
   */
  required: _propTypes.default.bool,

  /**
   * Set error state
   */
  error: _propTypes.default.bool,

  /**
   * Helper text to appear under the input
   */
  helperText: _propTypes.default.node,

  /**
   * set autoFocus true/false (default: false)
   */
  autoFocus: _propTypes.default.bool,
  focused: _propTypes.default.bool,

  /** Name attribute of the input element. */
  name: _propTypes.default.string,

  /**
   * Used to determine if an option is selected, considering the current value. Uses strict equality by default.
   Signature:
   function(option: T, value: T) => boolean
   option: The option to test.
   value: The value to test against. */
  getOptionSelected: _propTypes.default.func,

  /** Element Selector */
  'data-hrl-bo': _propTypes.default.string,

  /** Async action indication */
  'data-hrl-is-in-progress': _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),

  /** Allow hebrew characters only */
  // hebrewCharsOnly: PropTypes.bool,

  /**sets aria-required attribute without affecting design (no'*' will be added) */
  invisibleRequired: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
  isMatchFromStart: _propTypes.default.bool,
  hebrewCharsOnly: _propTypes.default.bool,
  popupIcon: _propTypes.default.node,
  allowFreeText: _propTypes.default.bool,
  label: _propTypes.default.node,

  /** If true, the label will not display the asterisk.  */
  hideRequiredAsterisk: _propTypes.default.bool,

  /** If renderInput points to function, then the function will be run instead it's default settings.  */
  renderInput: _propTypes.default.func,

  /** role of wrapped input  */
  role: _propTypes.default.string,

  /** Control if the input should be blurred when an option is selected:
   - false the input is not blurred.
   - true the input is always blurred.
   - touch the input is blurred after a touch event.
   - mouse the input is blurred after a mouse event.
   */
  blurOnSelect: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool])
};
Autocomplete.displayName = 'Autocomplete';
Autocomplete.defaultProps = {
  // hebrewCharsOnly: false,
  autoComplete: false,
  autoHighlight: false,
  autoSelect: false,
  clearOnEscape: false,
  debug: false,
  disableClearable: false,
  disableCloseOnSelect: false,
  disabled: false,
  disableListWrap: false,
  disablePortal: true,
  filterSelectedOptions: false,
  freeSolo: false,
  includeInputInList: false,
  open: false,
  id: "autocomplete-".concat(Math.floor(Math.random() * 10000)),
  'data-hrl-bo': "autocomplete",
  'data-hrl-is-in-progress': undefined,
  ListboxComponent: 'ul',
  loading: false,
  loadingText: 'Loading…',
  noOptionsText: 'אין אפשרויות',
  options: [],
  getOptionLabel: function getOptionLabel(x) {
    return x;
  },
  required: false,
  error: false,
  helperText: null,
  name: 'autocomplete',
  invisibleRequired: false,
  isMatchFromStart: false,
  hideRequiredAsterisk: false,
  renderInput: null,
  role: 'combobox',
  blurOnSelect: 'false'
};