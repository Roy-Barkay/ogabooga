"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var addHyphenToLastDigits = function addHyphenToLastDigits(number, count) {
  return number.toString().replace(new RegExp("(\\d+)(\\d{".concat(count, "})")), "$1-$2");
};
var getPrefixString = function getPrefixString() {
  var _ref;
  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return (_ref = []).concat.apply(_ref, (0, _toConsumableArray2["default"])(arr.map(function (n) {
    return count ? [n, count && addHyphenToLastDigits(n, count)] : n;
  }))).join('|');
};
var _default = function _default(_ref2) {
  var value = _ref2.value;
  return function () {
    var GeographicAreaPrefixArray = [2, 3, 4, 8, 9];
    var NonGeographicAreaPrefixArray = [72, 73, 74, 76, 77, 78];
    var MobilePrefixArray = [50, 51, 52, 53, 54, 55, 56, 58, 59];
    var KosherGeographicAreaPrefixArray = (0, _toConsumableArray2["default"])(GeographicAreaPrefixArray.map(function (n) {
      return +(n + '80');
    }));
    var KosherNonGeographicAreaPrefixArray = [5041, 5271, 5276, 5331, 5341, 5484, 5485, 5832, 5567, 5598, 7229];
    var veidanConferencingPrefixArray = [73724];
    var mobilePrefixesString = getPrefixString(MobilePrefixArray, 0);
    var landlinePrefixesString = getPrefixString([].concat(GeographicAreaPrefixArray, NonGeographicAreaPrefixArray), 0);
    var KosherPrefixesString = getPrefixString([].concat((0, _toConsumableArray2["default"])(KosherGeographicAreaPrefixArray), KosherNonGeographicAreaPrefixArray), 2);
    var veidanConferencingPrefixString = getPrefixString(veidanConferencingPrefixArray, 3);
    var mobilePattern = new RegExp("^0(".concat(mobilePrefixesString, ")-?(([2-9])(?!\\3+$)([0-9]{6}))$"));
    var landlinePattern = new RegExp("^0(".concat(landlinePrefixesString, ")-?(([0-9])(?!\\3+$)([0-9]{6}))$"));
    var kosherPattern = new RegExp("^(0((".concat(KosherPrefixesString, ")([0-9]{5})|(").concat(veidanConferencingPrefixString, ")[0-9]{4}))$"));
    var isMobile = mobilePattern.test(value);
    var isLandline = landlinePattern.test(value);
    var isKosher = kosherPattern.test(value);
    return {
      isValid: isMobile || isLandline,
      isMobile: isMobile,
      isLandline: isLandline,
      isKosher: isKosher
    };
  };
};
exports["default"] = _default;