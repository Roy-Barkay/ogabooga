"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pick = pick;
exports.isObject = isObject;
exports.isNumber = isNumber;
exports.debounce = debounce;
exports.isFragment = exports.isChildrenNil = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Pick specific parameters, if exists, from object
 * @param {Array} keys wanted parameters
 * @param {Object} obj data
 * @return {object} trimmed object
 */
function pick(keys, obj) {
  var output = {};
  keys.forEach(function (prop) {
    if (typeof obj[prop] !== 'undefined') {
      output[prop] = obj[prop];
    }
  });
  return output;
}
/**
 * Check if variable is object
 * @param {mixed} obj
 * @return {boolean}
 */


function isObject(obj) {
  return _typeof(obj) === 'object' && obj !== null;
}
/**
 * Check if variable is number
 * @param   {any}  value
 * @return  {bool}
 */


function isNumber(value) {
  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
}

;
/***
 * debounce
 * @param {Function} fn - function
 * @param {Number} wait - time in milliseconds to wait until next function invocation
 * @param {object} options - {if leading=true, invoke the function immediately and schedule another call)
 * @returns {Function}
 */

function debounce(fn, wait) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$leading = _ref.leading,
      leading = _ref$leading === void 0 ? false : _ref$leading;

  var timeoutId,
      wasCalledAtLeastOnce = false;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (leading && !wasCalledAtLeastOnce) {
      wasCalledAtLeastOnce = true;
      fn.apply(void 0, args);
    }

    if (timeoutId) {
      clearTimeout(timeoutId);
    }

    timeoutId = setTimeout(function () {
      fn.apply(void 0, args);
    }, wait);
  };
}
/**
 * Tests if children are nil
 * @param {Object} children The children prop of a component.
 * @returns {Boolean}
 */


var isChildrenNil = function isChildrenNil(children) {
  return children === null || children === undefined || Array.isArray(children) && children.length === 0;
};

exports.isChildrenNil = isChildrenNil;

var isFragment = function isFragment(element) {
  if (element.type) {
    return element.type === _react.default.Fragment;
  }

  return element === _react.default.Fragment;
};

exports.isFragment = isFragment;