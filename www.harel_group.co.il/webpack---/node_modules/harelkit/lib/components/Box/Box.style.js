"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _spacing = _interopRequireDefault(require("../ThemeProvider/Themes/base/spacing"));

var _palette = _interopRequireDefault(require("../ThemeProvider/Themes/base/palette"));

var _breakpoints = _interopRequireDefault(require("../ThemeProvider/Themes/base/breakpoints"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _misc = require("../../utils/misc");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var options = ['top', 'right', 'bottom', 'left'];
var colors = ['primary', 'secondary', 'triadic'];

var valueToStyle = function valueToStyle(val, name) {
  if (!val) return null;
  var result = '';

  if ((0, _misc.isNumber)(val)) {
    result += "".concat(name, ": ").concat(val * _spacing.default, "px;");
  } // must be object with one or more of the options words


  if ((0, _misc.isObject)(val)) {
    for (var _i = 0, _Object$keys = Object.keys(val); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];

      if (options.indexOf(key) > -1) {
        result += "".concat(name, "-").concat(key, ": ").concat(val[key] * _spacing.default, "px;");
      }
    }
  } // must be 4 numbers array. example: [1, 1.5, 1, 2]


  if (Array.isArray(val) && val.length === 4) {
    for (var index = 0; index < val.length; index++) {
      result += "".concat(name, "-").concat(options[index], ": ").concat(val[index] * _spacing.default, "px;");
    }
  }

  return result;
};

var valueToColor = function valueToColor(val, name) {
  if (!val) return null;
  var result = null;
  var valArr = val.split('.');

  if (colors.indexOf(valArr[0]) > -1) {
    if (valArr.length === 1) {
      result = "".concat(name, ": ").concat(_palette.default[valArr[0]]['main'], ";");
    } else {
      result = "".concat(name, ": ").concat(_palette.default[valArr[0]][valArr[1]], ";");
    }
  }

  return result;
};

var valueToProperty = function valueToProperty(val, name) {
  if (!val) return null;
  return "".concat(name, ": ").concat(val, ";");
};

var buildStyle = function buildStyle(data) {
  var m = data.m,
      p = data.p,
      bg = data.bg,
      c = data.c,
      d = data.d;
  var result = '';
  if (m) result += valueToStyle(m, 'margin');
  if (p) result += valueToStyle(p, 'padding');
  if (bg) result += valueToColor(bg, 'background-color');
  if (c) result += valueToColor(c, 'color');
  if (d) result += valueToProperty(d, 'display');
  return result;
};

var Root = _styledComponents.default.div(_templateObject(), function (props) {
  var data = props.data;
  var result = '';

  if (data) {
    for (var _i2 = 0, _Object$keys2 = Object.keys(data); _i2 < _Object$keys2.length; _i2++) {
      var key = _Object$keys2[_i2];

      if (key === 'all') {
        result += buildStyle(data[key]);
      } else {
        if (data[key]) {
          result += "@media (min-width: ".concat(_breakpoints.default.values[key], "px) { ").concat(buildStyle(data[key]), " }");
        }
      }
    }
  }

  return result;
});

var _default = {
  Root: Root
};
exports.default = _default;