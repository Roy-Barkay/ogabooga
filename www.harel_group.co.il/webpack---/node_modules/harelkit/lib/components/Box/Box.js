"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Box = _interopRequireDefault(require("./Box.style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Box = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var children = props.children,
      component = props.component,
      className = props.className,
      p = props.p,
      m = props.m,
      bg = props.bg,
      c = props.c,
      d = props.d,
      xs = props.xs,
      sm = props.sm,
      md = props.md,
      lg = props.lg,
      xl = props.xl;

  if (typeof children === 'function') {
    return children();
  }

  var data = {
    all: {
      p: p,
      m: m,
      bg: bg,
      c: c,
      d: d
    },
    xs: xs,
    sm: sm,
    md: md,
    lg: lg,
    xl: xl
  };
  return /*#__PURE__*/_react.default.createElement(_Box.default.Root, {
    as: component,
    data: data,
    className: className,
    ref: ref
  }, children);
});
Box.propTypes = {
  /**
   * Render element type
   */
  component: _propTypes.default.oneOf(['div', 'span']),

  /**
   * Background color, using the palette colors.
   * Can be one of palette colors names (primary, secondary or triadic)
   * and with dot annotation (example: primary.light3) you can select more specific color, 
   * one of: light4, light3, light2, light, main, dark, dark2, dark3, dark4.
   * if there is no dot the selected color is main.
   */
  bg: _propTypes.default.string,

  /**
   * Font color, using the palette colors.
   * Same as background color rules.
   */
  c: _propTypes.default.string,

  /**
   * Margin, using theme spacing.
   * If number then the result is "margin: (value * spacing)px",
   * If array (must be array with length of 4) then the result is: "margin: (value[0])px (value[1])px (value[2])px (value[3])px",
   * If Object then the object keys (top, right, bottom, left) will determine the margin.
   */
  m: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.array, _propTypes.default.object]),

  /**
   * Padding, using the spacing.
   * Same as margin rules.
   */
  p: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.array, _propTypes.default.object]),

  /**
   * display style of element
   */
  d: _propTypes.default.oneOf(['block', 'inline', 'inline-block']),

  /**
   * Will set the rules for breakpoint extra small and above.
   * Can get all the style rules in the object with the same keys as the props names
   */
  xs: _propTypes.default.object,

  /**
   * Will set the rules for breakpoint small and above.
   * Can get all the style rules in the object with the same keys as the props names
   */
  sm: _propTypes.default.object,

  /**
   * Will set the rules for breakpoint medium and above.
   * Can get all the style rules in the object with the same keys as the props names
   */
  md: _propTypes.default.object,

  /**
   * Will set the rules for breakpoint large and above.
   * Can get all the style rules in the object with the same keys as the props names
   */
  lg: _propTypes.default.object,

  /**
   * Will set the rules for breakpoint extra large and above.
   * Can get all the style rules in the object with the same keys as the props names
   */
  xl: _propTypes.default.object
};
var _default = Box;
exports.default = _default;