"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _HelperText = _interopRequireDefault(require("../HelperText"));

var _Label = _interopRequireDefault(require("../Label"));

var _Group = _interopRequireDefault(require("./Group.style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var noop = function noop() {};

var Group = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var label = props.label,
      value = props.value,
      name = props.name,
      helperText = props.helperText,
      bo = props.bo,
      error = props.error,
      children = props.children,
      required = props.required,
      onChange = props.onChange;

  var _useState = (0, _react.useState)(value || null),
      _useState2 = _slicedToArray(_useState, 2),
      checkedOption = _useState2[0],
      setCheckedOption = _useState2[1];

  var radioName = name || "radio".concat(Math.floor(Math.random() * 10000));

  var handleChange = function handleChange(event) {
    var newValue = event.target.value;
    onChange(event);
    setCheckedOption(newValue);
  };

  var options = _react.Children.map(children, function (child, index) {
    return /*#__PURE__*/(0, _react.cloneElement)(child, {
      key: "".concat(radioName).concat(index),
      name: radioName,
      checked: checkedOption === child.props.value,
      onChange: handleChange,
      ref: ref
    });
  });

  return /*#__PURE__*/_react.default.createElement(_Group.default.Root, {
    "aria-labelledby": "radio",
    className: error && 'error',
    "data-hrl-bo": bo ? "".concat(bo, "-radio-group") : null
  }, label && /*#__PURE__*/_react.default.createElement(_Label.default, {
    required: required,
    component: "legend",
    bo: bo ? "".concat(bo, "-radio-group-label") : null
  }, label), options, helperText && /*#__PURE__*/_react.default.createElement(_HelperText.default, {
    bo: bo ? "".concat(bo, "-radio-group-help") : null,
    error: error
  }, helperText));
});
Group.propTypes = {
  /**
   * Will add data-hrl-bo attribute to element.
   * 
   * bo attribute:
   * {bo}-radio-group
   * {bo}-radio-group-label
   * {bo}-radio-group-help
   */
  bo: _propTypes.default.string,

  /**
   * Group children. Must be Radio element
   */
  children: _propTypes.default.node,

  /**
   * Callback fired when the state is changed
   * 
   * <strong>Signature:</strong>
   * function(event: object) => void
   * event: The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean)
   */
  onChange: _propTypes.default.func,

  /**
   * The name used to reference the value of the control. 
   * If you don't provide this prop, it falls back to a randomly generated name
   */
  name: _propTypes.default.string,

  /**
   * The value of the selected radio
   */
  value: _propTypes.default.string,

  /**
   * Group label to be displayed
   */
  label: _propTypes.default.string,

  /**
   * Helper text to be displayed below the group
   */
  helperText: _propTypes.default.string,

  /**
   * Mark Group as error
   */
  error: _propTypes.default.bool,

  /**
   * Mark group selection as required
   */
  required: _propTypes.default.bool
};
Group.defaultProps = {
  onChange: noop,
  error: false,
  required: false
};
var _default = Group;
exports.default = _default;