"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Checkbox = _interopRequireDefault(require("./Checkbox.style"));

var _HelperText = _interopRequireDefault(require("../HelperText"));

var _clsx = _interopRequireDefault(require("clsx"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var StyledCheckbox = (0, _styledComponents.default)('label')(_templateObject(), _Checkbox.default);

var noop = function noop() {};

var Checkbox = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var bo = props.bo,
      label = props.label,
      checked = props.checked,
      onChange = props.onChange,
      helperText = props.helperText,
      error = props.error,
      disabled = props.disabled,
      id = props.id,
      name = props.name,
      value = props.value,
      children = props.children,
      tabIndex = props.tabIndex,
      rest = _objectWithoutProperties(props, ["bo", "label", "checked", "onChange", "helperText", "error", "disabled", "id", "name", "value", "children", "tabIndex"]);

  var _useState = (0, _react.useState)(checked),
      _useState2 = _slicedToArray(_useState, 2),
      checkedState = _useState2[0],
      setCheckedState = _useState2[1];

  var handleInputChange = function handleInputChange(event) {
    var newChecked = event.target.checked;
    onChange(event);
    setCheckedState(newChecked);
  };

  return /*#__PURE__*/_react.default.createElement(StyledCheckbox, {
    htmlFor: id,
    className: (0, _clsx.default)(disabled && 'disabled'),
    "data-hrl-bo": bo ? "".concat(bo, "-checkbox-label") : null
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _clsx.default)('checkbox', error && 'error')
  }, /*#__PURE__*/_react.default.createElement("input", _extends({
    type: "checkbox",
    tabIndex: tabIndex,
    ref: ref,
    id: id,
    name: name,
    value: value,
    disabled: disabled,
    checked: checkedState,
    onChange: handleInputChange,
    "data-hrl-bo": bo ? "".concat(bo, "-checkbox") : null
  }, rest)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("svg", {
    viewBox: "0 0 32 32",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("g", {
    fill: "none",
    stroke: "#fff",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "3px"
  }, /*#__PURE__*/_react.default.createElement("line", {
    x1: "3",
    x2: "12",
    y1: "16",
    y2: "25"
  }), /*#__PURE__*/_react.default.createElement("line", {
    x1: "12",
    x2: "29",
    y1: "25",
    y2: "7"
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _clsx.default)('bg', error && 'error')
  })), children || label, helperText && /*#__PURE__*/_react.default.createElement(_HelperText.default, {
    "data-hrl-bo": bo ? "".concat(bo, "-checkbox-help") : null,
    error: error
  }, helperText));
});
Checkbox.propTypes = {
  /**
   * The id of the input element
   */
  id: _propTypes.default.string,

  /**
   * The name of the input element
   */
  name: _propTypes.default.string,

  /**
   * If true, the component is checked
   */
  checked: _propTypes.default.bool,

  /**
   * Checkbox Label
   */
  label: _propTypes.default.string,

  /**
   * Callback fired when the state is changed
   * 
   * <strong>Signature:</strong>
   * function(event: object) => void
   * event: The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean)
   */
  onChange: _propTypes.default.func,

  /**
   * Helper text
   */
  helperText: _propTypes.default.string,

  /**
   * If true, change the colors to error
   */
  error: _propTypes.default.bool,

  /**
   * If true, the input is disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * The value of the component. 
   * The DOM API casts this to a string. The browser uses "on" as the default value
   */
  value: _propTypes.default.any,

  /**
   * Will add data-hrl-bo attribute to element.
   * 
   * bo attribute:
   * {bo}-checkbox-label
   * {bo}-checkbox
   * {bo}-checkbox-help
   */
  bo: _propTypes.default.string
};
Checkbox.defaultProps = {
  checked: false,
  onChange: noop,
  error: false,
  disabled: false
};
var _default = Checkbox;
exports.default = _default;