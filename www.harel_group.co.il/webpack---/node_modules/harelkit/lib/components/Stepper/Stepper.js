"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Stepper = _interopRequireDefault(require("./Stepper.style"));

var _Step = _interopRequireDefault(require("./Step"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var isChildrenNil = function isChildrenNil(children) {
  return children === null || children === undefined || Array.isArray(children) && children.length === 0;
};

var Stepper = function Stepper(props) {
  var activeStep = props.activeStep,
      steps = props.steps,
      children = props.children,
      bo = props.bo;
  var stepList = isChildrenNil(children) ? steps.map(function (step, index) {
    return /*#__PURE__*/_react.default.createElement(_Step.default, {
      key: step.title || step,
      active: activeStep === index,
      title: step.title || step,
      icon: step.icon,
      bo: "".concat(bo, "-step-").concat(index)
    });
  }) : _react.Children.map(children, function (child, index) {
    if (child.type === _Step.default) {
      return /*#__PURE__*/(0, _react.cloneElement)(child, {
        key: child.props.title,
        active: activeStep === index,
        title: child.props.title,
        icon: child.props.icon,
        bo: "".concat(bo, "-step-").concat(index)
      });
    }
  });
  return /*#__PURE__*/_react.default.createElement(_Stepper.default.Stepper, null, stepList);
};

Stepper.Step = _Step.default;
Stepper.propTypes = {
  /**
   * Active step number
   */
  activeStep: _propTypes.default.number,

  /**
   * Steps in stepper. if children exists it will override Steps
   */
  steps: _propTypes.default.array,

  /**
   * Will add data-hrl-bo attribute to each step.
   * counter is zero based.
   * 
   * bo attribute:
   * {bo}-step-{counter}
   */
  bo: _propTypes.default.string
};
Stepper.defaultProps = {
  activeStep: 1,
  steps: []
};
var _default = Stepper;
exports.default = _default;