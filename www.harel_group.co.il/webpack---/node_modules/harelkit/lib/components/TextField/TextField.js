"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _TextField = _interopRequireDefault(require("./TextField.style"));

var _Label = _interopRequireDefault(require("../Label"));

var _HelperText = _interopRequireDefault(require("../HelperText"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactInputMask = _interopRequireDefault(require("react-input-mask"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var noop = function noop() {};

var LINE_HEIGHT = 17;
var START_HEIGHT = 52;
var TextField = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var id = props.id,
      direction = props.direction,
      required = props.required,
      disabled = props.disabled,
      type = props.type,
      helperText = props.helperText,
      label = props.label,
      error = props.error,
      autoFocus = props.autoFocus,
      name = props.name,
      onChange = props.onChange,
      placeholder = props.placeholder,
      multiline = props.multiline,
      rows = props.rows,
      rowsMax = props.rowsMax,
      defaultValue = props.defaultValue,
      value = props.value,
      bo = props.bo,
      prefix = props.prefix,
      suffix = props.suffix,
      numericKeyboard = props.numericKeyboard,
      mask = props.mask,
      maskCover = props.maskCover,
      maskPermanents = props.maskPermanents,
      align = props.align,
      alwaysShowMask = props.alwaysShowMask,
      rest = _objectWithoutProperties(props, ["id", "direction", "required", "disabled", "type", "helperText", "label", "error", "autoFocus", "name", "onChange", "placeholder", "multiline", "rows", "rowsMax", "defaultValue", "value", "bo", "prefix", "suffix", "numericKeyboard", "mask", "maskCover", "maskPermanents", "align", "alwaysShowMask"]);

  var defaultContentHeight = START_HEIGHT + LINE_HEIGHT * (rows - 1);

  var _useState = (0, _react.useState)(defaultValue || value),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var _useState3 = (0, _react.useState)(defaultContentHeight),
      _useState4 = _slicedToArray(_useState3, 2),
      contentHeight = _useState4[0],
      setContentHeight = _useState4[1];

  var shadowRef = (0, _react.useRef)(null);
  var helperId = id ? "".concat(id, "-helper") : null;
  var numericProps = numericKeyboard ? {
    'inputMode': 'numeric',
    'pattern': '[0-9]*'
  } : null;

  var handleInputOnChange = function handleInputOnChange(event) {
    var newValue = event.target.value;
    setInputValue(newValue);
    onChange(event);
  };

  (0, _react.useEffect)(function () {
    if (!shadowRef.current) return;

    if (multiline) {
      // TODO: fix multi line auto resize
      var newHeight = defaultContentHeight; // need to calculate this

      shadowRef.current.style.height = 'auto';
      setContentHeight("".concat(newHeight, "px"));
    }
  }, [inputValue, rowsMax, defaultContentHeight, multiline]);
  return /*#__PURE__*/_react.default.createElement(_TextField.default.Root, null, /*#__PURE__*/_react.default.createElement(_TextField.default.Content, {
    error: error,
    float: inputValue && !!inputValue.length || prefix || suffix,
    disabled: disabled,
    direction: direction,
    rows: multiline ? rows : null,
    multiline: multiline,
    style: {
      height: multiline && contentHeight
    }
  }, !multiline ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, prefix && /*#__PURE__*/_react.default.createElement(_TextField.default.Adornment, null, prefix), mask ? /*#__PURE__*/_react.default.createElement(_reactInputMask.default, _extends({
    mask: mask,
    maskChar: maskCover,
    permanents: maskPermanents,
    alwaysShowMask: alwaysShowMask,
    inputRef: ref,
    id: id,
    name: name,
    type: type,
    autoFocus: autoFocus,
    placeholder: placeholder,
    defaultValue: defaultValue,
    value: value,
    onChange: handleInputOnChange,
    "data-hrl-bo": bo ? "".concat(bo, "-textfield") : null,
    "aria-describedby": helperId,
    "aria-required": required
  }, numericProps, rest)) : /*#__PURE__*/_react.default.createElement("input", _extends({
    ref: ref,
    id: id,
    name: name,
    type: type,
    autoFocus: autoFocus,
    placeholder: placeholder,
    defaultValue: defaultValue,
    value: value,
    onChange: handleInputOnChange,
    "data-hrl-bo": bo ? "".concat(bo, "-textfield") : null,
    "aria-describedby": helperId,
    "aria-required": required
  }, numericProps, rest)), suffix && /*#__PURE__*/_react.default.createElement(_TextField.default.Adornment, null, suffix)) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_TextField.default.Shadow, {
    ref: shadowRef,
    defaultValue: defaultValue,
    readOnly: true,
    "aria-hidden": "true",
    tabIndex: "-1"
  }), /*#__PURE__*/_react.default.createElement("textarea", _extends({
    ref: ref,
    id: id,
    name: name,
    autoFocus: autoFocus,
    placeholder: placeholder,
    onChange: handleInputOnChange,
    defaultValue: defaultValue,
    value: value,
    "data-hrl-bo": bo ? "".concat(bo, "-textfield") : null,
    "aria-describedby": helperId,
    "aria-required": required
  }, numericProps, rest))), label && /*#__PURE__*/_react.default.createElement(_Label.default, {
    htmlFor: id,
    required: required,
    bo: bo ? "".concat(bo, "-textfield-label") : null
  }, label), /*#__PURE__*/_react.default.createElement("div", {
    className: "line"
  })), helperText && /*#__PURE__*/_react.default.createElement(_HelperText.default, {
    error: error,
    bo: bo ? "".concat(bo, "-textfield-help") : null,
    id: helperId
  }, helperText));
});
TextField.propTypes = {
  /**
   * Text field id
   */
  id: _propTypes.default.string,

  /**
   * Text field direction
   */
  direction: _propTypes.default.oneOf(['rtl', 'ltr']),

  /**
   * If set, asterix sign will be added.
   * this does not set validation rule
   */
  required: _propTypes.default.bool,

  /**
   * Disable text field and all interactions
   */
  disabled: _propTypes.default.bool,

  /**
   * Text field input type
   */
  type: _propTypes.default.string,

  /**
   * Helper text
   */
  helperText: _propTypes.default.string,

  /**
   * Text field label
   */
  label: _propTypes.default.string,

  /**
   * If true, change the colors to error
   */
  error: _propTypes.default.bool,

  /**
   * If true, a textarea element will be rendered instead of an input
   */
  multiline: _propTypes.default.bool,

  /**
   * If true, the input element will be focused during the first mount
   */
  autoFocus: _propTypes.default.bool,

  /**
   * Text field name
   */
  name: _propTypes.default.string,

  /**
   * Callback fired when the value is changed
   * Signature:
   * function(event: object) => void
   * event: The event source of the callback. You can pull out the new value by accessing event.target.value (string)
   */
  onChange: _propTypes.default.func,

  /**
   * Text field placeholder, 
   * will be displayed when no value exists
   */
  placeholder: _propTypes.default.string,

  /**
   * Number of rows to display when multiline option is set to true
   */
  rows: _propTypes.default.number,
  rowsMax: _propTypes.default.number,

  /**
   * The default value of the input element, for uncontrolled input.
   */
  defaultValue: _propTypes.default.string,

  /**
   * The value of the input element, for controlled input.
   */
  value: _propTypes.default.string,

  /**
   * Prefix icon or text
   */
  prefix: _propTypes.default.any,

  /**
   * suffix icon or text
   */
  suffix: _propTypes.default.any,

  /**
   * Will add data-hrl-bo attribute to element.
   * 
   * bo attribute:
   * {bo}-textfield-label
   * {bo}-textfield
   * {bo}-textfield-help
   */
  bo: _propTypes.default.string,

  /**
   * Open Numeric keyboard when inputting on mobile 
   */
  numericKeyboard: _propTypes.default.bool,
  mask: _propTypes.default.string,
  maskCover: _propTypes.default.string,
  align: _propTypes.default.oneOf(['left', 'right']),
  alwaysShowMask: _propTypes.default.bool
};
TextField.defaultProps = {
  direction: 'rtl',
  required: false,
  disabled: false,
  type: 'text',
  error: false,
  multiline: false,
  autoFocus: false,
  onChange: noop,
  rows: 2,
  rowsMax: 4,
  defaultValue: undefined,
  value: undefined,
  maskCover: '_',
  align: 'right',
  alwaysShowMask: false
};
var _default = TextField;
exports.default = _default;