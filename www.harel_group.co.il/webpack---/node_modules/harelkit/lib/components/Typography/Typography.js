"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Typography = _interopRequireDefault(require("./Typography.style"));

var _clsx = _interopRequireDefault(require("clsx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Typography = function Typography(props) {
  var fontWeight = props.fontWeight,
      color = props.color,
      align = props.align,
      children = props.children,
      display = props.display,
      gutterBottom = props.gutterBottom,
      noWrap = props.noWrap,
      paragraph = props.paragraph,
      variant = props.variant,
      component = props.component,
      bo = props.bo,
      rest = _objectWithoutProperties(props, ["fontWeight", "color", "align", "children", "display", "gutterBottom", "noWrap", "paragraph", "variant", "component", "bo"]);

  var variantMapping = {
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    subtitle1: 'h6',
    subtitle2: 'h6',
    body1: 'p',
    body2: 'p',
    inherit: 'p'
  };
  var classNames = (0, _clsx.default)([variant ? variant : null, fontWeight ? fontWeight : null, align ? align : null, noWrap ? 'nowrap' : null, display ? "display".concat(display) : null, color ? "color".concat(color) : null, gutterBottom ? 'gutterbottom' : null]);
  var Component = component || (paragraph ? 'p' : variantMapping[variant]) || 'div';
  return /*#__PURE__*/_react.default.createElement(_Typography.default.Typography, _extends({
    "data-hrl-bo": bo ? "".concat(bo, "-typography") : null,
    className: classNames,
    as: Component
  }, rest), children);
};

Typography.propTypes = {
  /**
   * Set font weight on text
   */
  fontWeight: _propTypes.default.oneOf(['light', 'normal', 'bold']),

  /**
   * The color of the component
   */
  color: _propTypes.default.oneOf(['primary', 'secondary', 'text', 'error']),

  /**
   * Set the text-align on the component
   */
  align: _propTypes.default.oneOf(['left', 'right', 'center']),

  /**
   * The content of the component
   */
  children: _propTypes.default.node,

  /**
   * Controls the display type
   */
  display: _propTypes.default.oneOf(['block', 'inline', 'inlineblock']),

  /**
   * If true, the text will have a bottom margin
   */
  gutterBottom: _propTypes.default.bool,

  /**
   * If true, the text will not wrap, but instead will truncate with a text overflow ellipsis. Note that text overflow can only happen with block or inline-block level elements (the element needs to have a width in order to overflow)
   */
  noWrap: _propTypes.default.bool,

  /**
   * If true, the text will have a bottom margin.
   */
  paragraph: _propTypes.default.bool,

  /**
   * Applies the theme typography styles.
   */
  variant: _propTypes.default.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'srOnly']),

  /**
   * The component used for the root node. 
   * Either a string to use a HTML element or a component
   */
  component: _propTypes.default.elementType,

  /**
   * Will add data-hrl-bo attribute to element
   * 
   * bo attribute:
   * {bo}-typography
   */
  bo: _propTypes.default.string
};
Typography.defaultProps = {
  variant: 'body1'
};
var _default = Typography;
exports.default = _default;