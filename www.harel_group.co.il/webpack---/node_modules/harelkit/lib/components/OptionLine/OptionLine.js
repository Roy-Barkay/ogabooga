"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _OptionLine = _interopRequireDefault(require("./OptionLine.style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var noop = function noop() {};

var OptionLine = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var title = props.title,
      subtitle = props.subtitle,
      defaultChecked = props.defaultChecked,
      name = props.name,
      id = props.id,
      value = props.value,
      bo = props.bo,
      onChange = props.onChange;

  var handleChange = function handleChange(event) {
    onChange(event);
  };

  return /*#__PURE__*/_react.default.createElement(_OptionLine.default.Root, {
    htmlFor: id,
    "data-hrl-bo": bo ? "".concat(bo, "-option-line") : null
  }, /*#__PURE__*/_react.default.createElement(_OptionLine.default.Option, null, /*#__PURE__*/_react.default.createElement("input", {
    type: "radio",
    ref: ref,
    id: id,
    name: name,
    value: value,
    defaultChecked: defaultChecked,
    onChange: handleChange
  }), /*#__PURE__*/_react.default.createElement("span", null)), /*#__PURE__*/_react.default.createElement(_OptionLine.default.Info, null, /*#__PURE__*/_react.default.createElement(_OptionLine.default.Title, null, title), /*#__PURE__*/_react.default.createElement(_OptionLine.default.Subtitle, null, subtitle)));
});
OptionLine.propTypes = {
  /**
   * Will add data-hrl-bo attribute to element.
   * 
   * bo attribute:
   * {bo}-radio-label
   * {bo}-radio
   */
  bo: _propTypes.default.string,

  /**
   * Option line title
   */
  title: _propTypes.default.string.isRequired,

  /**
   * Option line subtitle
   */
  subtitle: _propTypes.default.string,

  /**
   * If true, input will be checked on mount
   */
  defaultChecked: _propTypes.default.bool,

  /**
   * Input name
   */
  name: _propTypes.default.string,

  /**
   * Input value
   */
  value: _propTypes.default.string,

  /**
   * Callback fired when the option line is changes
   * 
   * <strong>Signature:</strong>
   * function(event: object) => void
   * event: The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean)
   */
  onChange: _propTypes.default.func
};
OptionLine.defaultProps = {
  defaultChecked: false,
  onChange: noop
};
var _default = OptionLine;
exports.default = _default;