"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Button = _interopRequireDefault(require("./Button.style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var noop = function noop() {};

var Button = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var color = props.color,
      content = props.content,
      disabled = props.disabled,
      fullWidth = props.fullWidth,
      children = props.children,
      onClick = props.onClick,
      size = props.size,
      variant = props.variant,
      startIcon = props.startIcon,
      endIcon = props.endIcon,
      href = props.href,
      bo = props.bo;
  var buttonContent = content ? content : children;

  var StartIcon = startIcon && /*#__PURE__*/_react.default.createElement(_Button.default.Start, null, startIcon);

  var EndIcon = endIcon && /*#__PURE__*/_react.default.createElement(_Button.default.End, null, endIcon);

  var handleClick = function handleClick(event) {
    if (!href) onClick(event);
  };

  var classNames = variant ? variant : '';
  if (color) classNames += " ".concat(color);
  return /*#__PURE__*/_react.default.createElement(_Button.default.Button, {
    as: !!href ? 'a' : 'button',
    href: href,
    ref: ref,
    "data-hrl-bo": bo ? "".concat(bo, "-button") : null,
    onClick: handleClick,
    size: size,
    fullWidth: fullWidth,
    disabled: disabled,
    "aria-disabled": disabled,
    color: color,
    className: classNames
  }, StartIcon, /*#__PURE__*/_react.default.createElement(_Button.default.Label, null, buttonContent), EndIcon);
});
Button.propTypes = {
  /**
   * The color of the component
   */
  color: _propTypes.default.oneOf(['primary', 'secondary', 'triadic']),

  /**
   * The content of the button. will be used if no children exists
   */
  content: _propTypes.default.string,

  /**
   * If true, the button will be disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Display button with full width inside its container
   */
  fullWidth: _propTypes.default.bool,

  /**
   * On click handler
   */
  onClick: _propTypes.default.func,

  /**
   * The size of the button
   */
  size: _propTypes.default.oneOf(['medium', 'large']),

  /**
   * Icon placed before the button content
   */
  startIcon: _propTypes.default.node,

  /**
   * Icon placed after the button content
   */
  endIcon: _propTypes.default.node,

  /**
   * The variant to use.
   */
  variant: _propTypes.default.oneOf(['contained', 'outlined', 'text']),

  /**
   * Change the button to a link,
   * going to href when user clicks on button
   */
  href: _propTypes.default.string,

  /**
   * Will add data-hrl-bo attribute to element.
   * 
   * bo attribute:
   * {bo}-button
   */
  bo: _propTypes.default.string
};
Button.defaultProps = {
  color: 'primary',
  size: 'medium',
  fullWidth: false,
  disabled: false,
  variant: 'contained',
  onClick: noop
};
var _default = Button;
exports.default = _default;