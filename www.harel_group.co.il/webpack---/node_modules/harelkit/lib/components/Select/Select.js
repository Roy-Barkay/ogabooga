"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Select = _interopRequireDefault(require("./Select.style"));

var _Option = _interopRequireDefault(require("./Option"));

var _Label = _interopRequireDefault(require("../Label"));

var _HelperText = _interopRequireDefault(require("../HelperText"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var noop = function noop() {};

var Select = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var id = props.id,
      name = props.name,
      options = props.options,
      values = props.values,
      required = props.required,
      multi = props.multi,
      placeholder = props.placeholder,
      disabled = props.disabled,
      labelField = props.labelField,
      valueField = props.valueField,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onDropdownClose = props.onDropdownClose,
      onDropdownOpen = props.onDropdownOpen,
      open = props.open,
      label = props.label,
      error = props.error,
      helperText = props.helperText,
      rest = _objectWithoutProperties(props, ["id", "name", "options", "values", "required", "multi", "placeholder", "disabled", "labelField", "valueField", "onChange", "onFocus", "onBlur", "onDropdownClose", "onDropdownOpen", "open", "label", "error", "helperText"]);

  var helperId = id ? "".concat(id, "-helper") : null;
  var labelId = id ? "".concat(id, "-label") : null;
  var optionsId = id ? "".concat(id, "-options") : null;
  var rootRef = (0, _react.useRef)(null);
  var optionsRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(values),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = (0, _react.useState)(open),
      _useState4 = _slicedToArray(_useState3, 2),
      isOpen = _useState4[0],
      setIsOpen = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      activeId = _useState6[0],
      setActiveId = _useState6[1];

  var handleInputKeyUp = function handleInputKeyUp(e) {
    if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
      if (e.target.firstChild.name == 'year') {
        document.querySelectorAll("[role='combobox']")[0].setAttribute('aria-activedescendant', document.querySelectorAll("[role='listbox'] .active")[0].id);
      } else if (e.target.firstChild.name == 'month') {
        document.querySelectorAll("[role='combobox']")[1].setAttribute('aria-activedescendant', document.querySelectorAll("[role='listbox'] .active")[0].id);
      }
    } else {
      document.querySelectorAll("[role='combobox']")[0].setAttribute('aria-activedescendant', '');
    }
  };

  var handleOptionClick = function handleOptionClick(item) {
    if (!item.disabled) {
      var itemIndex = null;

      var arr = _toConsumableArray(value);

      var index = arr.findIndex(function (a) {
        return a[valueField] === item[valueField];
      });

      if (index > -1) {
        // remove
        arr.splice(index, 1);
        itemIndex = index;
      } else {
        // add
        arr.push(item);
        itemIndex = options.findIndex(function (a) {
          return a[valueField] === item[valueField];
        });

        if (!multi) {
          arr = [item];
        }
      }

      setActiveId(itemIndex);
      setValue(arr);
      onChange(arr);
    }

    if (!multi) {
      setIsOpen(false);
    }
  };

  var handleInputClick = function handleInputClick() {
    if (!disabled) {
      var newOpenState = !isOpen;
      setIsOpen(newOpenState);
    }
  };

  var handleInputFocus = function handleInputFocus(e) {
    onFocus(e);
  };

  var handleInputBlur = function handleInputBlur(e) {
    onBlur(e);
  };

  var handleInputKeyDown = function handleInputKeyDown(event) {
    var keyCode = event.charCode || event.keyCode;

    if (keyCode === 32) {
      // space
      setIsOpen(true);
      event.preventDefault();
      return false;
    }

    if (keyCode === 32 || keyCode === 13) {
      // space or enter
      if (isOpen) {
        var active = optionsRef.current.querySelector(".active");
        var items = optionsRef.current.querySelectorAll("[role='option']");
        var list = Array.prototype.slice.call(items);

        if (active) {
          var item = options[list.indexOf(active)];
          handleOptionClick(item);
        } else {
          setIsOpen(false);
        }
      } else {
        setIsOpen(true);
      }

      event.preventDefault();
      return false;
    }

    if (keyCode === 40) {
      // arrow down
      if (!isOpen) setIsOpen(true);
      moveActive(1);
      event.preventDefault();
      return false;
    }

    if (keyCode === 38) {
      // arrow up
      if (!isOpen) setIsOpen(true);
      moveActive(-1);
      event.preventDefault();
      return false;
    }

    if (keyCode === 9) {
      // tab
      if (isOpen) setIsOpen(false);
    }
  };

  var moveActive = function moveActive(direction) {
    if (!optionsRef.current) return;
    var active = optionsRef.current.querySelector(".active");
    var items = optionsRef.current.querySelectorAll("[role='option']");
    var newIndex = getNewIndex(items, active, direction);
    if (active) active.classList.remove("active");
    items[newIndex].classList.add("active");
  };
  /**
       * Calculate new index for active element
       * @property {array} items - items list
       * @property {element} item - html element inside list
       * @property {value} direction - up or down
       * @returns {number} new element index
       */


  var getNewIndex = function getNewIndex(items, item, direction) {
    var element;
    var list = Array.prototype.slice.call(items);

    if (direction === -1) {
      // up
      if (item) {
        if (list.indexOf(item)) {
          // not first element. go one up
          element = item.previousElementSibling;

          while (element && element.classList.contains(".disabled")) {
            element = element.previousElementSibling;
          }
        } else {
          // first element. so we stay at first
          element = items[0];
        }
      } else {
        // get first element that is not disabled
        element = items[0];

        while (element && element.classList.contains(".disabled")) {
          element = element.nextElementSibling;
        }
      }
    } else {
      // down
      if (item) {
        // not last element. go one down
        if (list.indexOf(item) !== items.length - 1) {
          element = item.nextElementSibling;

          while (element && element.classList.contains(".disabled")) {
            element = element.nextElementSibling;
          }
        } else {
          // last element. so we stay at last
          element = items[items.length - 1];
        }
      } else {
        // get last element that is not disabled
        element = items[0];

        while (element && element.classList.contains(".disabled")) {
          element = element.previousElementSibling;
        }
      }
    }

    return list.indexOf(element);
  };

  var isSelected = function isSelected(item) {
    return !!value.find(function (v) {
      return v[labelField] === item[labelField];
    });
  };

  var handleEscape = (0, _react.useCallback)(function (event) {
    if (event.keyCode === 27) {
      // escape
      setIsOpen(false);
    }
  }, []);
  var handleClickOutside = (0, _react.useCallback)(function (event) {
    if (rootRef.current && !rootRef.current.contains(event.target)) {
      setIsOpen(false);
    }
  }, []);
  (0, _react.useEffect)(function () {
    if (isOpen) {
      onDropdownOpen();
    } else {
      onDropdownClose();
    }
  }, [isOpen, onDropdownOpen, onDropdownClose]); // add close on escape support and click outside

  (0, _react.useEffect)(function () {
    var selectRef = rootRef.current;

    if (isOpen) {
      selectRef.addEventListener('keydown', handleEscape, false);
      document.addEventListener('click', handleClickOutside, false);
    }

    return function () {
      selectRef.removeEventListener('keydown', handleEscape, false);
      document.removeEventListener('click', handleClickOutside, false);
    };
  }, [isOpen, handleEscape, handleClickOutside]);
  return /*#__PURE__*/_react.default.createElement(_Select.default.Root, _extends({
    ref: rootRef,
    role: "combobox",
    "aria-expanded": isOpen,
    "aria-required": required,
    "aria-describedby": helperId,
    "aria-activedescendant": activeId !== null ? "".concat(id, "-opt").concat(activeId) : null,
    "aria-labelledby": labelId,
    "aria-haspopup": "listbox",
    "aria-label": label,
    "aria-controls": optionsId,
    tabIndex: "0",
    onKeyUp: handleInputKeyUp,
    onFocus: handleInputFocus,
    onBlur: handleInputBlur,
    onKeyDown: handleInputKeyDown,
    onClick: handleInputClick
  }, rest), /*#__PURE__*/_react.default.createElement("input", {
    id: id,
    name: name,
    type: "hidden",
    tabIndex: "-1",
    ref: ref,
    value: value.map(function (v) {
      return v[valueField];
    }).toString() || []
  }), /*#__PURE__*/_react.default.createElement(_Select.default.Content, {
    error: error,
    float: !!value.length,
    open: isOpen,
    disabled: disabled
  }, /*#__PURE__*/_react.default.createElement("div", null, value.map(function (v) {
    return v[labelField];
  }).toString() || [].toString()), /*#__PURE__*/_react.default.createElement("div", {
    className: "line"
  }), label && /*#__PURE__*/_react.default.createElement(_Label.default, {
    required: required,
    id: labelId
  }, label), /*#__PURE__*/_react.default.createElement(_Select.default.Handle, {
    error: error,
    tabIndex: "-1",
    open: isOpen,
    disabled: disabled
  }, /*#__PURE__*/_react.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16"
  }, /*#__PURE__*/_react.default.createElement("path", {
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "1.5",
    d: "M.929 6L8 12.238 15.071 6"
  })))), /*#__PURE__*/_react.default.createElement(_Select.default.Dropdown, {
    role: "listbox",
    tabIndex: "-1",
    "aria-labelledby": labelId,
    id: optionsId,
    ref: optionsRef,
    className: isOpen && "open"
  }, options.map(function (item, i) {
    return /*#__PURE__*/_react.default.createElement(_Option.default, {
      id: id ? "".concat(id, "-opt").concat(i) : null,
      item: item,
      selected: isSelected,
      onClick: handleOptionClick,
      key: item[labelField],
      multi: multi
    });
  })), helperText && /*#__PURE__*/_react.default.createElement(_HelperText.default, {
    id: helperId,
    error: error
  }, helperText));
});
Select.propTypes = {
  /**
   * If true, open the dropdown
   */
  open: _propTypes.default.bool,

  /**
   * Select label
   */
  label: _propTypes.default.string,

  /**
   * If true, change the colors to error
   */
  error: _propTypes.default.bool,

  /**
   * Helper text
   */
  helperText: _propTypes.default.string,

  /**
   * Select name, input type hidden will get the name
   */
  name: _propTypes.default.string,

  /**
   * Available options, (option with key disabled: true will be disabled)
   */
  options: _propTypes.default.array,

  /**
   * Selected values
   */
  values: _propTypes.default.array,

  /**
   * Select id, input type hidden will get the id
   */
  id: _propTypes.default.string,

  /**
   * If set, asterix sign will be added.
   * this does not set validation rule
   */
  required: _propTypes.default.bool,

  /**
   * If true will act as multi-select
   */
  multi: _propTypes.default.bool,

  /**
   * Placeholder shown where there are no selected values
   */
  placeholder: _propTypes.default.string,

  /**
   * Disable select and all interactions
   */
  disabled: _propTypes.default.bool,

  /**
   * Field in data to use for label
   */
  labelField: _propTypes.default.string,

  /**
   * Field in data to use for value
   */
  valueField: _propTypes.default.string,

  /**
   * On values change callback, returns array of values objects
   */
  onChange: _propTypes.default.func,

  /**
   * On select focus callback
   */
  onFocus: _propTypes.default.func,

  /**
   * On select blur callback
   */
  onBlur: _propTypes.default.func,

  /**
   * Fires upon dropdown close
   */
  onDropdownClose: _propTypes.default.func,

  /**
   * Fires upon dropdown open
   */
  onDropdownOpen: _propTypes.default.func
};
Select.defaultProps = {
  open: false,
  options: [],
  values: [],
  required: false,
  multi: false,
  disabled: false,
  labelField: 'label',
  valueField: 'value',
  onChange: noop,
  onDropdownClose: noop,
  onDropdownOpen: noop,
  onFocus: noop,
  onBlur: noop
};
var _default = Select;
exports.default = _default;