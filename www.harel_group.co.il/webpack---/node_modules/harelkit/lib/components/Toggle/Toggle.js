"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Option = _interopRequireDefault(require("./Option"));

var _Toggle = _interopRequireDefault(require("./Toggle.style"));

var _HelperText = _interopRequireDefault(require("../HelperText"));

var _Label = _interopRequireDefault(require("../Label"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var noop = function noop() {};

var Toggle = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var children = props.children,
      value = props.value,
      onChange = props.onChange,
      ariaLabel = props.ariaLabel,
      label = props.label,
      required = props.required,
      helperText = props.helperText,
      error = props.error,
      id = props.id,
      name = props.name,
      disabled = props.disabled,
      bo = props.bo;
  var helperBo = bo ? "".concat(bo, "-toggle-help") : null;

  var _useState = (0, _react.useState)(value),
      _useState2 = _slicedToArray(_useState, 2),
      checkedOption = _useState2[0],
      setCheckedOption = _useState2[1];

  (0, _react.useEffect)(function () {
    setCheckedOption(value);
  }, [value]);
  (0, _react.useEffect)(function () {
    if (value) setCheckedOption(value);
  }, [value]);

  var handleChange = function handleChange(e) {
    onChange(e, e.target.value);
    setCheckedOption(e.target.value);
  };

  var options = _react.Children.map(children, function (child, index) {
    if (child.type === _Option.default) {
      var idOption = id ? "".concat(id).concat(index) : "toggle".concat(index);
      var nameOption = name || idOption;
      var disabledOption = child.props.disabled || disabled;
      var childValue = child.props.value;
      var childChildren = child.props.children;
      return /*#__PURE__*/_react.default.createElement(_Option.default, {
        checked: checkedOption === childValue,
        onChange: handleChange,
        id: idOption,
        name: nameOption,
        key: idOption,
        value: childValue,
        disabled: disabledOption,
        bo: bo,
        i: index,
        ref: ref
      }, childChildren);
    }
  });

  return /*#__PURE__*/_react.default.createElement(_Toggle.default.Root, {
    "aria-label": ariaLabel
  }, label ? /*#__PURE__*/_react.default.createElement(_Label.default, {
    required: required
  }, label) : null, /*#__PURE__*/_react.default.createElement(_Toggle.default.Field, null, options), helperText ? /*#__PURE__*/_react.default.createElement(_HelperText.default, {
    error: error,
    bo: helperBo
  }, helperText) : null);
});
Toggle.Option = _Option.default;
Toggle.propTypes = {
  /**
   * Default value
   */
  value: _propTypes.default.string,

  /**
   * On change event handler
   */
  onChange: _propTypes.default.func,

  /**
   * Toggle label
   */
  label: _propTypes.default.string,

  /**
   * Use this to give the group a title for accessibility purpose
   */
  ariaLabel: _propTypes.default.string,

  /**
   * If true, show required asterix in label
   */
  required: _propTypes.default.bool,

  /**
   * Toggle input id
   */
  id: _propTypes.default.string,

  /**
   * Toggle input name
   */
  name: _propTypes.default.string,

  /**
   * Toggle error message
   */
  error: _propTypes.default.bool,

  /**
   * Toggle helper text
   */
  helperText: _propTypes.default.string,

  /**
   * if true, toggle element will be disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Will add data-hrl-bo attribute to each step.
   * counter is zero based.
   * 
   * bo attribute:
   * ${bo}-toggle-help
   * ${bo}-toggle-input-${i}
   * ${bo}-toggle-label-${i}
   */
  bo: _propTypes.default.string
};
Toggle.defaultProps = {
  value: null,
  onChange: noop,
  disabled: false,
  error: false
};
var _default = Toggle;
exports.default = _default;